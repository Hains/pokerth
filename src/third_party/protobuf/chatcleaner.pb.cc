// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatcleaner.proto

#include "chatcleaner.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CleanerInitMessage::CleanerInitMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clientsecret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestedversion_)*/0u} {}
struct CleanerInitMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CleanerInitMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CleanerInitMessageDefaultTypeInternal() {}
  union {
    CleanerInitMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CleanerInitMessageDefaultTypeInternal _CleanerInitMessage_default_instance_;
PROTOBUF_CONSTEXPR CleanerInitAckMessage::CleanerInitAckMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.serversecret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverversion_)*/0u} {}
struct CleanerInitAckMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CleanerInitAckMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CleanerInitAckMessageDefaultTypeInternal() {}
  union {
    CleanerInitAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CleanerInitAckMessageDefaultTypeInternal _CleanerInitAckMessage_default_instance_;
PROTOBUF_CONSTEXPR CleanerChatRequestMessage::CleanerChatRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chatmessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestid_)*/0u
  , /*decltype(_impl_.cleanerchattype_)*/0
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u} {}
struct CleanerChatRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CleanerChatRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CleanerChatRequestMessageDefaultTypeInternal() {}
  union {
    CleanerChatRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CleanerChatRequestMessageDefaultTypeInternal _CleanerChatRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR CleanerChatReplyMessage::CleanerChatReplyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cleanertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestid_)*/0u
  , /*decltype(_impl_.cleanerchattype_)*/0
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.cleaneractiontype_)*/0} {}
struct CleanerChatReplyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CleanerChatReplyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CleanerChatReplyMessageDefaultTypeInternal() {}
  union {
    CleanerChatReplyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CleanerChatReplyMessageDefaultTypeInternal _CleanerChatReplyMessage_default_instance_;
PROTOBUF_CONSTEXPR ChatCleanerMessage::ChatCleanerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cleanerinitmessage_)*/nullptr
  , /*decltype(_impl_.cleanerinitackmessage_)*/nullptr
  , /*decltype(_impl_.cleanerchatrequestmessage_)*/nullptr
  , /*decltype(_impl_.cleanerchatreplymessage_)*/nullptr
  , /*decltype(_impl_.messagetype_)*/1} {}
struct ChatCleanerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatCleanerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatCleanerMessageDefaultTypeInternal() {}
  union {
    ChatCleanerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatCleanerMessageDefaultTypeInternal _ChatCleanerMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_chatcleaner_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chatcleaner_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chatcleaner_2eproto = nullptr;

const uint32_t TableStruct_chatcleaner_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CleanerInitMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CleanerInitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CleanerInitMessage, _impl_.requestedversion_),
  PROTOBUF_FIELD_OFFSET(::CleanerInitMessage, _impl_.clientsecret_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CleanerInitAckMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CleanerInitAckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CleanerInitAckMessage, _impl_.serverversion_),
  PROTOBUF_FIELD_OFFSET(::CleanerInitAckMessage, _impl_.serversecret_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CleanerChatRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CleanerChatRequestMessage, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatRequestMessage, _impl_.cleanerchattype_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatRequestMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatRequestMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatRequestMessage, _impl_.playername_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatRequestMessage, _impl_.chatmessage_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CleanerChatReplyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CleanerChatReplyMessage, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatReplyMessage, _impl_.cleanerchattype_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatReplyMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatReplyMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatReplyMessage, _impl_.cleaneractiontype_),
  PROTOBUF_FIELD_OFFSET(::CleanerChatReplyMessage, _impl_.cleanertext_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::ChatCleanerMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChatCleanerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatCleanerMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::ChatCleanerMessage, _impl_.cleanerinitmessage_),
  PROTOBUF_FIELD_OFFSET(::ChatCleanerMessage, _impl_.cleanerinitackmessage_),
  PROTOBUF_FIELD_OFFSET(::ChatCleanerMessage, _impl_.cleanerchatrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::ChatCleanerMessage, _impl_.cleanerchatreplymessage_),
  4,
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CleanerInitMessage)},
  { 10, 18, -1, sizeof(::CleanerInitAckMessage)},
  { 20, 32, -1, sizeof(::CleanerChatRequestMessage)},
  { 38, 50, -1, sizeof(::CleanerChatReplyMessage)},
  { 56, 67, -1, sizeof(::ChatCleanerMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CleanerInitMessage_default_instance_._instance,
  &::_CleanerInitAckMessage_default_instance_._instance,
  &::_CleanerChatRequestMessage_default_instance_._instance,
  &::_CleanerChatReplyMessage_default_instance_._instance,
  &::_ChatCleanerMessage_default_instance_._instance,
};

const char descriptor_table_protodef_chatcleaner_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021chatcleaner.proto\"D\n\022CleanerInitMessag"
  "e\022\030\n\020requestedVersion\030\001 \002(\r\022\024\n\014clientSec"
  "ret\030\002 \002(\t\"D\n\025CleanerInitAckMessage\022\025\n\rse"
  "rverVersion\030\001 \002(\r\022\024\n\014serverSecret\030\002 \002(\t\""
  "\247\001\n\031CleanerChatRequestMessage\022\021\n\trequest"
  "Id\030\001 \002(\r\022)\n\017cleanerChatType\030\002 \002(\0162\020.Clea"
  "nerChatType\022\021\n\006gameId\030\003 \001(\r:\0010\022\020\n\010player"
  "Id\030\004 \002(\r\022\022\n\nplayerName\030\005 \002(\t\022\023\n\013chatMess"
  "age\030\006 \002(\t\"\345\002\n\027CleanerChatReplyMessage\022\021\n"
  "\trequestId\030\001 \002(\r\022)\n\017cleanerChatType\030\002 \002("
  "\0162\020.CleanerChatType\022\021\n\006gameId\030\003 \001(\r:\0010\022\020"
  "\n\010playerId\030\004 \002(\r\022E\n\021cleanerActionType\030\005 "
  "\002(\0162*.CleanerChatReplyMessage.CleanerAct"
  "ionType\022\025\n\013cleanerText\030\006 \001(\t:\000\"\210\001\n\021Clean"
  "erActionType\022\025\n\021cleanerActionNone\020\000\022\030\n\024c"
  "leanerActionWarning\020\001\022\025\n\021cleanerActionKi"
  "ck\020\002\022\024\n\020cleanerActionBan\020\003\022\025\n\021cleanerAct"
  "ionMute\020\004\"\325\003\n\022ChatCleanerMessage\022\?\n\013mess"
  "ageType\030\001 \002(\0162*.ChatCleanerMessage.ChatC"
  "leanerMessageType\022/\n\022cleanerInitMessage\030"
  "\002 \001(\0132\023.CleanerInitMessage\0225\n\025cleanerIni"
  "tAckMessage\030\003 \001(\0132\026.CleanerInitAckMessag"
  "e\022=\n\031cleanerChatRequestMessage\030\004 \001(\0132\032.C"
  "leanerChatRequestMessage\0229\n\027cleanerChatR"
  "eplyMessage\030\005 \001(\0132\030.CleanerChatReplyMess"
  "age\"\233\001\n\026ChatCleanerMessageType\022\033\n\027Type_C"
  "leanerInitMessage\020\001\022\036\n\032Type_CleanerInitA"
  "ckMessage\020\002\022\"\n\036Type_CleanerChatRequestMe"
  "ssage\020\003\022 \n\034Type_CleanerChatReplyMessage\020"
  "\004*D\n\017CleanerChatType\022\030\n\024cleanerChatTypeL"
  "obby\020\000\022\027\n\023cleanerChatTypeGame\020\001B#\n\027de.ch"
  "atcleaner.protocolB\010ProtoBuf"
  ;
static ::_pbi::once_flag descriptor_table_chatcleaner_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chatcleaner_2eproto = {
    false, false, 1268, descriptor_table_protodef_chatcleaner_2eproto,
    "chatcleaner.proto",
    &descriptor_table_chatcleaner_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_chatcleaner_2eproto::offsets,
    file_level_metadata_chatcleaner_2eproto, file_level_enum_descriptors_chatcleaner_2eproto,
    file_level_service_descriptors_chatcleaner_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chatcleaner_2eproto_getter() {
  return &descriptor_table_chatcleaner_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chatcleaner_2eproto(&descriptor_table_chatcleaner_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CleanerChatReplyMessage_CleanerActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chatcleaner_2eproto);
  return file_level_enum_descriptors_chatcleaner_2eproto[0];
}
bool CleanerChatReplyMessage_CleanerActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionNone;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionWarning;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionKick;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionBan;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionMute;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::CleanerActionType_MIN;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::CleanerActionType_MAX;
constexpr int CleanerChatReplyMessage::CleanerActionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatCleanerMessage_ChatCleanerMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chatcleaner_2eproto);
  return file_level_enum_descriptors_chatcleaner_2eproto[1];
}
bool ChatCleanerMessage_ChatCleanerMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerInitMessage;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerInitAckMessage;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerChatRequestMessage;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerChatReplyMessage;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::ChatCleanerMessageType_MIN;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::ChatCleanerMessageType_MAX;
constexpr int ChatCleanerMessage::ChatCleanerMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CleanerChatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chatcleaner_2eproto);
  return file_level_enum_descriptors_chatcleaner_2eproto[2];
}
bool CleanerChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CleanerInitMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanerInitMessage>()._impl_._has_bits_);
  static void set_has_requestedversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientsecret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CleanerInitMessage::CleanerInitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CleanerInitMessage)
}
CleanerInitMessage::CleanerInitMessage(const CleanerInitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CleanerInitMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clientsecret_){}
    , decltype(_impl_.requestedversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientsecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientsecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_clientsecret()) {
    _this->_impl_.clientsecret_.Set(from._internal_clientsecret(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.requestedversion_ = from._impl_.requestedversion_;
  // @@protoc_insertion_point(copy_constructor:CleanerInitMessage)
}

inline void CleanerInitMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clientsecret_){}
    , decltype(_impl_.requestedversion_){0u}
  };
  _impl_.clientsecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientsecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CleanerInitMessage::~CleanerInitMessage() {
  // @@protoc_insertion_point(destructor:CleanerInitMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CleanerInitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientsecret_.Destroy();
}

void CleanerInitMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CleanerInitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerInitMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.clientsecret_.ClearNonDefaultToEmpty();
  }
  _impl_.requestedversion_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CleanerInitMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestedVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestedversion(&has_bits);
          _impl_.requestedversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientSecret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientsecret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CleanerInitMessage.clientSecret");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanerInitMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CleanerInitMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestedVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestedversion(), target);
  }

  // required string clientSecret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clientsecret().data(), static_cast<int>(this->_internal_clientsecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CleanerInitMessage.clientSecret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientsecret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CleanerInitMessage)
  return target;
}

size_t CleanerInitMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerInitMessage)
  size_t total_size = 0;

  if (_internal_has_clientsecret()) {
    // required string clientSecret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientsecret());
  }

  if (_internal_has_requestedversion()) {
    // required uint32 requestedVersion = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestedversion());
  }

  return total_size;
}
size_t CleanerInitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerInitMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string clientSecret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientsecret());

    // required uint32 requestedVersion = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestedversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CleanerInitMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CleanerInitMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CleanerInitMessage::GetClassData() const { return &_class_data_; }


void CleanerInitMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CleanerInitMessage*>(&to_msg);
  auto& from = static_cast<const CleanerInitMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CleanerInitMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_clientsecret(from._internal_clientsecret());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.requestedversion_ = from._impl_.requestedversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CleanerInitMessage::CopyFrom(const CleanerInitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerInitMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CleanerInitMessage::InternalSwap(CleanerInitMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientsecret_, lhs_arena,
      &other->_impl_.clientsecret_, rhs_arena
  );
  swap(_impl_.requestedversion_, other->_impl_.requestedversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanerInitMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcleaner_2eproto_getter, &descriptor_table_chatcleaner_2eproto_once,
      file_level_metadata_chatcleaner_2eproto[0]);
}

// ===================================================================

class CleanerInitAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanerInitAckMessage>()._impl_._has_bits_);
  static void set_has_serverversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serversecret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CleanerInitAckMessage::CleanerInitAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CleanerInitAckMessage)
}
CleanerInitAckMessage::CleanerInitAckMessage(const CleanerInitAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CleanerInitAckMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serversecret_){}
    , decltype(_impl_.serverversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serversecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serversecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serversecret()) {
    _this->_impl_.serversecret_.Set(from._internal_serversecret(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.serverversion_ = from._impl_.serverversion_;
  // @@protoc_insertion_point(copy_constructor:CleanerInitAckMessage)
}

inline void CleanerInitAckMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serversecret_){}
    , decltype(_impl_.serverversion_){0u}
  };
  _impl_.serversecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serversecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CleanerInitAckMessage::~CleanerInitAckMessage() {
  // @@protoc_insertion_point(destructor:CleanerInitAckMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CleanerInitAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serversecret_.Destroy();
}

void CleanerInitAckMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CleanerInitAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerInitAckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.serversecret_.ClearNonDefaultToEmpty();
  }
  _impl_.serverversion_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CleanerInitAckMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 serverVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_serverversion(&has_bits);
          _impl_.serverversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string serverSecret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serversecret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CleanerInitAckMessage.serverSecret");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanerInitAckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CleanerInitAckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 serverVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverversion(), target);
  }

  // required string serverSecret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serversecret().data(), static_cast<int>(this->_internal_serversecret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CleanerInitAckMessage.serverSecret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serversecret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CleanerInitAckMessage)
  return target;
}

size_t CleanerInitAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerInitAckMessage)
  size_t total_size = 0;

  if (_internal_has_serversecret()) {
    // required string serverSecret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serversecret());
  }

  if (_internal_has_serverversion()) {
    // required uint32 serverVersion = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverversion());
  }

  return total_size;
}
size_t CleanerInitAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerInitAckMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string serverSecret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serversecret());

    // required uint32 serverVersion = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CleanerInitAckMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CleanerInitAckMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CleanerInitAckMessage::GetClassData() const { return &_class_data_; }


void CleanerInitAckMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CleanerInitAckMessage*>(&to_msg);
  auto& from = static_cast<const CleanerInitAckMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CleanerInitAckMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_serversecret(from._internal_serversecret());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.serverversion_ = from._impl_.serverversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CleanerInitAckMessage::CopyFrom(const CleanerInitAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerInitAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerInitAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CleanerInitAckMessage::InternalSwap(CleanerInitAckMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serversecret_, lhs_arena,
      &other->_impl_.serversecret_, rhs_arena
  );
  swap(_impl_.serverversion_, other->_impl_.serverversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanerInitAckMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcleaner_2eproto_getter, &descriptor_table_chatcleaner_2eproto_once,
      file_level_metadata_chatcleaner_2eproto[1]);
}

// ===================================================================

class CleanerChatRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanerChatRequestMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cleanerchattype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chatmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000002f) ^ 0x0000002f) != 0;
  }
};

CleanerChatRequestMessage::CleanerChatRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CleanerChatRequestMessage)
}
CleanerChatRequestMessage::CleanerChatRequestMessage(const CleanerChatRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CleanerChatRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playername_){}
    , decltype(_impl_.chatmessage_){}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.cleanerchattype_){}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_playername()) {
    _this->_impl_.playername_.Set(from._internal_playername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chatmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chatmessage()) {
    _this->_impl_.chatmessage_.Set(from._internal_chatmessage(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:CleanerChatRequestMessage)
}

inline void CleanerChatRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playername_){}
    , decltype(_impl_.chatmessage_){}
    , decltype(_impl_.requestid_){0u}
    , decltype(_impl_.cleanerchattype_){0}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.playerid_){0u}
  };
  _impl_.playername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chatmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CleanerChatRequestMessage::~CleanerChatRequestMessage() {
  // @@protoc_insertion_point(destructor:CleanerChatRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CleanerChatRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playername_.Destroy();
  _impl_.chatmessage_.Destroy();
}

void CleanerChatRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CleanerChatRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerChatRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.playername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.chatmessage_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playerid_) -
        reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.playerid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CleanerChatRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .CleanerChatType cleanerChatType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CleanerChatType_IsValid(val))) {
            _internal_set_cleanerchattype(static_cast<::CleanerChatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gameId = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string playerName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_playername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CleanerChatRequestMessage.playerName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string chatMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_chatmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CleanerChatRequestMessage.chatMessage");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanerChatRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CleanerChatRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .CleanerChatType cleanerChatType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cleanerchattype(), target);
  }

  // optional uint32 gameId = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_playerid(), target);
  }

  // required string playerName = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CleanerChatRequestMessage.playerName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_playername(), target);
  }

  // required string chatMessage = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chatmessage().data(), static_cast<int>(this->_internal_chatmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CleanerChatRequestMessage.chatMessage");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_chatmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CleanerChatRequestMessage)
  return target;
}

size_t CleanerChatRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerChatRequestMessage)
  size_t total_size = 0;

  if (_internal_has_playername()) {
    // required string playerName = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  if (_internal_has_chatmessage()) {
    // required string chatMessage = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatmessage());
  }

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_cleanerchattype()) {
    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cleanerchattype());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return total_size;
}
size_t CleanerChatRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerChatRequestMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required string playerName = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());

    // required string chatMessage = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatmessage());

    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cleanerchattype());

    // required uint32 playerId = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 gameId = 3 [default = 0];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CleanerChatRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CleanerChatRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CleanerChatRequestMessage::GetClassData() const { return &_class_data_; }


void CleanerChatRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CleanerChatRequestMessage*>(&to_msg);
  auto& from = static_cast<const CleanerChatRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CleanerChatRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_playername(from._internal_playername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_chatmessage(from._internal_chatmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cleanerchattype_ = from._impl_.cleanerchattype_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CleanerChatRequestMessage::CopyFrom(const CleanerChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerChatRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerChatRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CleanerChatRequestMessage::InternalSwap(CleanerChatRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playername_, lhs_arena,
      &other->_impl_.playername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chatmessage_, lhs_arena,
      &other->_impl_.chatmessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CleanerChatRequestMessage, _impl_.playerid_)
      + sizeof(CleanerChatRequestMessage::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(CleanerChatRequestMessage, _impl_.requestid_)>(
          reinterpret_cast<char*>(&_impl_.requestid_),
          reinterpret_cast<char*>(&other->_impl_.requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanerChatRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcleaner_2eproto_getter, &descriptor_table_chatcleaner_2eproto_once,
      file_level_metadata_chatcleaner_2eproto[2]);
}

// ===================================================================

class CleanerChatReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanerChatReplyMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cleanerchattype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cleaneractiontype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cleanertext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000036) ^ 0x00000036) != 0;
  }
};

CleanerChatReplyMessage::CleanerChatReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CleanerChatReplyMessage)
}
CleanerChatReplyMessage::CleanerChatReplyMessage(const CleanerChatReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CleanerChatReplyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cleanertext_){}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.cleanerchattype_){}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.cleaneractiontype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cleanertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cleanertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cleanertext()) {
    _this->_impl_.cleanertext_.Set(from._internal_cleanertext(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cleaneractiontype_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.cleaneractiontype_));
  // @@protoc_insertion_point(copy_constructor:CleanerChatReplyMessage)
}

inline void CleanerChatReplyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cleanertext_){}
    , decltype(_impl_.requestid_){0u}
    , decltype(_impl_.cleanerchattype_){0}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.cleaneractiontype_){0}
  };
  _impl_.cleanertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cleanertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CleanerChatReplyMessage::~CleanerChatReplyMessage() {
  // @@protoc_insertion_point(destructor:CleanerChatReplyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CleanerChatReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cleanertext_.Destroy();
}

void CleanerChatReplyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CleanerChatReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerChatReplyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.cleanertext_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cleaneractiontype_) -
        reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.cleaneractiontype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CleanerChatReplyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .CleanerChatType cleanerChatType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CleanerChatType_IsValid(val))) {
            _internal_set_cleanerchattype(static_cast<::CleanerChatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gameId = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CleanerChatReplyMessage_CleanerActionType_IsValid(val))) {
            _internal_set_cleaneractiontype(static_cast<::CleanerChatReplyMessage_CleanerActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string cleanerText = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cleanertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CleanerChatReplyMessage.cleanerText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanerChatReplyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CleanerChatReplyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .CleanerChatType cleanerChatType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cleanerchattype(), target);
  }

  // optional uint32 gameId = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_playerid(), target);
  }

  // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_cleaneractiontype(), target);
  }

  // optional string cleanerText = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cleanertext().data(), static_cast<int>(this->_internal_cleanertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CleanerChatReplyMessage.cleanerText");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cleanertext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CleanerChatReplyMessage)
  return target;
}

size_t CleanerChatReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerChatReplyMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_cleanerchattype()) {
    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cleanerchattype());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_cleaneractiontype()) {
    // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cleaneractiontype());
  }

  return total_size;
}
size_t CleanerChatReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerChatReplyMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000036) ^ 0x00000036) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cleanerchattype());

    // required uint32 playerId = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cleaneractiontype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string cleanerText = 6 [default = ""];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cleanertext());
  }

  // optional uint32 gameId = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CleanerChatReplyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CleanerChatReplyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CleanerChatReplyMessage::GetClassData() const { return &_class_data_; }


void CleanerChatReplyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CleanerChatReplyMessage*>(&to_msg);
  auto& from = static_cast<const CleanerChatReplyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CleanerChatReplyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cleanertext(from._internal_cleanertext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cleanerchattype_ = from._impl_.cleanerchattype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cleaneractiontype_ = from._impl_.cleaneractiontype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CleanerChatReplyMessage::CopyFrom(const CleanerChatReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerChatReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerChatReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CleanerChatReplyMessage::InternalSwap(CleanerChatReplyMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cleanertext_, lhs_arena,
      &other->_impl_.cleanertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CleanerChatReplyMessage, _impl_.cleaneractiontype_)
      + sizeof(CleanerChatReplyMessage::_impl_.cleaneractiontype_)
      - PROTOBUF_FIELD_OFFSET(CleanerChatReplyMessage, _impl_.requestid_)>(
          reinterpret_cast<char*>(&_impl_.requestid_),
          reinterpret_cast<char*>(&other->_impl_.requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanerChatReplyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcleaner_2eproto_getter, &descriptor_table_chatcleaner_2eproto_once,
      file_level_metadata_chatcleaner_2eproto[3]);
}

// ===================================================================

class ChatCleanerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatCleanerMessage>()._impl_._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CleanerInitMessage& cleanerinitmessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerinitmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CleanerInitAckMessage& cleanerinitackmessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerinitackmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CleanerChatRequestMessage& cleanerchatrequestmessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerchatrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CleanerChatReplyMessage& cleanerchatreplymessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerchatreplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::CleanerInitMessage&
ChatCleanerMessage::_Internal::cleanerinitmessage(const ChatCleanerMessage* msg) {
  return *msg->_impl_.cleanerinitmessage_;
}
const ::CleanerInitAckMessage&
ChatCleanerMessage::_Internal::cleanerinitackmessage(const ChatCleanerMessage* msg) {
  return *msg->_impl_.cleanerinitackmessage_;
}
const ::CleanerChatRequestMessage&
ChatCleanerMessage::_Internal::cleanerchatrequestmessage(const ChatCleanerMessage* msg) {
  return *msg->_impl_.cleanerchatrequestmessage_;
}
const ::CleanerChatReplyMessage&
ChatCleanerMessage::_Internal::cleanerchatreplymessage(const ChatCleanerMessage* msg) {
  return *msg->_impl_.cleanerchatreplymessage_;
}
ChatCleanerMessage::ChatCleanerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatCleanerMessage)
}
ChatCleanerMessage::ChatCleanerMessage(const ChatCleanerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatCleanerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cleanerinitmessage_){nullptr}
    , decltype(_impl_.cleanerinitackmessage_){nullptr}
    , decltype(_impl_.cleanerchatrequestmessage_){nullptr}
    , decltype(_impl_.cleanerchatreplymessage_){nullptr}
    , decltype(_impl_.messagetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cleanerinitmessage()) {
    _this->_impl_.cleanerinitmessage_ = new ::CleanerInitMessage(*from._impl_.cleanerinitmessage_);
  }
  if (from._internal_has_cleanerinitackmessage()) {
    _this->_impl_.cleanerinitackmessage_ = new ::CleanerInitAckMessage(*from._impl_.cleanerinitackmessage_);
  }
  if (from._internal_has_cleanerchatrequestmessage()) {
    _this->_impl_.cleanerchatrequestmessage_ = new ::CleanerChatRequestMessage(*from._impl_.cleanerchatrequestmessage_);
  }
  if (from._internal_has_cleanerchatreplymessage()) {
    _this->_impl_.cleanerchatreplymessage_ = new ::CleanerChatReplyMessage(*from._impl_.cleanerchatreplymessage_);
  }
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:ChatCleanerMessage)
}

inline void ChatCleanerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cleanerinitmessage_){nullptr}
    , decltype(_impl_.cleanerinitackmessage_){nullptr}
    , decltype(_impl_.cleanerchatrequestmessage_){nullptr}
    , decltype(_impl_.cleanerchatreplymessage_){nullptr}
    , decltype(_impl_.messagetype_){1}
  };
}

ChatCleanerMessage::~ChatCleanerMessage() {
  // @@protoc_insertion_point(destructor:ChatCleanerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatCleanerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cleanerinitmessage_;
  if (this != internal_default_instance()) delete _impl_.cleanerinitackmessage_;
  if (this != internal_default_instance()) delete _impl_.cleanerchatrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.cleanerchatreplymessage_;
}

void ChatCleanerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatCleanerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatCleanerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cleanerinitmessage_ != nullptr);
      _impl_.cleanerinitmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cleanerinitackmessage_ != nullptr);
      _impl_.cleanerinitackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cleanerchatrequestmessage_ != nullptr);
      _impl_.cleanerchatrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.cleanerchatreplymessage_ != nullptr);
      _impl_.cleanerchatreplymessage_->Clear();
    }
    _impl_.messagetype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatCleanerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ChatCleanerMessage_ChatCleanerMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::ChatCleanerMessage_ChatCleanerMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CleanerInitMessage cleanerInitMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleanerinitmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleanerinitackmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleanerchatrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleanerchatreplymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatCleanerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatCleanerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .CleanerInitMessage cleanerInitMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cleanerinitmessage(this),
        _Internal::cleanerinitmessage(this).GetCachedSize(), target, stream);
  }

  // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cleanerinitackmessage(this),
        _Internal::cleanerinitackmessage(this).GetCachedSize(), target, stream);
  }

  // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cleanerchatrequestmessage(this),
        _Internal::cleanerchatrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cleanerchatreplymessage(this),
        _Internal::cleanerchatreplymessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatCleanerMessage)
  return target;
}

size_t ChatCleanerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatCleanerMessage)
  size_t total_size = 0;

  // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CleanerInitMessage cleanerInitMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cleanerinitmessage_);
    }

    // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cleanerinitackmessage_);
    }

    // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cleanerchatrequestmessage_);
    }

    // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cleanerchatreplymessage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatCleanerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatCleanerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatCleanerMessage::GetClassData() const { return &_class_data_; }


void ChatCleanerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatCleanerMessage*>(&to_msg);
  auto& from = static_cast<const ChatCleanerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatCleanerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cleanerinitmessage()->::CleanerInitMessage::MergeFrom(
          from._internal_cleanerinitmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cleanerinitackmessage()->::CleanerInitAckMessage::MergeFrom(
          from._internal_cleanerinitackmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cleanerchatrequestmessage()->::CleanerChatRequestMessage::MergeFrom(
          from._internal_cleanerchatrequestmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_cleanerchatreplymessage()->::CleanerChatReplyMessage::MergeFrom(
          from._internal_cleanerchatreplymessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatCleanerMessage::CopyFrom(const ChatCleanerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatCleanerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatCleanerMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cleanerinitmessage()) {
    if (!_impl_.cleanerinitmessage_->IsInitialized()) return false;
  }
  if (_internal_has_cleanerinitackmessage()) {
    if (!_impl_.cleanerinitackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_cleanerchatrequestmessage()) {
    if (!_impl_.cleanerchatrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_cleanerchatreplymessage()) {
    if (!_impl_.cleanerchatreplymessage_->IsInitialized()) return false;
  }
  return true;
}

void ChatCleanerMessage::InternalSwap(ChatCleanerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatCleanerMessage, _impl_.cleanerchatreplymessage_)
      + sizeof(ChatCleanerMessage::_impl_.cleanerchatreplymessage_)
      - PROTOBUF_FIELD_OFFSET(ChatCleanerMessage, _impl_.cleanerinitmessage_)>(
          reinterpret_cast<char*>(&_impl_.cleanerinitmessage_),
          reinterpret_cast<char*>(&other->_impl_.cleanerinitmessage_));
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatCleanerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatcleaner_2eproto_getter, &descriptor_table_chatcleaner_2eproto_once,
      file_level_metadata_chatcleaner_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CleanerInitMessage*
Arena::CreateMaybeMessage< ::CleanerInitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CleanerInitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CleanerInitAckMessage*
Arena::CreateMaybeMessage< ::CleanerInitAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CleanerInitAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CleanerChatRequestMessage*
Arena::CreateMaybeMessage< ::CleanerChatRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CleanerChatRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CleanerChatReplyMessage*
Arena::CreateMaybeMessage< ::CleanerChatReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CleanerChatReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatCleanerMessage*
Arena::CreateMaybeMessage< ::ChatCleanerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatCleanerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
