// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pokerth.proto

#include "pokerth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NetGameInfo::NetGameInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.manualblinds_)*/{}
  , /*decltype(_impl_._manualblinds_cached_byte_size_)*/{0}
  , /*decltype(_impl_.gamename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.maxnumplayers_)*/0u
  , /*decltype(_impl_.raiseeveryhands_)*/0u
  , /*decltype(_impl_.raiseeveryminutes_)*/0u
  , /*decltype(_impl_.endraisesmallblindvalue_)*/0u
  , /*decltype(_impl_.proposedguispeed_)*/0u
  , /*decltype(_impl_.delaybetweenhands_)*/0u
  , /*decltype(_impl_.playeractiontimeout_)*/0u
  , /*decltype(_impl_.firstsmallblind_)*/0u
  , /*decltype(_impl_.startmoney_)*/0u
  , /*decltype(_impl_.netgametype_)*/1
  , /*decltype(_impl_.raiseintervalmode_)*/1
  , /*decltype(_impl_.endraisemode_)*/1
  , /*decltype(_impl_.allowspectators_)*/true} {}
struct NetGameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetGameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetGameInfoDefaultTypeInternal() {}
  union {
    NetGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetGameInfoDefaultTypeInternal _NetGameInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerResult::PlayerResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.besthandposition_)*/{}
  , /*decltype(_impl_._besthandposition_cached_byte_size_)*/{0}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.resultcard1_)*/0u
  , /*decltype(_impl_.resultcard2_)*/0u
  , /*decltype(_impl_.moneywon_)*/0u
  , /*decltype(_impl_.playermoney_)*/0u
  , /*decltype(_impl_.cardsvalue_)*/0u} {}
struct PlayerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerResultDefaultTypeInternal() {}
  union {
    PlayerResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerResultDefaultTypeInternal _PlayerResult_default_instance_;
PROTOBUF_CONSTEXPR AnnounceMessage_Version::AnnounceMessage_Version(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.majorversion_)*/0u
  , /*decltype(_impl_.minorversion_)*/0u} {}
struct AnnounceMessage_VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnounceMessage_VersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnounceMessage_VersionDefaultTypeInternal() {}
  union {
    AnnounceMessage_Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnounceMessage_VersionDefaultTypeInternal _AnnounceMessage_Version_default_instance_;
PROTOBUF_CONSTEXPR AnnounceMessage::AnnounceMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.protocolversion_)*/nullptr
  , /*decltype(_impl_.latestgameversion_)*/nullptr
  , /*decltype(_impl_.latestbetarevision_)*/0u
  , /*decltype(_impl_.servertype_)*/0
  , /*decltype(_impl_.numplayersonserver_)*/0u} {}
struct AnnounceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnounceMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnounceMessageDefaultTypeInternal() {}
  union {
    AnnounceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnounceMessageDefaultTypeInternal _AnnounceMessage_default_instance_;
PROTOBUF_CONSTEXPR AuthClientRequestMessage::AuthClientRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authserverpassword_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuserdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mylastsessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatarhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestedversion_)*/nullptr
  , /*decltype(_impl_.buildid_)*/0u
  , /*decltype(_impl_.login_)*/0} {}
struct AuthClientRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthClientRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthClientRequestMessageDefaultTypeInternal() {}
  union {
    AuthClientRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthClientRequestMessageDefaultTypeInternal _AuthClientRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR AuthServerChallengeMessage::AuthServerChallengeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.serverchallenge_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AuthServerChallengeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthServerChallengeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthServerChallengeMessageDefaultTypeInternal() {}
  union {
    AuthServerChallengeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthServerChallengeMessageDefaultTypeInternal _AuthServerChallengeMessage_default_instance_;
PROTOBUF_CONSTEXPR AuthClientResponseMessage::AuthClientResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clientresponse_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AuthClientResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthClientResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthClientResponseMessageDefaultTypeInternal() {}
  union {
    AuthClientResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthClientResponseMessageDefaultTypeInternal _AuthClientResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR AuthServerVerificationMessage::AuthServerVerificationMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.serververification_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AuthServerVerificationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthServerVerificationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthServerVerificationMessageDefaultTypeInternal() {}
  union {
    AuthServerVerificationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthServerVerificationMessageDefaultTypeInternal _AuthServerVerificationMessage_default_instance_;
PROTOBUF_CONSTEXPR InitDoneMessage::InitDoneMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.yoursessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.youravatarhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.yourplayerid_)*/0u
  , /*decltype(_impl_.rejoingameid_)*/0u} {}
struct InitDoneMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitDoneMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitDoneMessageDefaultTypeInternal() {}
  union {
    InitDoneMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitDoneMessageDefaultTypeInternal _InitDoneMessage_default_instance_;
PROTOBUF_CONSTEXPR AvatarRequestMessage::AvatarRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.avatarhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestid_)*/0u} {}
struct AvatarRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvatarRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvatarRequestMessageDefaultTypeInternal() {}
  union {
    AvatarRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvatarRequestMessageDefaultTypeInternal _AvatarRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR AvatarHeaderMessage::AvatarHeaderMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requestid_)*/0u
  , /*decltype(_impl_.avatarsize_)*/0u
  , /*decltype(_impl_.avatartype_)*/1} {}
struct AvatarHeaderMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvatarHeaderMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvatarHeaderMessageDefaultTypeInternal() {}
  union {
    AvatarHeaderMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvatarHeaderMessageDefaultTypeInternal _AvatarHeaderMessage_default_instance_;
PROTOBUF_CONSTEXPR AvatarDataMessage::AvatarDataMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.avatarblock_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestid_)*/0u} {}
struct AvatarDataMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvatarDataMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvatarDataMessageDefaultTypeInternal() {}
  union {
    AvatarDataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvatarDataMessageDefaultTypeInternal _AvatarDataMessage_default_instance_;
PROTOBUF_CONSTEXPR AvatarEndMessage::AvatarEndMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requestid_)*/0u} {}
struct AvatarEndMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvatarEndMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvatarEndMessageDefaultTypeInternal() {}
  union {
    AvatarEndMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvatarEndMessageDefaultTypeInternal _AvatarEndMessage_default_instance_;
PROTOBUF_CONSTEXPR UnknownAvatarMessage::UnknownAvatarMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requestid_)*/0u} {}
struct UnknownAvatarMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownAvatarMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownAvatarMessageDefaultTypeInternal() {}
  union {
    UnknownAvatarMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownAvatarMessageDefaultTypeInternal _UnknownAvatarMessage_default_instance_;
PROTOBUF_CONSTEXPR PlayerListMessage::PlayerListMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.playerlistnotification_)*/0} {}
struct PlayerListMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerListMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerListMessageDefaultTypeInternal() {}
  union {
    PlayerListMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerListMessageDefaultTypeInternal _PlayerListMessage_default_instance_;
PROTOBUF_CONSTEXPR GameListNewMessage::GameListNewMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerids_)*/{}
  , /*decltype(_impl_._playerids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.spectatorids_)*/{}
  , /*decltype(_impl_._spectatorids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.gameinfo_)*/nullptr
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.isprivate_)*/false
  , /*decltype(_impl_.adminplayerid_)*/0u
  , /*decltype(_impl_.gamemode_)*/1} {}
struct GameListNewMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameListNewMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameListNewMessageDefaultTypeInternal() {}
  union {
    GameListNewMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameListNewMessageDefaultTypeInternal _GameListNewMessage_default_instance_;
PROTOBUF_CONSTEXPR GameListUpdateMessage::GameListUpdateMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.gamemode_)*/1} {}
struct GameListUpdateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameListUpdateMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameListUpdateMessageDefaultTypeInternal() {}
  union {
    GameListUpdateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameListUpdateMessageDefaultTypeInternal _GameListUpdateMessage_default_instance_;
PROTOBUF_CONSTEXPR GameListPlayerJoinedMessage::GameListPlayerJoinedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u} {}
struct GameListPlayerJoinedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameListPlayerJoinedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameListPlayerJoinedMessageDefaultTypeInternal() {}
  union {
    GameListPlayerJoinedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameListPlayerJoinedMessageDefaultTypeInternal _GameListPlayerJoinedMessage_default_instance_;
PROTOBUF_CONSTEXPR GameListPlayerLeftMessage::GameListPlayerLeftMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u} {}
struct GameListPlayerLeftMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameListPlayerLeftMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameListPlayerLeftMessageDefaultTypeInternal() {}
  union {
    GameListPlayerLeftMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameListPlayerLeftMessageDefaultTypeInternal _GameListPlayerLeftMessage_default_instance_;
PROTOBUF_CONSTEXPR GameListSpectatorJoinedMessage::GameListSpectatorJoinedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u} {}
struct GameListSpectatorJoinedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameListSpectatorJoinedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameListSpectatorJoinedMessageDefaultTypeInternal() {}
  union {
    GameListSpectatorJoinedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameListSpectatorJoinedMessageDefaultTypeInternal _GameListSpectatorJoinedMessage_default_instance_;
PROTOBUF_CONSTEXPR GameListSpectatorLeftMessage::GameListSpectatorLeftMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u} {}
struct GameListSpectatorLeftMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameListSpectatorLeftMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameListSpectatorLeftMessageDefaultTypeInternal() {}
  union {
    GameListSpectatorLeftMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameListSpectatorLeftMessageDefaultTypeInternal _GameListSpectatorLeftMessage_default_instance_;
PROTOBUF_CONSTEXPR GameListAdminChangedMessage::GameListAdminChangedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.newadminplayerid_)*/0u} {}
struct GameListAdminChangedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameListAdminChangedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameListAdminChangedMessageDefaultTypeInternal() {}
  union {
    GameListAdminChangedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameListAdminChangedMessageDefaultTypeInternal _GameListAdminChangedMessage_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfoRequestMessage::PlayerInfoRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/{}
  , /*decltype(_impl_._playerid_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoRequestMessageDefaultTypeInternal() {}
  union {
    PlayerInfoRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoRequestMessageDefaultTypeInternal _PlayerInfoRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.avatarhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatartype_)*/1} {}
struct PlayerInfoReplyMessage_PlayerInfoData_AvatarDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoReplyMessage_PlayerInfoData_AvatarDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoReplyMessage_PlayerInfoData_AvatarDataDefaultTypeInternal() {}
  union {
    PlayerInfoReplyMessage_PlayerInfoData_AvatarData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoReplyMessage_PlayerInfoData_AvatarDataDefaultTypeInternal _PlayerInfoReplyMessage_PlayerInfoData_AvatarData_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.countrycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatardata_)*/nullptr
  , /*decltype(_impl_.ishuman_)*/false
  , /*decltype(_impl_.playerrights_)*/1} {}
struct PlayerInfoReplyMessage_PlayerInfoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoReplyMessage_PlayerInfoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoReplyMessage_PlayerInfoDataDefaultTypeInternal() {}
  union {
    PlayerInfoReplyMessage_PlayerInfoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoReplyMessage_PlayerInfoDataDefaultTypeInternal _PlayerInfoReplyMessage_PlayerInfoData_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfoReplyMessage::PlayerInfoReplyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerinfodata_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0u} {}
struct PlayerInfoReplyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoReplyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoReplyMessageDefaultTypeInternal() {}
  union {
    PlayerInfoReplyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoReplyMessageDefaultTypeInternal _PlayerInfoReplyMessage_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionRequestMessage::SubscriptionRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requestid_)*/0u
  , /*decltype(_impl_.subscriptionaction_)*/1} {}
struct SubscriptionRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionRequestMessageDefaultTypeInternal() {}
  union {
    SubscriptionRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionRequestMessageDefaultTypeInternal _SubscriptionRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionReplyMessage::SubscriptionReplyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requestid_)*/0u
  , /*decltype(_impl_.ack_)*/false} {}
struct SubscriptionReplyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionReplyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionReplyMessageDefaultTypeInternal() {}
  union {
    SubscriptionReplyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionReplyMessageDefaultTypeInternal _SubscriptionReplyMessage_default_instance_;
PROTOBUF_CONSTEXPR CreateGameMessage::CreateGameMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gameinfo_)*/nullptr
  , /*decltype(_impl_.requestid_)*/0u
  , /*decltype(_impl_.autoleave_)*/false} {}
struct CreateGameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateGameMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateGameMessageDefaultTypeInternal() {}
  union {
    CreateGameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateGameMessageDefaultTypeInternal _CreateGameMessage_default_instance_;
PROTOBUF_CONSTEXPR CreateGameFailedMessage::CreateGameFailedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requestid_)*/0u
  , /*decltype(_impl_.creategamefailurereason_)*/1} {}
struct CreateGameFailedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateGameFailedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateGameFailedMessageDefaultTypeInternal() {}
  union {
    CreateGameFailedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateGameFailedMessageDefaultTypeInternal _CreateGameFailedMessage_default_instance_;
PROTOBUF_CONSTEXPR JoinGameMessage::JoinGameMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.autoleave_)*/false
  , /*decltype(_impl_.spectateonly_)*/false} {}
struct JoinGameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinGameMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinGameMessageDefaultTypeInternal() {}
  union {
    JoinGameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinGameMessageDefaultTypeInternal _JoinGameMessage_default_instance_;
PROTOBUF_CONSTEXPR RejoinGameMessage::RejoinGameMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.autoleave_)*/false} {}
struct RejoinGameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RejoinGameMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RejoinGameMessageDefaultTypeInternal() {}
  union {
    RejoinGameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RejoinGameMessageDefaultTypeInternal _RejoinGameMessage_default_instance_;
PROTOBUF_CONSTEXPR JoinGameAckMessage::JoinGameAckMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameinfo_)*/nullptr
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.areyougameadmin_)*/false
  , /*decltype(_impl_.spectateonly_)*/false} {}
struct JoinGameAckMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinGameAckMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinGameAckMessageDefaultTypeInternal() {}
  union {
    JoinGameAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinGameAckMessageDefaultTypeInternal _JoinGameAckMessage_default_instance_;
PROTOBUF_CONSTEXPR JoinGameFailedMessage::JoinGameFailedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.joingamefailurereason_)*/1} {}
struct JoinGameFailedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinGameFailedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinGameFailedMessageDefaultTypeInternal() {}
  union {
    JoinGameFailedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinGameFailedMessageDefaultTypeInternal _JoinGameFailedMessage_default_instance_;
PROTOBUF_CONSTEXPR GamePlayerJoinedMessage::GamePlayerJoinedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.isgameadmin_)*/false} {}
struct GamePlayerJoinedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GamePlayerJoinedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GamePlayerJoinedMessageDefaultTypeInternal() {}
  union {
    GamePlayerJoinedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GamePlayerJoinedMessageDefaultTypeInternal _GamePlayerJoinedMessage_default_instance_;
PROTOBUF_CONSTEXPR GamePlayerLeftMessage::GamePlayerLeftMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.gameplayerleftreason_)*/0} {}
struct GamePlayerLeftMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GamePlayerLeftMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GamePlayerLeftMessageDefaultTypeInternal() {}
  union {
    GamePlayerLeftMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GamePlayerLeftMessageDefaultTypeInternal _GamePlayerLeftMessage_default_instance_;
PROTOBUF_CONSTEXPR GameSpectatorJoinedMessage::GameSpectatorJoinedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u} {}
struct GameSpectatorJoinedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameSpectatorJoinedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameSpectatorJoinedMessageDefaultTypeInternal() {}
  union {
    GameSpectatorJoinedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameSpectatorJoinedMessageDefaultTypeInternal _GameSpectatorJoinedMessage_default_instance_;
PROTOBUF_CONSTEXPR GameSpectatorLeftMessage::GameSpectatorLeftMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.gamespectatorleftreason_)*/0} {}
struct GameSpectatorLeftMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameSpectatorLeftMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameSpectatorLeftMessageDefaultTypeInternal() {}
  union {
    GameSpectatorLeftMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameSpectatorLeftMessageDefaultTypeInternal _GameSpectatorLeftMessage_default_instance_;
PROTOBUF_CONSTEXPR GameAdminChangedMessage::GameAdminChangedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.newadminplayerid_)*/0u} {}
struct GameAdminChangedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameAdminChangedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameAdminChangedMessageDefaultTypeInternal() {}
  union {
    GameAdminChangedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameAdminChangedMessageDefaultTypeInternal _GameAdminChangedMessage_default_instance_;
PROTOBUF_CONSTEXPR RemovedFromGameMessage::RemovedFromGameMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.removedfromgamereason_)*/0} {}
struct RemovedFromGameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemovedFromGameMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemovedFromGameMessageDefaultTypeInternal() {}
  union {
    RemovedFromGameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemovedFromGameMessageDefaultTypeInternal _RemovedFromGameMessage_default_instance_;
PROTOBUF_CONSTEXPR KickPlayerRequestMessage::KickPlayerRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u} {}
struct KickPlayerRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KickPlayerRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KickPlayerRequestMessageDefaultTypeInternal() {}
  union {
    KickPlayerRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KickPlayerRequestMessageDefaultTypeInternal _KickPlayerRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR LeaveGameRequestMessage::LeaveGameRequestMessage(
    ::_pbi::ConstantInitialized) {}
struct LeaveGameRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveGameRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveGameRequestMessageDefaultTypeInternal() {}
  union {
    LeaveGameRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveGameRequestMessageDefaultTypeInternal _LeaveGameRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR InvitePlayerToGameMessage::InvitePlayerToGameMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u} {}
struct InvitePlayerToGameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvitePlayerToGameMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvitePlayerToGameMessageDefaultTypeInternal() {}
  union {
    InvitePlayerToGameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvitePlayerToGameMessageDefaultTypeInternal _InvitePlayerToGameMessage_default_instance_;
PROTOBUF_CONSTEXPR InviteNotifyMessage::InviteNotifyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.playeridwho_)*/0u
  , /*decltype(_impl_.playeridbywhom_)*/0u} {}
struct InviteNotifyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InviteNotifyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InviteNotifyMessageDefaultTypeInternal() {}
  union {
    InviteNotifyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InviteNotifyMessageDefaultTypeInternal _InviteNotifyMessage_default_instance_;
PROTOBUF_CONSTEXPR RejectGameInvitationMessage::RejectGameInvitationMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.myrejectreason_)*/0} {}
struct RejectGameInvitationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RejectGameInvitationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RejectGameInvitationMessageDefaultTypeInternal() {}
  union {
    RejectGameInvitationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RejectGameInvitationMessageDefaultTypeInternal _RejectGameInvitationMessage_default_instance_;
PROTOBUF_CONSTEXPR RejectInvNotifyMessage::RejectInvNotifyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.playerrejectreason_)*/0} {}
struct RejectInvNotifyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RejectInvNotifyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RejectInvNotifyMessageDefaultTypeInternal() {}
  union {
    RejectInvNotifyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RejectInvNotifyMessageDefaultTypeInternal _RejectInvNotifyMessage_default_instance_;
PROTOBUF_CONSTEXPR StartEventMessage::StartEventMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.starteventtype_)*/0
  , /*decltype(_impl_.fillwithcomputerplayers_)*/false} {}
struct StartEventMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartEventMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartEventMessageDefaultTypeInternal() {}
  union {
    StartEventMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartEventMessageDefaultTypeInternal _StartEventMessage_default_instance_;
PROTOBUF_CONSTEXPR StartEventAckMessage::StartEventAckMessage(
    ::_pbi::ConstantInitialized) {}
struct StartEventAckMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartEventAckMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartEventAckMessageDefaultTypeInternal() {}
  union {
    StartEventAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartEventAckMessageDefaultTypeInternal _StartEventAckMessage_default_instance_;
PROTOBUF_CONSTEXPR GameStartInitialMessage::GameStartInitialMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerseats_)*/{}
  , /*decltype(_impl_._playerseats_cached_byte_size_)*/{0}
  , /*decltype(_impl_.startdealerplayerid_)*/0u} {}
struct GameStartInitialMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStartInitialMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStartInitialMessageDefaultTypeInternal() {}
  union {
    GameStartInitialMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStartInitialMessageDefaultTypeInternal _GameStartInitialMessage_default_instance_;
PROTOBUF_CONSTEXPR GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.playermoney_)*/0u} {}
struct GameStartRejoinMessage_RejoinPlayerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStartRejoinMessage_RejoinPlayerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStartRejoinMessage_RejoinPlayerDataDefaultTypeInternal() {}
  union {
    GameStartRejoinMessage_RejoinPlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStartRejoinMessage_RejoinPlayerDataDefaultTypeInternal _GameStartRejoinMessage_RejoinPlayerData_default_instance_;
PROTOBUF_CONSTEXPR GameStartRejoinMessage::GameStartRejoinMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rejoinplayerdata_)*/{}
  , /*decltype(_impl_.startdealerplayerid_)*/0u
  , /*decltype(_impl_.handnum_)*/0u} {}
struct GameStartRejoinMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStartRejoinMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStartRejoinMessageDefaultTypeInternal() {}
  union {
    GameStartRejoinMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStartRejoinMessageDefaultTypeInternal _GameStartRejoinMessage_default_instance_;
PROTOBUF_CONSTEXPR HandStartMessage_PlainCards::HandStartMessage_PlainCards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plaincard1_)*/0u
  , /*decltype(_impl_.plaincard2_)*/0u} {}
struct HandStartMessage_PlainCardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandStartMessage_PlainCardsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandStartMessage_PlainCardsDefaultTypeInternal() {}
  union {
    HandStartMessage_PlainCards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandStartMessage_PlainCardsDefaultTypeInternal _HandStartMessage_PlainCards_default_instance_;
PROTOBUF_CONSTEXPR HandStartMessage::HandStartMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.seatstates_)*/{}
  , /*decltype(_impl_.encryptedcards_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.plaincards_)*/nullptr
  , /*decltype(_impl_.smallblind_)*/0u
  , /*decltype(_impl_.dealerplayerid_)*/0u} {}
struct HandStartMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandStartMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandStartMessageDefaultTypeInternal() {}
  union {
    HandStartMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandStartMessageDefaultTypeInternal _HandStartMessage_default_instance_;
PROTOBUF_CONSTEXPR PlayersTurnMessage::PlayersTurnMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.gamestate_)*/0} {}
struct PlayersTurnMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayersTurnMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayersTurnMessageDefaultTypeInternal() {}
  union {
    PlayersTurnMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayersTurnMessageDefaultTypeInternal _PlayersTurnMessage_default_instance_;
PROTOBUF_CONSTEXPR MyActionRequestMessage::MyActionRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handnum_)*/0u
  , /*decltype(_impl_.gamestate_)*/0
  , /*decltype(_impl_.myaction_)*/0
  , /*decltype(_impl_.myrelativebet_)*/0u} {}
struct MyActionRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyActionRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyActionRequestMessageDefaultTypeInternal() {}
  union {
    MyActionRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyActionRequestMessageDefaultTypeInternal _MyActionRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR YourActionRejectedMessage::YourActionRejectedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gamestate_)*/0
  , /*decltype(_impl_.youraction_)*/0
  , /*decltype(_impl_.yourrelativebet_)*/0u
  , /*decltype(_impl_.rejectionreason_)*/1} {}
struct YourActionRejectedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR YourActionRejectedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~YourActionRejectedMessageDefaultTypeInternal() {}
  union {
    YourActionRejectedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 YourActionRejectedMessageDefaultTypeInternal _YourActionRejectedMessage_default_instance_;
PROTOBUF_CONSTEXPR PlayersActionDoneMessage::PlayersActionDoneMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.gamestate_)*/0
  , /*decltype(_impl_.playeraction_)*/0
  , /*decltype(_impl_.totalplayerbet_)*/0u
  , /*decltype(_impl_.playermoney_)*/0u
  , /*decltype(_impl_.highestset_)*/0u
  , /*decltype(_impl_.minimumraise_)*/0u} {}
struct PlayersActionDoneMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayersActionDoneMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayersActionDoneMessageDefaultTypeInternal() {}
  union {
    PlayersActionDoneMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayersActionDoneMessageDefaultTypeInternal _PlayersActionDoneMessage_default_instance_;
PROTOBUF_CONSTEXPR DealFlopCardsMessage::DealFlopCardsMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flopcard1_)*/0u
  , /*decltype(_impl_.flopcard2_)*/0u
  , /*decltype(_impl_.flopcard3_)*/0u} {}
struct DealFlopCardsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DealFlopCardsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DealFlopCardsMessageDefaultTypeInternal() {}
  union {
    DealFlopCardsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DealFlopCardsMessageDefaultTypeInternal _DealFlopCardsMessage_default_instance_;
PROTOBUF_CONSTEXPR DealTurnCardMessage::DealTurnCardMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.turncard_)*/0u} {}
struct DealTurnCardMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DealTurnCardMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DealTurnCardMessageDefaultTypeInternal() {}
  union {
    DealTurnCardMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DealTurnCardMessageDefaultTypeInternal _DealTurnCardMessage_default_instance_;
PROTOBUF_CONSTEXPR DealRiverCardMessage::DealRiverCardMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rivercard_)*/0u} {}
struct DealRiverCardMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DealRiverCardMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DealRiverCardMessageDefaultTypeInternal() {}
  union {
    DealRiverCardMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DealRiverCardMessageDefaultTypeInternal _DealRiverCardMessage_default_instance_;
PROTOBUF_CONSTEXPR AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.allincard1_)*/0u
  , /*decltype(_impl_.allincard2_)*/0u} {}
struct AllInShowCardsMessage_PlayerAllInDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllInShowCardsMessage_PlayerAllInDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllInShowCardsMessage_PlayerAllInDefaultTypeInternal() {}
  union {
    AllInShowCardsMessage_PlayerAllIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllInShowCardsMessage_PlayerAllInDefaultTypeInternal _AllInShowCardsMessage_PlayerAllIn_default_instance_;
PROTOBUF_CONSTEXPR AllInShowCardsMessage::AllInShowCardsMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playersallin_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllInShowCardsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllInShowCardsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllInShowCardsMessageDefaultTypeInternal() {}
  union {
    AllInShowCardsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllInShowCardsMessageDefaultTypeInternal _AllInShowCardsMessage_default_instance_;
PROTOBUF_CONSTEXPR EndOfHandShowCardsMessage::EndOfHandShowCardsMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerresults_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EndOfHandShowCardsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndOfHandShowCardsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndOfHandShowCardsMessageDefaultTypeInternal() {}
  union {
    EndOfHandShowCardsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndOfHandShowCardsMessageDefaultTypeInternal _EndOfHandShowCardsMessage_default_instance_;
PROTOBUF_CONSTEXPR EndOfHandHideCardsMessage::EndOfHandHideCardsMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.moneywon_)*/0u
  , /*decltype(_impl_.playermoney_)*/0u} {}
struct EndOfHandHideCardsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndOfHandHideCardsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndOfHandHideCardsMessageDefaultTypeInternal() {}
  union {
    EndOfHandHideCardsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndOfHandHideCardsMessageDefaultTypeInternal _EndOfHandHideCardsMessage_default_instance_;
PROTOBUF_CONSTEXPR ShowMyCardsRequestMessage::ShowMyCardsRequestMessage(
    ::_pbi::ConstantInitialized) {}
struct ShowMyCardsRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowMyCardsRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowMyCardsRequestMessageDefaultTypeInternal() {}
  union {
    ShowMyCardsRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowMyCardsRequestMessageDefaultTypeInternal _ShowMyCardsRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR AfterHandShowCardsMessage::AfterHandShowCardsMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerresult_)*/nullptr} {}
struct AfterHandShowCardsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AfterHandShowCardsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AfterHandShowCardsMessageDefaultTypeInternal() {}
  union {
    AfterHandShowCardsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AfterHandShowCardsMessageDefaultTypeInternal _AfterHandShowCardsMessage_default_instance_;
PROTOBUF_CONSTEXPR EndOfGameMessage::EndOfGameMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.winnerplayerid_)*/0u} {}
struct EndOfGameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndOfGameMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndOfGameMessageDefaultTypeInternal() {}
  union {
    EndOfGameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndOfGameMessageDefaultTypeInternal _EndOfGameMessage_default_instance_;
PROTOBUF_CONSTEXPR PlayerIdChangedMessage::PlayerIdChangedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.oldplayerid_)*/0u
  , /*decltype(_impl_.newplayerid_)*/0u} {}
struct PlayerIdChangedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerIdChangedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerIdChangedMessageDefaultTypeInternal() {}
  union {
    PlayerIdChangedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerIdChangedMessageDefaultTypeInternal _PlayerIdChangedMessage_default_instance_;
PROTOBUF_CONSTEXPR AskKickPlayerMessage::AskKickPlayerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u} {}
struct AskKickPlayerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AskKickPlayerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AskKickPlayerMessageDefaultTypeInternal() {}
  union {
    AskKickPlayerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AskKickPlayerMessageDefaultTypeInternal _AskKickPlayerMessage_default_instance_;
PROTOBUF_CONSTEXPR AskKickDeniedMessage::AskKickDeniedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.kickdeniedreason_)*/0} {}
struct AskKickDeniedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AskKickDeniedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AskKickDeniedMessageDefaultTypeInternal() {}
  union {
    AskKickDeniedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AskKickDeniedMessageDefaultTypeInternal _AskKickDeniedMessage_default_instance_;
PROTOBUF_CONSTEXPR StartKickPetitionMessage::StartKickPetitionMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.petitionid_)*/0u
  , /*decltype(_impl_.proposingplayerid_)*/0u
  , /*decltype(_impl_.kickplayerid_)*/0u
  , /*decltype(_impl_.kicktimeoutsec_)*/0u
  , /*decltype(_impl_.numvotesneededtokick_)*/0u} {}
struct StartKickPetitionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartKickPetitionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartKickPetitionMessageDefaultTypeInternal() {}
  union {
    StartKickPetitionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartKickPetitionMessageDefaultTypeInternal _StartKickPetitionMessage_default_instance_;
PROTOBUF_CONSTEXPR VoteKickRequestMessage::VoteKickRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.petitionid_)*/0u
  , /*decltype(_impl_.votekick_)*/false} {}
struct VoteKickRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteKickRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteKickRequestMessageDefaultTypeInternal() {}
  union {
    VoteKickRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteKickRequestMessageDefaultTypeInternal _VoteKickRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR VoteKickReplyMessage::VoteKickReplyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.petitionid_)*/0u
  , /*decltype(_impl_.votekickreplytype_)*/0} {}
struct VoteKickReplyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteKickReplyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteKickReplyMessageDefaultTypeInternal() {}
  union {
    VoteKickReplyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteKickReplyMessageDefaultTypeInternal _VoteKickReplyMessage_default_instance_;
PROTOBUF_CONSTEXPR KickPetitionUpdateMessage::KickPetitionUpdateMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.petitionid_)*/0u
  , /*decltype(_impl_.numvotesagainstkicking_)*/0u
  , /*decltype(_impl_.numvotesinfavourofkicking_)*/0u
  , /*decltype(_impl_.numvotesneededtokick_)*/0u} {}
struct KickPetitionUpdateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KickPetitionUpdateMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KickPetitionUpdateMessageDefaultTypeInternal() {}
  union {
    KickPetitionUpdateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KickPetitionUpdateMessageDefaultTypeInternal _KickPetitionUpdateMessage_default_instance_;
PROTOBUF_CONSTEXPR EndKickPetitionMessage::EndKickPetitionMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.petitionid_)*/0u
  , /*decltype(_impl_.numvotesagainstkicking_)*/0u
  , /*decltype(_impl_.numvotesinfavourofkicking_)*/0u
  , /*decltype(_impl_.resultplayerkicked_)*/0u
  , /*decltype(_impl_.petitionendreason_)*/0} {}
struct EndKickPetitionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndKickPetitionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndKickPetitionMessageDefaultTypeInternal() {}
  union {
    EndKickPetitionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndKickPetitionMessageDefaultTypeInternal _EndKickPetitionMessage_default_instance_;
PROTOBUF_CONSTEXPR StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.statisticsvalue_)*/0u
  , /*decltype(_impl_.statisticstype_)*/1} {}
struct StatisticsMessage_StatisticsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticsMessage_StatisticsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticsMessage_StatisticsDataDefaultTypeInternal() {}
  union {
    StatisticsMessage_StatisticsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticsMessage_StatisticsDataDefaultTypeInternal _StatisticsMessage_StatisticsData_default_instance_;
PROTOBUF_CONSTEXPR StatisticsMessage::StatisticsMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statisticsdata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatisticsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticsMessageDefaultTypeInternal() {}
  union {
    StatisticsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticsMessageDefaultTypeInternal _StatisticsMessage_default_instance_;
PROTOBUF_CONSTEXPR ChatRequestMessage::ChatRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chattext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetplayerid_)*/0u} {}
struct ChatRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatRequestMessageDefaultTypeInternal() {}
  union {
    ChatRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatRequestMessageDefaultTypeInternal _ChatRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chattext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.chattype_)*/0} {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
PROTOBUF_CONSTEXPR ChatRejectMessage::ChatRejectMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chattext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ChatRejectMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatRejectMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatRejectMessageDefaultTypeInternal() {}
  union {
    ChatRejectMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatRejectMessageDefaultTypeInternal _ChatRejectMessage_default_instance_;
PROTOBUF_CONSTEXPR DialogMessage::DialogMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notificationtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DialogMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DialogMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DialogMessageDefaultTypeInternal() {}
  union {
    DialogMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DialogMessageDefaultTypeInternal _DialogMessage_default_instance_;
PROTOBUF_CONSTEXPR TimeoutWarningMessage::TimeoutWarningMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timeoutreason_)*/0
  , /*decltype(_impl_.remainingseconds_)*/0u} {}
struct TimeoutWarningMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeoutWarningMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeoutWarningMessageDefaultTypeInternal() {}
  union {
    TimeoutWarningMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeoutWarningMessageDefaultTypeInternal _TimeoutWarningMessage_default_instance_;
PROTOBUF_CONSTEXPR ResetTimeoutMessage::ResetTimeoutMessage(
    ::_pbi::ConstantInitialized) {}
struct ResetTimeoutMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetTimeoutMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetTimeoutMessageDefaultTypeInternal() {}
  union {
    ResetTimeoutMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetTimeoutMessageDefaultTypeInternal _ResetTimeoutMessage_default_instance_;
PROTOBUF_CONSTEXPR ReportAvatarMessage::ReportAvatarMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reportedavatarhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reportedplayerid_)*/0u} {}
struct ReportAvatarMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportAvatarMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportAvatarMessageDefaultTypeInternal() {}
  union {
    ReportAvatarMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportAvatarMessageDefaultTypeInternal _ReportAvatarMessage_default_instance_;
PROTOBUF_CONSTEXPR ReportAvatarAckMessage::ReportAvatarAckMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reportedplayerid_)*/0u
  , /*decltype(_impl_.reportavatarresult_)*/0} {}
struct ReportAvatarAckMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportAvatarAckMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportAvatarAckMessageDefaultTypeInternal() {}
  union {
    ReportAvatarAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportAvatarAckMessageDefaultTypeInternal _ReportAvatarAckMessage_default_instance_;
PROTOBUF_CONSTEXPR ReportGameMessage::ReportGameMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reportedgameid_)*/0u} {}
struct ReportGameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportGameMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportGameMessageDefaultTypeInternal() {}
  union {
    ReportGameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportGameMessageDefaultTypeInternal _ReportGameMessage_default_instance_;
PROTOBUF_CONSTEXPR ReportGameAckMessage::ReportGameAckMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reportedgameid_)*/0u
  , /*decltype(_impl_.reportgameresult_)*/0} {}
struct ReportGameAckMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportGameAckMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportGameAckMessageDefaultTypeInternal() {}
  union {
    ReportGameAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportGameAckMessageDefaultTypeInternal _ReportGameAckMessage_default_instance_;
PROTOBUF_CONSTEXPR ErrorMessage::ErrorMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errorreason_)*/0} {}
struct ErrorMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorMessageDefaultTypeInternal() {}
  union {
    ErrorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorMessageDefaultTypeInternal _ErrorMessage_default_instance_;
PROTOBUF_CONSTEXPR AdminRemoveGameMessage::AdminRemoveGameMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.removegameid_)*/0u} {}
struct AdminRemoveGameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminRemoveGameMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminRemoveGameMessageDefaultTypeInternal() {}
  union {
    AdminRemoveGameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminRemoveGameMessageDefaultTypeInternal _AdminRemoveGameMessage_default_instance_;
PROTOBUF_CONSTEXPR AdminRemoveGameAckMessage::AdminRemoveGameAckMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.removegameid_)*/0u
  , /*decltype(_impl_.removegameresult_)*/0} {}
struct AdminRemoveGameAckMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminRemoveGameAckMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminRemoveGameAckMessageDefaultTypeInternal() {}
  union {
    AdminRemoveGameAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminRemoveGameAckMessageDefaultTypeInternal _AdminRemoveGameAckMessage_default_instance_;
PROTOBUF_CONSTEXPR AdminBanPlayerMessage::AdminBanPlayerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.banplayerid_)*/0u} {}
struct AdminBanPlayerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminBanPlayerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminBanPlayerMessageDefaultTypeInternal() {}
  union {
    AdminBanPlayerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminBanPlayerMessageDefaultTypeInternal _AdminBanPlayerMessage_default_instance_;
PROTOBUF_CONSTEXPR AdminBanPlayerAckMessage::AdminBanPlayerAckMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.banplayerid_)*/0u
  , /*decltype(_impl_.banplayerresult_)*/0} {}
struct AdminBanPlayerAckMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminBanPlayerAckMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminBanPlayerAckMessageDefaultTypeInternal() {}
  union {
    AdminBanPlayerAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminBanPlayerAckMessageDefaultTypeInternal _AdminBanPlayerAckMessage_default_instance_;
PROTOBUF_CONSTEXPR AuthMessage::AuthMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authclientrequestmessage_)*/nullptr
  , /*decltype(_impl_.authserverchallengemessage_)*/nullptr
  , /*decltype(_impl_.authclientresponsemessage_)*/nullptr
  , /*decltype(_impl_.authserververificationmessage_)*/nullptr
  , /*decltype(_impl_.errormessage_)*/nullptr
  , /*decltype(_impl_.messagetype_)*/1} {}
struct AuthMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthMessageDefaultTypeInternal() {}
  union {
    AuthMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthMessageDefaultTypeInternal _AuthMessage_default_instance_;
PROTOBUF_CONSTEXPR LobbyMessage::LobbyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.initdonemessage_)*/nullptr
  , /*decltype(_impl_.avatarrequestmessage_)*/nullptr
  , /*decltype(_impl_.avatarheadermessage_)*/nullptr
  , /*decltype(_impl_.avatardatamessage_)*/nullptr
  , /*decltype(_impl_.avatarendmessage_)*/nullptr
  , /*decltype(_impl_.unknownavatarmessage_)*/nullptr
  , /*decltype(_impl_.playerlistmessage_)*/nullptr
  , /*decltype(_impl_.gamelistnewmessage_)*/nullptr
  , /*decltype(_impl_.gamelistupdatemessage_)*/nullptr
  , /*decltype(_impl_.gamelistplayerjoinedmessage_)*/nullptr
  , /*decltype(_impl_.gamelistplayerleftmessage_)*/nullptr
  , /*decltype(_impl_.gamelistspectatorjoinedmessage_)*/nullptr
  , /*decltype(_impl_.gamelistspectatorleftmessage_)*/nullptr
  , /*decltype(_impl_.gamelistadminchangedmessage_)*/nullptr
  , /*decltype(_impl_.playerinforequestmessage_)*/nullptr
  , /*decltype(_impl_.playerinforeplymessage_)*/nullptr
  , /*decltype(_impl_.subscriptionrequestmessage_)*/nullptr
  , /*decltype(_impl_.subscriptionreplymessage_)*/nullptr
  , /*decltype(_impl_.creategamemessage_)*/nullptr
  , /*decltype(_impl_.creategamefailedmessage_)*/nullptr
  , /*decltype(_impl_.joingamemessage_)*/nullptr
  , /*decltype(_impl_.rejoingamemessage_)*/nullptr
  , /*decltype(_impl_.joingameackmessage_)*/nullptr
  , /*decltype(_impl_.joingamefailedmessage_)*/nullptr
  , /*decltype(_impl_.invitenotifymessage_)*/nullptr
  , /*decltype(_impl_.rejectgameinvitationmessage_)*/nullptr
  , /*decltype(_impl_.rejectinvnotifymessage_)*/nullptr
  , /*decltype(_impl_.statisticsmessage_)*/nullptr
  , /*decltype(_impl_.chatrequestmessage_)*/nullptr
  , /*decltype(_impl_.chatmessage_)*/nullptr
  , /*decltype(_impl_.chatrejectmessage_)*/nullptr
  , /*decltype(_impl_.dialogmessage_)*/nullptr
  , /*decltype(_impl_.timeoutwarningmessage_)*/nullptr
  , /*decltype(_impl_.resettimeoutmessage_)*/nullptr
  , /*decltype(_impl_.reportavatarmessage_)*/nullptr
  , /*decltype(_impl_.reportavatarackmessage_)*/nullptr
  , /*decltype(_impl_.reportgamemessage_)*/nullptr
  , /*decltype(_impl_.reportgameackmessage_)*/nullptr
  , /*decltype(_impl_.adminremovegamemessage_)*/nullptr
  , /*decltype(_impl_.adminremovegameackmessage_)*/nullptr
  , /*decltype(_impl_.adminbanplayermessage_)*/nullptr
  , /*decltype(_impl_.adminbanplayerackmessage_)*/nullptr
  , /*decltype(_impl_.errormessage_)*/nullptr
  , /*decltype(_impl_.messagetype_)*/1} {}
struct LobbyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobbyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobbyMessageDefaultTypeInternal() {}
  union {
    LobbyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobbyMessageDefaultTypeInternal _LobbyMessage_default_instance_;
PROTOBUF_CONSTEXPR GameManagementMessage::GameManagementMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameplayerjoinedmessage_)*/nullptr
  , /*decltype(_impl_.gameplayerleftmessage_)*/nullptr
  , /*decltype(_impl_.gamespectatorjoinedmessage_)*/nullptr
  , /*decltype(_impl_.gamespectatorleftmessage_)*/nullptr
  , /*decltype(_impl_.gameadminchangedmessage_)*/nullptr
  , /*decltype(_impl_.removedfromgamemessage_)*/nullptr
  , /*decltype(_impl_.kickplayerrequestmessage_)*/nullptr
  , /*decltype(_impl_.leavegamerequestmessage_)*/nullptr
  , /*decltype(_impl_.inviteplayertogamemessage_)*/nullptr
  , /*decltype(_impl_.starteventmessage_)*/nullptr
  , /*decltype(_impl_.starteventackmessage_)*/nullptr
  , /*decltype(_impl_.gamestartinitialmessage_)*/nullptr
  , /*decltype(_impl_.gamestartrejoinmessage_)*/nullptr
  , /*decltype(_impl_.endofgamemessage_)*/nullptr
  , /*decltype(_impl_.playeridchangedmessage_)*/nullptr
  , /*decltype(_impl_.askkickplayermessage_)*/nullptr
  , /*decltype(_impl_.askkickdeniedmessage_)*/nullptr
  , /*decltype(_impl_.startkickpetitionmessage_)*/nullptr
  , /*decltype(_impl_.votekickrequestmessage_)*/nullptr
  , /*decltype(_impl_.votekickreplymessage_)*/nullptr
  , /*decltype(_impl_.kickpetitionupdatemessage_)*/nullptr
  , /*decltype(_impl_.endkickpetitionmessage_)*/nullptr
  , /*decltype(_impl_.chatrequestmessage_)*/nullptr
  , /*decltype(_impl_.chatmessage_)*/nullptr
  , /*decltype(_impl_.chatrejectmessage_)*/nullptr
  , /*decltype(_impl_.timeoutwarningmessage_)*/nullptr
  , /*decltype(_impl_.resettimeoutmessage_)*/nullptr
  , /*decltype(_impl_.errormessage_)*/nullptr
  , /*decltype(_impl_.messagetype_)*/1} {}
struct GameManagementMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameManagementMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameManagementMessageDefaultTypeInternal() {}
  union {
    GameManagementMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameManagementMessageDefaultTypeInternal _GameManagementMessage_default_instance_;
PROTOBUF_CONSTEXPR GameEngineMessage::GameEngineMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handstartmessage_)*/nullptr
  , /*decltype(_impl_.playersturnmessage_)*/nullptr
  , /*decltype(_impl_.myactionrequestmessage_)*/nullptr
  , /*decltype(_impl_.youractionrejectedmessage_)*/nullptr
  , /*decltype(_impl_.playersactiondonemessage_)*/nullptr
  , /*decltype(_impl_.dealflopcardsmessage_)*/nullptr
  , /*decltype(_impl_.dealturncardmessage_)*/nullptr
  , /*decltype(_impl_.dealrivercardmessage_)*/nullptr
  , /*decltype(_impl_.allinshowcardsmessage_)*/nullptr
  , /*decltype(_impl_.endofhandshowcardsmessage_)*/nullptr
  , /*decltype(_impl_.endofhandhidecardsmessage_)*/nullptr
  , /*decltype(_impl_.showmycardsrequestmessage_)*/nullptr
  , /*decltype(_impl_.afterhandshowcardsmessage_)*/nullptr
  , /*decltype(_impl_.messagetype_)*/1} {}
struct GameEngineMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEngineMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEngineMessageDefaultTypeInternal() {}
  union {
    GameEngineMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEngineMessageDefaultTypeInternal _GameEngineMessage_default_instance_;
PROTOBUF_CONSTEXPR GameMessage::GameMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gamemanagementmessage_)*/nullptr
  , /*decltype(_impl_.gameenginemessage_)*/nullptr
  , /*decltype(_impl_.gameid_)*/0u
  , /*decltype(_impl_.messagetype_)*/1} {}
struct GameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameMessageDefaultTypeInternal() {}
  union {
    GameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameMessageDefaultTypeInternal _GameMessage_default_instance_;
PROTOBUF_CONSTEXPR PokerTHMessage::PokerTHMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.announcemessage_)*/nullptr
  , /*decltype(_impl_.authmessage_)*/nullptr
  , /*decltype(_impl_.lobbymessage_)*/nullptr
  , /*decltype(_impl_.gamemessage_)*/nullptr
  , /*decltype(_impl_.messagetype_)*/1} {}
struct PokerTHMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PokerTHMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PokerTHMessageDefaultTypeInternal() {}
  union {
    PokerTHMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PokerTHMessageDefaultTypeInternal _PokerTHMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_pokerth_2eproto[98];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_pokerth_2eproto[37];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pokerth_2eproto = nullptr;

const uint32_t TableStruct_pokerth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.gamename_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.netgametype_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.maxnumplayers_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.raiseintervalmode_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.raiseeveryhands_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.raiseeveryminutes_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.endraisemode_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.endraisesmallblindvalue_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.proposedguispeed_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.delaybetweenhands_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.playeractiontimeout_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.firstsmallblind_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.startmoney_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.manualblinds_),
  PROTOBUF_FIELD_OFFSET(::NetGameInfo, _impl_.allowspectators_),
  0,
  10,
  1,
  11,
  2,
  3,
  12,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  13,
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _impl_.resultcard1_),
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _impl_.resultcard2_),
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _impl_.besthandposition_),
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _impl_.moneywon_),
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _impl_.playermoney_),
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _impl_.cardsvalue_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage_Version, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage_Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage_Version, _impl_.majorversion_),
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage_Version, _impl_.minorversion_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage, _impl_.protocolversion_),
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage, _impl_.latestgameversion_),
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage, _impl_.latestbetarevision_),
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage, _impl_.servertype_),
  PROTOBUF_FIELD_OFFSET(::AnnounceMessage, _impl_.numplayersonserver_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _impl_.requestedversion_),
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _impl_.buildid_),
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _impl_.authserverpassword_),
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _impl_.clientuserdata_),
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _impl_.mylastsessionid_),
  PROTOBUF_FIELD_OFFSET(::AuthClientRequestMessage, _impl_.avatarhash_),
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::AuthServerChallengeMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthServerChallengeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthServerChallengeMessage, _impl_.serverchallenge_),
  0,
  PROTOBUF_FIELD_OFFSET(::AuthClientResponseMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthClientResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthClientResponseMessage, _impl_.clientresponse_),
  0,
  PROTOBUF_FIELD_OFFSET(::AuthServerVerificationMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthServerVerificationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthServerVerificationMessage, _impl_.serververification_),
  0,
  PROTOBUF_FIELD_OFFSET(::InitDoneMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::InitDoneMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InitDoneMessage, _impl_.yoursessionid_),
  PROTOBUF_FIELD_OFFSET(::InitDoneMessage, _impl_.yourplayerid_),
  PROTOBUF_FIELD_OFFSET(::InitDoneMessage, _impl_.youravatarhash_),
  PROTOBUF_FIELD_OFFSET(::InitDoneMessage, _impl_.rejoingameid_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::AvatarRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AvatarRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AvatarRequestMessage, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::AvatarRequestMessage, _impl_.avatarhash_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::AvatarHeaderMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AvatarHeaderMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AvatarHeaderMessage, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::AvatarHeaderMessage, _impl_.avatartype_),
  PROTOBUF_FIELD_OFFSET(::AvatarHeaderMessage, _impl_.avatarsize_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::AvatarDataMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AvatarDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AvatarDataMessage, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::AvatarDataMessage, _impl_.avatarblock_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::AvatarEndMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AvatarEndMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AvatarEndMessage, _impl_.requestid_),
  0,
  PROTOBUF_FIELD_OFFSET(::UnknownAvatarMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::UnknownAvatarMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UnknownAvatarMessage, _impl_.requestid_),
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerListMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerListMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerListMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::PlayerListMessage, _impl_.playerlistnotification_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameListNewMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameListNewMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameListNewMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::GameListNewMessage, _impl_.gamemode_),
  PROTOBUF_FIELD_OFFSET(::GameListNewMessage, _impl_.isprivate_),
  PROTOBUF_FIELD_OFFSET(::GameListNewMessage, _impl_.playerids_),
  PROTOBUF_FIELD_OFFSET(::GameListNewMessage, _impl_.adminplayerid_),
  PROTOBUF_FIELD_OFFSET(::GameListNewMessage, _impl_.gameinfo_),
  PROTOBUF_FIELD_OFFSET(::GameListNewMessage, _impl_.spectatorids_),
  1,
  4,
  2,
  ~0u,
  3,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameListUpdateMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameListUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameListUpdateMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::GameListUpdateMessage, _impl_.gamemode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameListPlayerJoinedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameListPlayerJoinedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameListPlayerJoinedMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::GameListPlayerJoinedMessage, _impl_.playerid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameListPlayerLeftMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameListPlayerLeftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameListPlayerLeftMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::GameListPlayerLeftMessage, _impl_.playerid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameListSpectatorJoinedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameListSpectatorJoinedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameListSpectatorJoinedMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::GameListSpectatorJoinedMessage, _impl_.playerid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameListSpectatorLeftMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameListSpectatorLeftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameListSpectatorLeftMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::GameListSpectatorLeftMessage, _impl_.playerid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameListAdminChangedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameListAdminChangedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameListAdminChangedMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::GameListAdminChangedMessage, _impl_.newadminplayerid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerInfoRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerInfoRequestMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData_AvatarData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData_AvatarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData_AvatarData, _impl_.avatartype_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData_AvatarData, _impl_.avatarhash_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData, _impl_.playername_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData, _impl_.ishuman_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData, _impl_.playerrights_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData, _impl_.countrycode_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage_PlayerInfoData, _impl_.avatardata_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfoReplyMessage, _impl_.playerinfodata_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SubscriptionRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubscriptionRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SubscriptionRequestMessage, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::SubscriptionRequestMessage, _impl_.subscriptionaction_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SubscriptionReplyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubscriptionReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SubscriptionReplyMessage, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::SubscriptionReplyMessage, _impl_.ack_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CreateGameMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CreateGameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CreateGameMessage, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::CreateGameMessage, _impl_.gameinfo_),
  PROTOBUF_FIELD_OFFSET(::CreateGameMessage, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::CreateGameMessage, _impl_.autoleave_),
  2,
  1,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CreateGameFailedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CreateGameFailedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CreateGameFailedMessage, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::CreateGameFailedMessage, _impl_.creategamefailurereason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::JoinGameMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::JoinGameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JoinGameMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::JoinGameMessage, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::JoinGameMessage, _impl_.autoleave_),
  PROTOBUF_FIELD_OFFSET(::JoinGameMessage, _impl_.spectateonly_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::RejoinGameMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RejoinGameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RejoinGameMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::RejoinGameMessage, _impl_.autoleave_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::JoinGameAckMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::JoinGameAckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JoinGameAckMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::JoinGameAckMessage, _impl_.areyougameadmin_),
  PROTOBUF_FIELD_OFFSET(::JoinGameAckMessage, _impl_.gameinfo_),
  PROTOBUF_FIELD_OFFSET(::JoinGameAckMessage, _impl_.spectateonly_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::JoinGameFailedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::JoinGameFailedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JoinGameFailedMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::JoinGameFailedMessage, _impl_.joingamefailurereason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GamePlayerJoinedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerJoinedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GamePlayerJoinedMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerJoinedMessage, _impl_.isgameadmin_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GamePlayerLeftMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerLeftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GamePlayerLeftMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerLeftMessage, _impl_.gameplayerleftreason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameSpectatorJoinedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameSpectatorJoinedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameSpectatorJoinedMessage, _impl_.playerid_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameSpectatorLeftMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameSpectatorLeftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameSpectatorLeftMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::GameSpectatorLeftMessage, _impl_.gamespectatorleftreason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameAdminChangedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameAdminChangedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameAdminChangedMessage, _impl_.newadminplayerid_),
  0,
  PROTOBUF_FIELD_OFFSET(::RemovedFromGameMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RemovedFromGameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemovedFromGameMessage, _impl_.removedfromgamereason_),
  0,
  PROTOBUF_FIELD_OFFSET(::KickPlayerRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KickPlayerRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KickPlayerRequestMessage, _impl_.playerid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LeaveGameRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InvitePlayerToGameMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::InvitePlayerToGameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InvitePlayerToGameMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::InvitePlayerToGameMessage, _impl_.playerid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::InviteNotifyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::InviteNotifyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InviteNotifyMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::InviteNotifyMessage, _impl_.playeridwho_),
  PROTOBUF_FIELD_OFFSET(::InviteNotifyMessage, _impl_.playeridbywhom_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RejectGameInvitationMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RejectGameInvitationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RejectGameInvitationMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::RejectGameInvitationMessage, _impl_.myrejectreason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RejectInvNotifyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RejectInvNotifyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RejectInvNotifyMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::RejectInvNotifyMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::RejectInvNotifyMessage, _impl_.playerrejectreason_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::StartEventMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::StartEventMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StartEventMessage, _impl_.starteventtype_),
  PROTOBUF_FIELD_OFFSET(::StartEventMessage, _impl_.fillwithcomputerplayers_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartEventAckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameStartInitialMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameStartInitialMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameStartInitialMessage, _impl_.startdealerplayerid_),
  PROTOBUF_FIELD_OFFSET(::GameStartInitialMessage, _impl_.playerseats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameStartRejoinMessage_RejoinPlayerData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameStartRejoinMessage_RejoinPlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameStartRejoinMessage_RejoinPlayerData, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::GameStartRejoinMessage_RejoinPlayerData, _impl_.playermoney_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameStartRejoinMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameStartRejoinMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameStartRejoinMessage, _impl_.startdealerplayerid_),
  PROTOBUF_FIELD_OFFSET(::GameStartRejoinMessage, _impl_.handnum_),
  PROTOBUF_FIELD_OFFSET(::GameStartRejoinMessage, _impl_.rejoinplayerdata_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::HandStartMessage_PlainCards, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HandStartMessage_PlainCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HandStartMessage_PlainCards, _impl_.plaincard1_),
  PROTOBUF_FIELD_OFFSET(::HandStartMessage_PlainCards, _impl_.plaincard2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HandStartMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HandStartMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HandStartMessage, _impl_.plaincards_),
  PROTOBUF_FIELD_OFFSET(::HandStartMessage, _impl_.encryptedcards_),
  PROTOBUF_FIELD_OFFSET(::HandStartMessage, _impl_.smallblind_),
  PROTOBUF_FIELD_OFFSET(::HandStartMessage, _impl_.seatstates_),
  PROTOBUF_FIELD_OFFSET(::HandStartMessage, _impl_.dealerplayerid_),
  1,
  0,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::PlayersTurnMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayersTurnMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayersTurnMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::PlayersTurnMessage, _impl_.gamestate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::MyActionRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::MyActionRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyActionRequestMessage, _impl_.handnum_),
  PROTOBUF_FIELD_OFFSET(::MyActionRequestMessage, _impl_.gamestate_),
  PROTOBUF_FIELD_OFFSET(::MyActionRequestMessage, _impl_.myaction_),
  PROTOBUF_FIELD_OFFSET(::MyActionRequestMessage, _impl_.myrelativebet_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::YourActionRejectedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::YourActionRejectedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::YourActionRejectedMessage, _impl_.gamestate_),
  PROTOBUF_FIELD_OFFSET(::YourActionRejectedMessage, _impl_.youraction_),
  PROTOBUF_FIELD_OFFSET(::YourActionRejectedMessage, _impl_.yourrelativebet_),
  PROTOBUF_FIELD_OFFSET(::YourActionRejectedMessage, _impl_.rejectionreason_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::PlayersActionDoneMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayersActionDoneMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayersActionDoneMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::PlayersActionDoneMessage, _impl_.gamestate_),
  PROTOBUF_FIELD_OFFSET(::PlayersActionDoneMessage, _impl_.playeraction_),
  PROTOBUF_FIELD_OFFSET(::PlayersActionDoneMessage, _impl_.totalplayerbet_),
  PROTOBUF_FIELD_OFFSET(::PlayersActionDoneMessage, _impl_.playermoney_),
  PROTOBUF_FIELD_OFFSET(::PlayersActionDoneMessage, _impl_.highestset_),
  PROTOBUF_FIELD_OFFSET(::PlayersActionDoneMessage, _impl_.minimumraise_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::DealFlopCardsMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DealFlopCardsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DealFlopCardsMessage, _impl_.flopcard1_),
  PROTOBUF_FIELD_OFFSET(::DealFlopCardsMessage, _impl_.flopcard2_),
  PROTOBUF_FIELD_OFFSET(::DealFlopCardsMessage, _impl_.flopcard3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::DealTurnCardMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DealTurnCardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DealTurnCardMessage, _impl_.turncard_),
  0,
  PROTOBUF_FIELD_OFFSET(::DealRiverCardMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DealRiverCardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DealRiverCardMessage, _impl_.rivercard_),
  0,
  PROTOBUF_FIELD_OFFSET(::AllInShowCardsMessage_PlayerAllIn, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AllInShowCardsMessage_PlayerAllIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AllInShowCardsMessage_PlayerAllIn, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::AllInShowCardsMessage_PlayerAllIn, _impl_.allincard1_),
  PROTOBUF_FIELD_OFFSET(::AllInShowCardsMessage_PlayerAllIn, _impl_.allincard2_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AllInShowCardsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AllInShowCardsMessage, _impl_.playersallin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EndOfHandShowCardsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EndOfHandShowCardsMessage, _impl_.playerresults_),
  PROTOBUF_FIELD_OFFSET(::EndOfHandHideCardsMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::EndOfHandHideCardsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EndOfHandHideCardsMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::EndOfHandHideCardsMessage, _impl_.moneywon_),
  PROTOBUF_FIELD_OFFSET(::EndOfHandHideCardsMessage, _impl_.playermoney_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ShowMyCardsRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AfterHandShowCardsMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AfterHandShowCardsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AfterHandShowCardsMessage, _impl_.playerresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::EndOfGameMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::EndOfGameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EndOfGameMessage, _impl_.winnerplayerid_),
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerIdChangedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerIdChangedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerIdChangedMessage, _impl_.oldplayerid_),
  PROTOBUF_FIELD_OFFSET(::PlayerIdChangedMessage, _impl_.newplayerid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AskKickPlayerMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AskKickPlayerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AskKickPlayerMessage, _impl_.playerid_),
  0,
  PROTOBUF_FIELD_OFFSET(::AskKickDeniedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AskKickDeniedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AskKickDeniedMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::AskKickDeniedMessage, _impl_.kickdeniedreason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::StartKickPetitionMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::StartKickPetitionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StartKickPetitionMessage, _impl_.petitionid_),
  PROTOBUF_FIELD_OFFSET(::StartKickPetitionMessage, _impl_.proposingplayerid_),
  PROTOBUF_FIELD_OFFSET(::StartKickPetitionMessage, _impl_.kickplayerid_),
  PROTOBUF_FIELD_OFFSET(::StartKickPetitionMessage, _impl_.kicktimeoutsec_),
  PROTOBUF_FIELD_OFFSET(::StartKickPetitionMessage, _impl_.numvotesneededtokick_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::VoteKickRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::VoteKickRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VoteKickRequestMessage, _impl_.petitionid_),
  PROTOBUF_FIELD_OFFSET(::VoteKickRequestMessage, _impl_.votekick_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::VoteKickReplyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::VoteKickReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VoteKickReplyMessage, _impl_.petitionid_),
  PROTOBUF_FIELD_OFFSET(::VoteKickReplyMessage, _impl_.votekickreplytype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KickPetitionUpdateMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KickPetitionUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KickPetitionUpdateMessage, _impl_.petitionid_),
  PROTOBUF_FIELD_OFFSET(::KickPetitionUpdateMessage, _impl_.numvotesagainstkicking_),
  PROTOBUF_FIELD_OFFSET(::KickPetitionUpdateMessage, _impl_.numvotesinfavourofkicking_),
  PROTOBUF_FIELD_OFFSET(::KickPetitionUpdateMessage, _impl_.numvotesneededtokick_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::EndKickPetitionMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::EndKickPetitionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EndKickPetitionMessage, _impl_.petitionid_),
  PROTOBUF_FIELD_OFFSET(::EndKickPetitionMessage, _impl_.numvotesagainstkicking_),
  PROTOBUF_FIELD_OFFSET(::EndKickPetitionMessage, _impl_.numvotesinfavourofkicking_),
  PROTOBUF_FIELD_OFFSET(::EndKickPetitionMessage, _impl_.resultplayerkicked_),
  PROTOBUF_FIELD_OFFSET(::EndKickPetitionMessage, _impl_.petitionendreason_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::StatisticsMessage_StatisticsData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::StatisticsMessage_StatisticsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatisticsMessage_StatisticsData, _impl_.statisticstype_),
  PROTOBUF_FIELD_OFFSET(::StatisticsMessage_StatisticsData, _impl_.statisticsvalue_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatisticsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatisticsMessage, _impl_.statisticsdata_),
  PROTOBUF_FIELD_OFFSET(::ChatRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChatRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatRequestMessage, _impl_.targetplayerid_),
  PROTOBUF_FIELD_OFFSET(::ChatRequestMessage, _impl_.chattext_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ChatMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessage, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessage, _impl_.chattype_),
  PROTOBUF_FIELD_OFFSET(::ChatMessage, _impl_.chattext_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ChatRejectMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChatRejectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatRejectMessage, _impl_.chattext_),
  0,
  PROTOBUF_FIELD_OFFSET(::DialogMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DialogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DialogMessage, _impl_.notificationtext_),
  0,
  PROTOBUF_FIELD_OFFSET(::TimeoutWarningMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TimeoutWarningMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TimeoutWarningMessage, _impl_.timeoutreason_),
  PROTOBUF_FIELD_OFFSET(::TimeoutWarningMessage, _impl_.remainingseconds_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResetTimeoutMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReportAvatarMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReportAvatarMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReportAvatarMessage, _impl_.reportedplayerid_),
  PROTOBUF_FIELD_OFFSET(::ReportAvatarMessage, _impl_.reportedavatarhash_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ReportAvatarAckMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReportAvatarAckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReportAvatarAckMessage, _impl_.reportedplayerid_),
  PROTOBUF_FIELD_OFFSET(::ReportAvatarAckMessage, _impl_.reportavatarresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ReportGameMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReportGameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReportGameMessage, _impl_.reportedgameid_),
  0,
  PROTOBUF_FIELD_OFFSET(::ReportGameAckMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReportGameAckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReportGameAckMessage, _impl_.reportedgameid_),
  PROTOBUF_FIELD_OFFSET(::ReportGameAckMessage, _impl_.reportgameresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, _impl_.errorreason_),
  0,
  PROTOBUF_FIELD_OFFSET(::AdminRemoveGameMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AdminRemoveGameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AdminRemoveGameMessage, _impl_.removegameid_),
  0,
  PROTOBUF_FIELD_OFFSET(::AdminRemoveGameAckMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AdminRemoveGameAckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AdminRemoveGameAckMessage, _impl_.removegameid_),
  PROTOBUF_FIELD_OFFSET(::AdminRemoveGameAckMessage, _impl_.removegameresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AdminBanPlayerMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AdminBanPlayerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AdminBanPlayerMessage, _impl_.banplayerid_),
  0,
  PROTOBUF_FIELD_OFFSET(::AdminBanPlayerAckMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AdminBanPlayerAckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AdminBanPlayerAckMessage, _impl_.banplayerid_),
  PROTOBUF_FIELD_OFFSET(::AdminBanPlayerAckMessage, _impl_.banplayerresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AuthMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::AuthMessage, _impl_.authclientrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::AuthMessage, _impl_.authserverchallengemessage_),
  PROTOBUF_FIELD_OFFSET(::AuthMessage, _impl_.authclientresponsemessage_),
  PROTOBUF_FIELD_OFFSET(::AuthMessage, _impl_.authserververificationmessage_),
  PROTOBUF_FIELD_OFFSET(::AuthMessage, _impl_.errormessage_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.initdonemessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.avatarrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.avatarheadermessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.avatardatamessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.avatarendmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.unknownavatarmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.playerlistmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.gamelistnewmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.gamelistupdatemessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.gamelistplayerjoinedmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.gamelistplayerleftmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.gamelistspectatorjoinedmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.gamelistspectatorleftmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.gamelistadminchangedmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.playerinforequestmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.playerinforeplymessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.subscriptionrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.subscriptionreplymessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.creategamemessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.creategamefailedmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.joingamemessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.rejoingamemessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.joingameackmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.joingamefailedmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.invitenotifymessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.rejectgameinvitationmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.rejectinvnotifymessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.statisticsmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.chatrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.chatmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.chatrejectmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.dialogmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.timeoutwarningmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.resettimeoutmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.reportavatarmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.reportavatarackmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.reportgamemessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.reportgameackmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.adminremovegamemessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.adminremovegameackmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.adminbanplayermessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.adminbanplayerackmessage_),
  PROTOBUF_FIELD_OFFSET(::LobbyMessage, _impl_.errormessage_),
  43,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.gameplayerjoinedmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.gameplayerleftmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.gamespectatorjoinedmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.gamespectatorleftmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.gameadminchangedmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.removedfromgamemessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.kickplayerrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.leavegamerequestmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.inviteplayertogamemessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.starteventmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.starteventackmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.gamestartinitialmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.gamestartrejoinmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.endofgamemessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.playeridchangedmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.askkickplayermessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.askkickdeniedmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.startkickpetitionmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.votekickrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.votekickreplymessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.kickpetitionupdatemessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.endkickpetitionmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.chatrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.chatmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.chatrejectmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.timeoutwarningmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.resettimeoutmessage_),
  PROTOBUF_FIELD_OFFSET(::GameManagementMessage, _impl_.errormessage_),
  28,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.handstartmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.playersturnmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.myactionrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.youractionrejectedmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.playersactiondonemessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.dealflopcardsmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.dealturncardmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.dealrivercardmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.allinshowcardsmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.endofhandshowcardsmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.endofhandhidecardsmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.showmycardsrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::GameEngineMessage, _impl_.afterhandshowcardsmessage_),
  13,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::GameMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::GameMessage, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::GameMessage, _impl_.gamemanagementmessage_),
  PROTOBUF_FIELD_OFFSET(::GameMessage, _impl_.gameenginemessage_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PokerTHMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PokerTHMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PokerTHMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::PokerTHMessage, _impl_.announcemessage_),
  PROTOBUF_FIELD_OFFSET(::PokerTHMessage, _impl_.authmessage_),
  PROTOBUF_FIELD_OFFSET(::PokerTHMessage, _impl_.lobbymessage_),
  PROTOBUF_FIELD_OFFSET(::PokerTHMessage, _impl_.gamemessage_),
  4,
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, -1, sizeof(::NetGameInfo)},
  { 36, 49, -1, sizeof(::PlayerResult)},
  { 56, 64, -1, sizeof(::AnnounceMessage_Version)},
  { 66, 77, -1, sizeof(::AnnounceMessage)},
  { 82, 96, -1, sizeof(::AuthClientRequestMessage)},
  { 104, 111, -1, sizeof(::AuthServerChallengeMessage)},
  { 112, 119, -1, sizeof(::AuthClientResponseMessage)},
  { 120, 127, -1, sizeof(::AuthServerVerificationMessage)},
  { 128, 138, -1, sizeof(::InitDoneMessage)},
  { 142, 150, -1, sizeof(::AvatarRequestMessage)},
  { 152, 161, -1, sizeof(::AvatarHeaderMessage)},
  { 164, 172, -1, sizeof(::AvatarDataMessage)},
  { 174, 181, -1, sizeof(::AvatarEndMessage)},
  { 182, 189, -1, sizeof(::UnknownAvatarMessage)},
  { 190, 198, -1, sizeof(::PlayerListMessage)},
  { 200, 213, -1, sizeof(::GameListNewMessage)},
  { 220, 228, -1, sizeof(::GameListUpdateMessage)},
  { 230, 238, -1, sizeof(::GameListPlayerJoinedMessage)},
  { 240, 248, -1, sizeof(::GameListPlayerLeftMessage)},
  { 250, 258, -1, sizeof(::GameListSpectatorJoinedMessage)},
  { 260, 268, -1, sizeof(::GameListSpectatorLeftMessage)},
  { 270, 278, -1, sizeof(::GameListAdminChangedMessage)},
  { 280, -1, -1, sizeof(::PlayerInfoRequestMessage)},
  { 287, 295, -1, sizeof(::PlayerInfoReplyMessage_PlayerInfoData_AvatarData)},
  { 297, 308, -1, sizeof(::PlayerInfoReplyMessage_PlayerInfoData)},
  { 313, 321, -1, sizeof(::PlayerInfoReplyMessage)},
  { 323, 331, -1, sizeof(::SubscriptionRequestMessage)},
  { 333, 341, -1, sizeof(::SubscriptionReplyMessage)},
  { 343, 353, -1, sizeof(::CreateGameMessage)},
  { 357, 365, -1, sizeof(::CreateGameFailedMessage)},
  { 367, 377, -1, sizeof(::JoinGameMessage)},
  { 381, 389, -1, sizeof(::RejoinGameMessage)},
  { 391, 401, -1, sizeof(::JoinGameAckMessage)},
  { 405, 413, -1, sizeof(::JoinGameFailedMessage)},
  { 415, 423, -1, sizeof(::GamePlayerJoinedMessage)},
  { 425, 433, -1, sizeof(::GamePlayerLeftMessage)},
  { 435, 442, -1, sizeof(::GameSpectatorJoinedMessage)},
  { 443, 451, -1, sizeof(::GameSpectatorLeftMessage)},
  { 453, 460, -1, sizeof(::GameAdminChangedMessage)},
  { 461, 468, -1, sizeof(::RemovedFromGameMessage)},
  { 469, 476, -1, sizeof(::KickPlayerRequestMessage)},
  { 477, -1, -1, sizeof(::LeaveGameRequestMessage)},
  { 483, 491, -1, sizeof(::InvitePlayerToGameMessage)},
  { 493, 502, -1, sizeof(::InviteNotifyMessage)},
  { 505, 513, -1, sizeof(::RejectGameInvitationMessage)},
  { 515, 524, -1, sizeof(::RejectInvNotifyMessage)},
  { 527, 535, -1, sizeof(::StartEventMessage)},
  { 537, -1, -1, sizeof(::StartEventAckMessage)},
  { 543, 551, -1, sizeof(::GameStartInitialMessage)},
  { 553, 561, -1, sizeof(::GameStartRejoinMessage_RejoinPlayerData)},
  { 563, 572, -1, sizeof(::GameStartRejoinMessage)},
  { 575, 583, -1, sizeof(::HandStartMessage_PlainCards)},
  { 585, 596, -1, sizeof(::HandStartMessage)},
  { 601, 609, -1, sizeof(::PlayersTurnMessage)},
  { 611, 621, -1, sizeof(::MyActionRequestMessage)},
  { 625, 635, -1, sizeof(::YourActionRejectedMessage)},
  { 639, 652, -1, sizeof(::PlayersActionDoneMessage)},
  { 659, 668, -1, sizeof(::DealFlopCardsMessage)},
  { 671, 678, -1, sizeof(::DealTurnCardMessage)},
  { 679, 686, -1, sizeof(::DealRiverCardMessage)},
  { 687, 696, -1, sizeof(::AllInShowCardsMessage_PlayerAllIn)},
  { 699, -1, -1, sizeof(::AllInShowCardsMessage)},
  { 706, -1, -1, sizeof(::EndOfHandShowCardsMessage)},
  { 713, 722, -1, sizeof(::EndOfHandHideCardsMessage)},
  { 725, -1, -1, sizeof(::ShowMyCardsRequestMessage)},
  { 731, 738, -1, sizeof(::AfterHandShowCardsMessage)},
  { 739, 746, -1, sizeof(::EndOfGameMessage)},
  { 747, 755, -1, sizeof(::PlayerIdChangedMessage)},
  { 757, 764, -1, sizeof(::AskKickPlayerMessage)},
  { 765, 773, -1, sizeof(::AskKickDeniedMessage)},
  { 775, 786, -1, sizeof(::StartKickPetitionMessage)},
  { 791, 799, -1, sizeof(::VoteKickRequestMessage)},
  { 801, 809, -1, sizeof(::VoteKickReplyMessage)},
  { 811, 821, -1, sizeof(::KickPetitionUpdateMessage)},
  { 825, 836, -1, sizeof(::EndKickPetitionMessage)},
  { 841, 849, -1, sizeof(::StatisticsMessage_StatisticsData)},
  { 851, -1, -1, sizeof(::StatisticsMessage)},
  { 858, 866, -1, sizeof(::ChatRequestMessage)},
  { 868, 877, -1, sizeof(::ChatMessage)},
  { 880, 887, -1, sizeof(::ChatRejectMessage)},
  { 888, 895, -1, sizeof(::DialogMessage)},
  { 896, 904, -1, sizeof(::TimeoutWarningMessage)},
  { 906, -1, -1, sizeof(::ResetTimeoutMessage)},
  { 912, 920, -1, sizeof(::ReportAvatarMessage)},
  { 922, 930, -1, sizeof(::ReportAvatarAckMessage)},
  { 932, 939, -1, sizeof(::ReportGameMessage)},
  { 940, 948, -1, sizeof(::ReportGameAckMessage)},
  { 950, 957, -1, sizeof(::ErrorMessage)},
  { 958, 965, -1, sizeof(::AdminRemoveGameMessage)},
  { 966, 974, -1, sizeof(::AdminRemoveGameAckMessage)},
  { 976, 983, -1, sizeof(::AdminBanPlayerMessage)},
  { 984, 992, -1, sizeof(::AdminBanPlayerAckMessage)},
  { 994, 1006, -1, sizeof(::AuthMessage)},
  { 1012, 1062, -1, sizeof(::LobbyMessage)},
  { 1106, 1141, -1, sizeof(::GameManagementMessage)},
  { 1170, 1190, -1, sizeof(::GameEngineMessage)},
  { 1204, 1214, -1, sizeof(::GameMessage)},
  { 1218, 1229, -1, sizeof(::PokerTHMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_NetGameInfo_default_instance_._instance,
  &::_PlayerResult_default_instance_._instance,
  &::_AnnounceMessage_Version_default_instance_._instance,
  &::_AnnounceMessage_default_instance_._instance,
  &::_AuthClientRequestMessage_default_instance_._instance,
  &::_AuthServerChallengeMessage_default_instance_._instance,
  &::_AuthClientResponseMessage_default_instance_._instance,
  &::_AuthServerVerificationMessage_default_instance_._instance,
  &::_InitDoneMessage_default_instance_._instance,
  &::_AvatarRequestMessage_default_instance_._instance,
  &::_AvatarHeaderMessage_default_instance_._instance,
  &::_AvatarDataMessage_default_instance_._instance,
  &::_AvatarEndMessage_default_instance_._instance,
  &::_UnknownAvatarMessage_default_instance_._instance,
  &::_PlayerListMessage_default_instance_._instance,
  &::_GameListNewMessage_default_instance_._instance,
  &::_GameListUpdateMessage_default_instance_._instance,
  &::_GameListPlayerJoinedMessage_default_instance_._instance,
  &::_GameListPlayerLeftMessage_default_instance_._instance,
  &::_GameListSpectatorJoinedMessage_default_instance_._instance,
  &::_GameListSpectatorLeftMessage_default_instance_._instance,
  &::_GameListAdminChangedMessage_default_instance_._instance,
  &::_PlayerInfoRequestMessage_default_instance_._instance,
  &::_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_default_instance_._instance,
  &::_PlayerInfoReplyMessage_PlayerInfoData_default_instance_._instance,
  &::_PlayerInfoReplyMessage_default_instance_._instance,
  &::_SubscriptionRequestMessage_default_instance_._instance,
  &::_SubscriptionReplyMessage_default_instance_._instance,
  &::_CreateGameMessage_default_instance_._instance,
  &::_CreateGameFailedMessage_default_instance_._instance,
  &::_JoinGameMessage_default_instance_._instance,
  &::_RejoinGameMessage_default_instance_._instance,
  &::_JoinGameAckMessage_default_instance_._instance,
  &::_JoinGameFailedMessage_default_instance_._instance,
  &::_GamePlayerJoinedMessage_default_instance_._instance,
  &::_GamePlayerLeftMessage_default_instance_._instance,
  &::_GameSpectatorJoinedMessage_default_instance_._instance,
  &::_GameSpectatorLeftMessage_default_instance_._instance,
  &::_GameAdminChangedMessage_default_instance_._instance,
  &::_RemovedFromGameMessage_default_instance_._instance,
  &::_KickPlayerRequestMessage_default_instance_._instance,
  &::_LeaveGameRequestMessage_default_instance_._instance,
  &::_InvitePlayerToGameMessage_default_instance_._instance,
  &::_InviteNotifyMessage_default_instance_._instance,
  &::_RejectGameInvitationMessage_default_instance_._instance,
  &::_RejectInvNotifyMessage_default_instance_._instance,
  &::_StartEventMessage_default_instance_._instance,
  &::_StartEventAckMessage_default_instance_._instance,
  &::_GameStartInitialMessage_default_instance_._instance,
  &::_GameStartRejoinMessage_RejoinPlayerData_default_instance_._instance,
  &::_GameStartRejoinMessage_default_instance_._instance,
  &::_HandStartMessage_PlainCards_default_instance_._instance,
  &::_HandStartMessage_default_instance_._instance,
  &::_PlayersTurnMessage_default_instance_._instance,
  &::_MyActionRequestMessage_default_instance_._instance,
  &::_YourActionRejectedMessage_default_instance_._instance,
  &::_PlayersActionDoneMessage_default_instance_._instance,
  &::_DealFlopCardsMessage_default_instance_._instance,
  &::_DealTurnCardMessage_default_instance_._instance,
  &::_DealRiverCardMessage_default_instance_._instance,
  &::_AllInShowCardsMessage_PlayerAllIn_default_instance_._instance,
  &::_AllInShowCardsMessage_default_instance_._instance,
  &::_EndOfHandShowCardsMessage_default_instance_._instance,
  &::_EndOfHandHideCardsMessage_default_instance_._instance,
  &::_ShowMyCardsRequestMessage_default_instance_._instance,
  &::_AfterHandShowCardsMessage_default_instance_._instance,
  &::_EndOfGameMessage_default_instance_._instance,
  &::_PlayerIdChangedMessage_default_instance_._instance,
  &::_AskKickPlayerMessage_default_instance_._instance,
  &::_AskKickDeniedMessage_default_instance_._instance,
  &::_StartKickPetitionMessage_default_instance_._instance,
  &::_VoteKickRequestMessage_default_instance_._instance,
  &::_VoteKickReplyMessage_default_instance_._instance,
  &::_KickPetitionUpdateMessage_default_instance_._instance,
  &::_EndKickPetitionMessage_default_instance_._instance,
  &::_StatisticsMessage_StatisticsData_default_instance_._instance,
  &::_StatisticsMessage_default_instance_._instance,
  &::_ChatRequestMessage_default_instance_._instance,
  &::_ChatMessage_default_instance_._instance,
  &::_ChatRejectMessage_default_instance_._instance,
  &::_DialogMessage_default_instance_._instance,
  &::_TimeoutWarningMessage_default_instance_._instance,
  &::_ResetTimeoutMessage_default_instance_._instance,
  &::_ReportAvatarMessage_default_instance_._instance,
  &::_ReportAvatarAckMessage_default_instance_._instance,
  &::_ReportGameMessage_default_instance_._instance,
  &::_ReportGameAckMessage_default_instance_._instance,
  &::_ErrorMessage_default_instance_._instance,
  &::_AdminRemoveGameMessage_default_instance_._instance,
  &::_AdminRemoveGameAckMessage_default_instance_._instance,
  &::_AdminBanPlayerMessage_default_instance_._instance,
  &::_AdminBanPlayerAckMessage_default_instance_._instance,
  &::_AuthMessage_default_instance_._instance,
  &::_LobbyMessage_default_instance_._instance,
  &::_GameManagementMessage_default_instance_._instance,
  &::_GameEngineMessage_default_instance_._instance,
  &::_GameMessage_default_instance_._instance,
  &::_PokerTHMessage_default_instance_._instance,
};

const char descriptor_table_protodef_pokerth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpokerth.proto\"\301\005\n\013NetGameInfo\022\020\n\010gameN"
  "ame\030\001 \002(\t\022-\n\013netGameType\030\002 \002(\0162\030.NetGame"
  "Info.NetGameType\022\025\n\rmaxNumPlayers\030\003 \002(\r\022"
  "9\n\021raiseIntervalMode\030\004 \002(\0162\036.NetGameInfo"
  ".RaiseIntervalMode\022\027\n\017raiseEveryHands\030\005 "
  "\001(\r\022\031\n\021raiseEveryMinutes\030\006 \001(\r\022/\n\014endRai"
  "seMode\030\007 \002(\0162\031.NetGameInfo.EndRaiseMode\022"
  "\037\n\027endRaiseSmallBlindValue\030\010 \001(\r\022\030\n\020prop"
  "osedGuiSpeed\030\t \002(\r\022\031\n\021delayBetweenHands\030"
  "\n \002(\r\022\033\n\023playerActionTimeout\030\013 \002(\r\022\027\n\017fi"
  "rstSmallBlind\030\014 \002(\r\022\022\n\nstartMoney\030\r \002(\r\022"
  "\030\n\014manualBlinds\030\016 \003(\rB\002\020\001\022\035\n\017allowSpecta"
  "tors\030\017 \001(\010:\004true\"Z\n\013NetGameType\022\016\n\nnorma"
  "lGame\020\001\022\026\n\022registeredOnlyGame\020\002\022\022\n\016invit"
  "eOnlyGame\020\003\022\017\n\013rankingGame\020\004\";\n\021RaiseInt"
  "ervalMode\022\022\n\016raiseOnHandNum\020\001\022\022\n\016raiseOn"
  "Minutes\020\002\"H\n\014EndRaiseMode\022\020\n\014doubleBlind"
  "s\020\001\022\023\n\017raiseByEndValue\020\002\022\021\n\rkeepLastBlin"
  "d\020\003\"\243\001\n\014PlayerResult\022\020\n\010playerId\030\001 \002(\r\022\023"
  "\n\013resultCard1\030\002 \002(\r\022\023\n\013resultCard2\030\003 \002(\r"
  "\022\034\n\020bestHandPosition\030\004 \003(\rB\002\020\001\022\020\n\010moneyW"
  "on\030\005 \002(\r\022\023\n\013playerMoney\030\006 \002(\r\022\022\n\ncardsVa"
  "lue\030\007 \001(\r\"\364\002\n\017AnnounceMessage\0221\n\017protoco"
  "lVersion\030\001 \002(\0132\030.AnnounceMessage.Version"
  "\0223\n\021latestGameVersion\030\002 \002(\0132\030.AnnounceMe"
  "ssage.Version\022\032\n\022latestBetaRevision\030\003 \002("
  "\r\022/\n\nserverType\030\004 \002(\0162\033.AnnounceMessage."
  "ServerType\022\032\n\022numPlayersOnServer\030\005 \002(\r\0325"
  "\n\007Version\022\024\n\014majorVersion\030\001 \002(\r\022\024\n\014minor"
  "Version\030\002 \002(\r\"Y\n\nServerType\022\021\n\rserverTyp"
  "eLAN\020\000\022\034\n\030serverTypeInternetNoAuth\020\001\022\032\n\026"
  "serverTypeInternetAuth\020\002\"\325\002\n\030AuthClientR"
  "equestMessage\0222\n\020requestedVersion\030\001 \002(\0132"
  "\030.AnnounceMessage.Version\022\017\n\007buildId\030\002 \002"
  "(\r\0222\n\005login\030\003 \002(\0162#.AuthClientRequestMes"
  "sage.LoginType\022\032\n\022authServerPassword\030\004 \001"
  "(\t\022\020\n\010nickName\030\005 \001(\t\022\026\n\016clientUserData\030\006"
  " \001(\014\022\027\n\017myLastSessionId\030\007 \001(\014\022\022\n\navatarH"
  "ash\030\010 \001(\014\"M\n\tLoginType\022\016\n\nguestLogin\020\000\022\026"
  "\n\022authenticatedLogin\020\001\022\030\n\024unauthenticate"
  "dLogin\020\002\"5\n\032AuthServerChallengeMessage\022\027"
  "\n\017serverChallenge\030\001 \002(\014\"3\n\031AuthClientRes"
  "ponseMessage\022\026\n\016clientResponse\030\001 \002(\014\";\n\035"
  "AuthServerVerificationMessage\022\032\n\022serverV"
  "erification\030\001 \002(\014\"l\n\017InitDoneMessage\022\025\n\r"
  "yourSessionId\030\001 \002(\014\022\024\n\014yourPlayerId\030\002 \002("
  "\r\022\026\n\016yourAvatarHash\030\003 \001(\014\022\024\n\014rejoinGameI"
  "d\030\004 \001(\r\"=\n\024AvatarRequestMessage\022\021\n\treque"
  "stId\030\001 \002(\r\022\022\n\navatarHash\030\002 \002(\014\"`\n\023Avatar"
  "HeaderMessage\022\021\n\trequestId\030\001 \002(\r\022\"\n\navat"
  "arType\030\002 \002(\0162\016.NetAvatarType\022\022\n\navatarSi"
  "ze\030\003 \002(\r\";\n\021AvatarDataMessage\022\021\n\trequest"
  "Id\030\001 \002(\r\022\023\n\013avatarBlock\030\002 \002(\014\"%\n\020AvatarE"
  "ndMessage\022\021\n\trequestId\030\001 \002(\r\")\n\024UnknownA"
  "vatarMessage\022\021\n\trequestId\030\001 \002(\r\"\261\001\n\021Play"
  "erListMessage\022\020\n\010playerId\030\001 \002(\r\022I\n\026playe"
  "rListNotification\030\002 \002(\0162).PlayerListMess"
  "age.PlayerListNotification\"\?\n\026PlayerList"
  "Notification\022\021\n\rplayerListNew\020\000\022\022\n\016playe"
  "rListLeft\020\001\"\277\001\n\022GameListNewMessage\022\016\n\006ga"
  "meId\030\001 \002(\r\022\036\n\010gameMode\030\002 \002(\0162\014.NetGameMo"
  "de\022\021\n\tisPrivate\030\003 \002(\010\022\025\n\tplayerIds\030\004 \003(\r"
  "B\002\020\001\022\025\n\radminPlayerId\030\005 \002(\r\022\036\n\010gameInfo\030"
  "\006 \002(\0132\014.NetGameInfo\022\030\n\014spectatorIds\030\007 \003("
  "\rB\002\020\001\"G\n\025GameListUpdateMessage\022\016\n\006gameId"
  "\030\001 \002(\r\022\036\n\010gameMode\030\002 \002(\0162\014.NetGameMode\"\?"
  "\n\033GameListPlayerJoinedMessage\022\016\n\006gameId\030"
  "\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\"=\n\031GameListPlaye"
  "rLeftMessage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010playerId"
  "\030\002 \002(\r\"B\n\036GameListSpectatorJoinedMessage"
  "\022\016\n\006gameId\030\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\"@\n\034Ga"
  "meListSpectatorLeftMessage\022\016\n\006gameId\030\001 \002"
  "(\r\022\020\n\010playerId\030\002 \002(\r\"G\n\033GameListAdminCha"
  "ngedMessage\022\016\n\006gameId\030\001 \002(\r\022\030\n\020newAdminP"
  "layerId\030\002 \002(\r\"0\n\030PlayerInfoRequestMessag"
  "e\022\024\n\010playerId\030\001 \003(\rB\002\020\001\"\360\002\n\026PlayerInfoRe"
  "plyMessage\022\020\n\010playerId\030\001 \002(\r\022>\n\016playerIn"
  "foData\030\002 \001(\0132&.PlayerInfoReplyMessage.Pl"
  "ayerInfoData\032\203\002\n\016PlayerInfoData\022\022\n\nplaye"
  "rName\030\001 \002(\t\022\017\n\007isHuman\030\002 \002(\010\022*\n\014playerRi"
  "ghts\030\003 \002(\0162\024.NetPlayerInfoRights\022\023\n\013coun"
  "tryCode\030\004 \001(\t\022E\n\navatarData\030\005 \001(\01321.Play"
  "erInfoReplyMessage.PlayerInfoData.Avatar"
  "Data\032D\n\nAvatarData\022\"\n\navatarType\030\001 \002(\0162\016"
  ".NetAvatarType\022\022\n\navatarHash\030\002 \002(\014\"\303\001\n\032S"
  "ubscriptionRequestMessage\022\021\n\trequestId\030\001"
  " \002(\r\022J\n\022subscriptionAction\030\002 \002(\0162..Subsc"
  "riptionRequestMessage.SubscriptionAction"
  "\"F\n\022SubscriptionAction\022\027\n\023unsubscribeGam"
  "eList\020\001\022\027\n\023resubscribeGameList\020\002\":\n\030Subs"
  "criptionReplyMessage\022\021\n\trequestId\030\001 \002(\r\022"
  "\013\n\003ack\030\002 \002(\010\"k\n\021CreateGameMessage\022\021\n\treq"
  "uestId\030\001 \002(\r\022\036\n\010gameInfo\030\002 \002(\0132\014.NetGame"
  "Info\022\020\n\010password\030\003 \001(\t\022\021\n\tautoLeave\030\004 \001("
  "\010\"\352\001\n\027CreateGameFailedMessage\022\021\n\trequest"
  "Id\030\001 \002(\r\022Q\n\027createGameFailureReason\030\002 \002("
  "\01620.CreateGameFailedMessage.CreateGameFa"
  "ilureReason\"i\n\027CreateGameFailureReason\022\025"
  "\n\021notAllowedAsGuest\020\001\022\021\n\rgameNameInUse\020\002"
  "\022\017\n\013badGameName\020\003\022\023\n\017invalidSettings\020\004\"j"
  "\n\017JoinGameMessage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010pas"
  "sword\030\002 \001(\t\022\030\n\tautoLeave\030\003 \001(\010:\005false\022\033\n"
  "\014spectateOnly\030\004 \001(\010:\005false\"=\n\021RejoinGame"
  "Message\022\016\n\006gameId\030\001 \002(\r\022\030\n\tautoLeave\030\002 \001"
  "(\010:\005false\"s\n\022JoinGameAckMessage\022\016\n\006gameI"
  "d\030\001 \002(\r\022\027\n\017areYouGameAdmin\030\002 \002(\010\022\036\n\010game"
  "Info\030\003 \002(\0132\014.NetGameInfo\022\024\n\014spectateOnly"
  "\030\004 \001(\010\"\277\002\n\025JoinGameFailedMessage\022\016\n\006game"
  "Id\030\001 \002(\r\022K\n\025joinGameFailureReason\030\002 \002(\0162"
  ",.JoinGameFailedMessage.JoinGameFailureR"
  "eason\"\310\001\n\025JoinGameFailureReason\022\017\n\013inval"
  "idGame\020\001\022\016\n\ngameIsFull\020\002\022\021\n\rgameIsRunnin"
  "g\020\003\022\025\n\021notAllowedAsGuest\020\004\022\023\n\017invalidPas"
  "sword\020\005\022\016\n\nnotInvited\020\006\022\024\n\020ipAddressBloc"
  "ked\020\007\022\020\n\014rejoinFailed\020\010\022\027\n\023noSpectatorsA"
  "llowed\020\t\"@\n\027GamePlayerJoinedMessage\022\020\n\010p"
  "layerId\030\001 \002(\r\022\023\n\013isGameAdmin\030\002 \002(\010\"\276\001\n\025G"
  "amePlayerLeftMessage\022\020\n\010playerId\030\001 \002(\r\022I"
  "\n\024gamePlayerLeftReason\030\002 \002(\0162+.GamePlaye"
  "rLeftMessage.GamePlayerLeftReason\"H\n\024Gam"
  "ePlayerLeftReason\022\021\n\rleftOnRequest\020\000\022\016\n\n"
  "leftKicked\020\001\022\r\n\tleftError\020\002\".\n\032GameSpect"
  "atorJoinedMessage\022\020\n\010playerId\030\001 \002(\r\"z\n\030G"
  "ameSpectatorLeftMessage\022\020\n\010playerId\030\001 \002("
  "\r\022L\n\027gameSpectatorLeftReason\030\002 \002(\0162+.Gam"
  "ePlayerLeftMessage.GamePlayerLeftReason\""
  "3\n\027GameAdminChangedMessage\022\030\n\020newAdminPl"
  "ayerId\030\001 \002(\r\"\206\002\n\026RemovedFromGameMessage\022"
  "L\n\025removedFromGameReason\030\001 \002(\0162-.Removed"
  "FromGameMessage.RemovedFromGameReason\"\235\001"
  "\n\025RemovedFromGameReason\022\024\n\020removedOnRequ"
  "est\020\000\022\022\n\016kickedFromGame\020\001\022\016\n\ngameIsFull\020"
  "\002\022\021\n\rgameIsRunning\020\003\022\017\n\013gameTimeout\020\004\022\026\n"
  "\022removedStartFailed\020\005\022\016\n\ngameClosed\020\006\",\n"
  "\030KickPlayerRequestMessage\022\020\n\010playerId\030\001 "
  "\002(\r\"\031\n\027LeaveGameRequestMessage\"=\n\031Invite"
  "PlayerToGameMessage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010p"
  "layerId\030\002 \002(\r\"R\n\023InviteNotifyMessage\022\016\n\006"
  "gameId\030\001 \002(\r\022\023\n\013playerIdWho\030\002 \002(\r\022\026\n\016pla"
  "yerIdByWhom\030\003 \002(\r\"\270\001\n\033RejectGameInvitati"
  "onMessage\022\016\n\006gameId\030\001 \002(\r\022H\n\016myRejectRea"
  "son\030\002 \002(\01620.RejectGameInvitationMessage."
  "RejectGameInvReason\"\?\n\023RejectGameInvReas"
  "on\022\022\n\016rejectReasonNo\020\000\022\024\n\020rejectReasonBu"
  "sy\020\001\"\210\001\n\026RejectInvNotifyMessage\022\016\n\006gameI"
  "d\030\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\022L\n\022playerRejec"
  "tReason\030\003 \002(\01620.RejectGameInvitationMess"
  "age.RejectGameInvReason\"\242\001\n\021StartEventMe"
  "ssage\0229\n\016startEventType\030\001 \002(\0162!.StartEve"
  "ntMessage.StartEventType\022\037\n\027fillWithComp"
  "uterPlayers\030\002 \001(\010\"1\n\016StartEventType\022\016\n\ns"
  "tartEvent\020\000\022\017\n\013rejoinEvent\020\001\"\026\n\024StartEve"
  "ntAckMessage\"O\n\027GameStartInitialMessage\022"
  "\033\n\023startDealerPlayerId\030\001 \002(\r\022\027\n\013playerSe"
  "ats\030\002 \003(\rB\002\020\001\"\305\001\n\026GameStartRejoinMessage"
  "\022\033\n\023startDealerPlayerId\030\001 \002(\r\022\017\n\007handNum"
  "\030\002 \002(\r\022B\n\020rejoinPlayerData\030\003 \003(\0132(.GameS"
  "tartRejoinMessage.RejoinPlayerData\0329\n\020Re"
  "joinPlayerData\022\020\n\010playerId\030\001 \002(\r\022\023\n\013play"
  "erMoney\030\002 \002(\r\"\343\001\n\020HandStartMessage\0220\n\npl"
  "ainCards\030\001 \001(\0132\034.HandStartMessage.PlainC"
  "ards\022\026\n\016encryptedCards\030\002 \001(\014\022\022\n\nsmallBli"
  "nd\030\003 \002(\r\022#\n\nseatStates\030\004 \003(\0162\017.NetPlayer"
  "State\022\026\n\016dealerPlayerId\030\005 \001(\r\0324\n\nPlainCa"
  "rds\022\022\n\nplainCard1\030\001 \002(\r\022\022\n\nplainCard2\030\002 "
  "\002(\r\"H\n\022PlayersTurnMessage\022\020\n\010playerId\030\001 "
  "\002(\r\022 \n\tgameState\030\002 \002(\0162\r.NetGameState\"\206\001"
  "\n\026MyActionRequestMessage\022\017\n\007handNum\030\001 \002("
  "\r\022 \n\tgameState\030\002 \002(\0162\r.NetGameState\022\"\n\010m"
  "yAction\030\003 \002(\0162\020.NetPlayerAction\022\025\n\rmyRel"
  "ativeBet\030\004 \002(\r\"\251\002\n\031YourActionRejectedMes"
  "sage\022 \n\tgameState\030\001 \002(\0162\r.NetGameState\022$"
  "\n\nyourAction\030\002 \002(\0162\020.NetPlayerAction\022\027\n\017"
  "yourRelativeBet\030\003 \002(\r\022C\n\017rejectionReason"
  "\030\004 \002(\0162*.YourActionRejectedMessage.Rejec"
  "tionReason\"f\n\017RejectionReason\022\034\n\030rejecte"
  "dInvalidGameState\020\001\022\027\n\023rejectedNotYourTu"
  "rn\020\002\022\034\n\030rejectedActionNotAllowed\020\003\"\315\001\n\030P"
  "layersActionDoneMessage\022\020\n\010playerId\030\001 \002("
  "\r\022 \n\tgameState\030\002 \002(\0162\r.NetGameState\022&\n\014p"
  "layerAction\030\003 \002(\0162\020.NetPlayerAction\022\026\n\016t"
  "otalPlayerBet\030\004 \002(\r\022\023\n\013playerMoney\030\005 \002(\r"
  "\022\022\n\nhighestSet\030\006 \002(\r\022\024\n\014minimumRaise\030\007 \002"
  "(\r\"O\n\024DealFlopCardsMessage\022\021\n\tflopCard1\030"
  "\001 \002(\r\022\021\n\tflopCard2\030\002 \002(\r\022\021\n\tflopCard3\030\003 "
  "\002(\r\"\'\n\023DealTurnCardMessage\022\020\n\010turnCard\030\001"
  " \002(\r\")\n\024DealRiverCardMessage\022\021\n\triverCar"
  "d\030\001 \002(\r\"\232\001\n\025AllInShowCardsMessage\0228\n\014pla"
  "yersAllIn\030\001 \003(\0132\".AllInShowCardsMessage."
  "PlayerAllIn\032G\n\013PlayerAllIn\022\020\n\010playerId\030\001"
  " \002(\r\022\022\n\nallInCard1\030\002 \002(\r\022\022\n\nallInCard2\030\003"
  " \002(\r\"A\n\031EndOfHandShowCardsMessage\022$\n\rpla"
  "yerResults\030\001 \003(\0132\r.PlayerResult\"T\n\031EndOf"
  "HandHideCardsMessage\022\020\n\010playerId\030\001 \002(\r\022\020"
  "\n\010moneyWon\030\002 \002(\r\022\023\n\013playerMoney\030\003 \002(\r\"\033\n"
  "\031ShowMyCardsRequestMessage\"@\n\031AfterHandS"
  "howCardsMessage\022#\n\014playerResult\030\001 \002(\0132\r."
  "PlayerResult\"*\n\020EndOfGameMessage\022\026\n\016winn"
  "erPlayerId\030\001 \002(\r\"B\n\026PlayerIdChangedMessa"
  "ge\022\023\n\013oldPlayerId\030\001 \002(\r\022\023\n\013newPlayerId\030\002"
  " \002(\r\"(\n\024AskKickPlayerMessage\022\020\n\010playerId"
  "\030\001 \002(\r\"\227\002\n\024AskKickDeniedMessage\022\020\n\010playe"
  "rId\030\001 \002(\r\022@\n\020kickDeniedReason\030\002 \002(\0162&.As"
  "kKickDeniedMessage.KickDeniedReason\"\252\001\n\020"
  "KickDeniedReason\022\036\n\032kickDeniedInvalidGam"
  "eState\020\000\022\031\n\025kickDeniedNotPossible\020\001\022\033\n\027k"
  "ickDeniedTryAgainLater\020\002\022\037\n\033kickDeniedAl"
  "readyInProgress\020\003\022\035\n\031kickDeniedInvalidPl"
  "ayerId\020\004\"\225\001\n\030StartKickPetitionMessage\022\022\n"
  "\npetitionId\030\001 \002(\r\022\031\n\021proposingPlayerId\030\002"
  " \002(\r\022\024\n\014kickPlayerId\030\003 \002(\r\022\026\n\016kickTimeou"
  "tSec\030\004 \002(\r\022\034\n\024numVotesNeededToKick\030\005 \002(\r"
  "\">\n\026VoteKickRequestMessage\022\022\n\npetitionId"
  "\030\001 \002(\r\022\020\n\010voteKick\030\002 \002(\010\"\317\001\n\024VoteKickRep"
  "lyMessage\022\022\n\npetitionId\030\001 \002(\r\022B\n\021voteKic"
  "kReplyType\030\002 \002(\0162\'.VoteKickReplyMessage."
  "VoteKickReplyType\"_\n\021VoteKickReplyType\022\017"
  "\n\013voteKickAck\020\000\022\031\n\025voteKickDeniedInvalid"
  "\020\001\022\036\n\032voteKickDeniedAlreadyVoted\020\002\"\220\001\n\031K"
  "ickPetitionUpdateMessage\022\022\n\npetitionId\030\001"
  " \002(\r\022\036\n\026numVotesAgainstKicking\030\002 \002(\r\022!\n\031"
  "numVotesInFavourOfKicking\030\003 \002(\r\022\034\n\024numVo"
  "tesNeededToKick\030\004 \002(\r\"\324\002\n\026EndKickPetitio"
  "nMessage\022\022\n\npetitionId\030\001 \002(\r\022\036\n\026numVotes"
  "AgainstKicking\030\002 \002(\r\022!\n\031numVotesInFavour"
  "OfKicking\030\003 \002(\r\022\032\n\022resultPlayerKicked\030\004 "
  "\002(\r\022D\n\021petitionEndReason\030\005 \002(\0162).EndKick"
  "PetitionMessage.PetitionEndReason\"\200\001\n\021Pe"
  "titionEndReason\022\032\n\026petitionEndEnoughVote"
  "s\020\000\022\034\n\030petitionEndTooFewPlayers\020\001\022\031\n\025pet"
  "itionEndPlayerLeft\020\002\022\026\n\022petitionEndTimeo"
  "ut\020\003\"\357\001\n\021StatisticsMessage\0229\n\016statistics"
  "Data\030\001 \003(\0132!.StatisticsMessage.Statistic"
  "sData\032\236\001\n\016StatisticsData\022H\n\016statisticsTy"
  "pe\030\001 \002(\01620.StatisticsMessage.StatisticsD"
  "ata.StatisticsType\022\027\n\017statisticsValue\030\002 "
  "\002(\r\")\n\016StatisticsType\022\027\n\023statNumberOfPla"
  "yers\020\001\">\n\022ChatRequestMessage\022\026\n\016targetPl"
  "ayerId\030\002 \001(\r\022\020\n\010chatText\030\003 \002(\t\"\271\001\n\013ChatM"
  "essage\022\020\n\010playerId\030\001 \001(\r\022\'\n\010chatType\030\002 \002"
  "(\0162\025.ChatMessage.ChatType\022\020\n\010chatText\030\003 "
  "\002(\t\"]\n\010ChatType\022\024\n\020chatTypeStandard\020\000\022\017\n"
  "\013chatTypeBot\020\001\022\025\n\021chatTypeBroadcast\020\002\022\023\n"
  "\017chatTypePrivate\020\003\"%\n\021ChatRejectMessage\022"
  "\020\n\010chatText\030\001 \002(\t\")\n\rDialogMessage\022\030\n\020no"
  "tificationText\030\001 \002(\t\"\321\001\n\025TimeoutWarningM"
  "essage\022;\n\rtimeoutReason\030\001 \002(\0162$.TimeoutW"
  "arningMessage.TimeoutReason\022\030\n\020remaining"
  "Seconds\030\002 \002(\r\"a\n\rTimeoutReason\022\031\n\025timeou"
  "tNoDataReceived\020\000\022\027\n\023timeoutInactiveGame"
  "\020\001\022\034\n\030timeoutKickAfterAutofold\020\002\"\025\n\023Rese"
  "tTimeoutMessage\"K\n\023ReportAvatarMessage\022\030"
  "\n\020reportedPlayerId\030\001 \002(\r\022\032\n\022reportedAvat"
  "arHash\030\002 \002(\014\"\336\001\n\026ReportAvatarAckMessage\022"
  "\030\n\020reportedPlayerId\030\001 \002(\r\022F\n\022reportAvata"
  "rResult\030\002 \002(\0162*.ReportAvatarAckMessage.R"
  "eportAvatarResult\"b\n\022ReportAvatarResult\022"
  "\030\n\024avatarReportAccepted\020\000\022\031\n\025avatarRepor"
  "tDuplicate\020\001\022\027\n\023avatarReportInvalid\020\002\"+\n"
  "\021ReportGameMessage\022\026\n\016reportedGameId\030\001 \002"
  "(\r\"\314\001\n\024ReportGameAckMessage\022\026\n\016reportedG"
  "ameId\030\001 \002(\r\022@\n\020reportGameResult\030\002 \002(\0162&."
  "ReportGameAckMessage.ReportGameResult\"Z\n"
  "\020ReportGameResult\022\026\n\022gameReportAccepted\020"
  "\000\022\027\n\023gameReportDuplicate\020\001\022\025\n\021gameReport"
  "Invalid\020\002\"\224\003\n\014ErrorMessage\022.\n\013errorReaso"
  "n\030\001 \002(\0162\031.ErrorMessage.ErrorReason\"\323\002\n\013E"
  "rrorReason\022\020\n\014custReserved\020\000\022\033\n\027initVers"
  "ionNotSupported\020\001\022\022\n\016initServerFull\020\002\022\023\n"
  "\017initAuthFailure\020\003\022\027\n\023initPlayerNameInUs"
  "e\020\004\022\031\n\025initInvalidPlayerName\020\005\022\031\n\025initSe"
  "rverMaintenance\020\006\022\017\n\013initBlocked\020\007\022\022\n\016av"
  "atarTooLarge\020\010\022\021\n\rinvalidPacket\020\t\022\020\n\014inv"
  "alidState\020\n\022\024\n\020kickedFromServer\020\013\022\024\n\020ban"
  "nedFromServer\020\014\022\023\n\017blockedByServer\020\r\022\022\n\016"
  "sessionTimeout\020\016\".\n\026AdminRemoveGameMessa"
  "ge\022\024\n\014removeGameId\030\001 \002(\r\"\305\001\n\031AdminRemove"
  "GameAckMessage\022\024\n\014removeGameId\030\001 \002(\r\022J\n\020"
  "removeGameResult\030\002 \002(\01620.AdminRemoveGame"
  "AckMessage.AdminRemoveGameResult\"F\n\025Admi"
  "nRemoveGameResult\022\026\n\022gameRemoveAccepted\020"
  "\000\022\025\n\021gameRemoveInvalid\020\001\",\n\025AdminBanPlay"
  "erMessage\022\023\n\013banPlayerId\030\001 \002(\r\"\375\001\n\030Admin"
  "BanPlayerAckMessage\022\023\n\013banPlayerId\030\001 \002(\r"
  "\022G\n\017banPlayerResult\030\002 \002(\0162..AdminBanPlay"
  "erAckMessage.AdminBanPlayerResult\"\202\001\n\024Ad"
  "minBanPlayerResult\022\025\n\021banPlayerAccepted\020"
  "\000\022\024\n\020banPlayerPending\020\001\022\021\n\rbanPlayerNoDB"
  "\020\002\022\024\n\020banPlayerDBError\020\003\022\024\n\020banPlayerInv"
  "alid\020\004\"\252\004\n\013AuthMessage\0221\n\013messageType\030\001 "
  "\002(\0162\034.AuthMessage.AuthMessageType\022;\n\030aut"
  "hClientRequestMessage\030\002 \001(\0132\031.AuthClient"
  "RequestMessage\022\?\n\032authServerChallengeMes"
  "sage\030\003 \001(\0132\033.AuthServerChallengeMessage\022"
  "=\n\031authClientResponseMessage\030\004 \001(\0132\032.Aut"
  "hClientResponseMessage\022E\n\035authServerVeri"
  "ficationMessage\030\005 \001(\0132\036.AuthServerVerifi"
  "cationMessage\022$\n\014errorMessage\030\201\010 \001(\0132\r.E"
  "rrorMessage\"\275\001\n\017AuthMessageType\022!\n\035Type_"
  "AuthClientRequestMessage\020\001\022#\n\037Type_AuthS"
  "erverChallengeMessage\020\002\022\"\n\036Type_AuthClie"
  "ntResponseMessage\020\003\022&\n\"Type_AuthServerVe"
  "rificationMessage\020\004\022\026\n\021Type_ErrorMessage"
  "\020\200\010\"\235\035\n\014LobbyMessage\0223\n\013messageType\030\001 \002("
  "\0162\036.LobbyMessage.LobbyMessageType\022)\n\017ini"
  "tDoneMessage\030\002 \001(\0132\020.InitDoneMessage\0223\n\024"
  "avatarRequestMessage\030\003 \001(\0132\025.AvatarReque"
  "stMessage\0221\n\023avatarHeaderMessage\030\004 \001(\0132\024"
  ".AvatarHeaderMessage\022-\n\021avatarDataMessag"
  "e\030\005 \001(\0132\022.AvatarDataMessage\022+\n\020avatarEnd"
  "Message\030\006 \001(\0132\021.AvatarEndMessage\0223\n\024unkn"
  "ownAvatarMessage\030\007 \001(\0132\025.UnknownAvatarMe"
  "ssage\022-\n\021playerListMessage\030\010 \001(\0132\022.Playe"
  "rListMessage\022/\n\022gameListNewMessage\030\t \001(\013"
  "2\023.GameListNewMessage\0225\n\025gameListUpdateM"
  "essage\030\n \001(\0132\026.GameListUpdateMessage\022A\n\033"
  "gameListPlayerJoinedMessage\030\013 \001(\0132\034.Game"
  "ListPlayerJoinedMessage\022=\n\031gameListPlaye"
  "rLeftMessage\030\014 \001(\0132\032.GameListPlayerLeftM"
  "essage\022G\n\036gameListSpectatorJoinedMessage"
  "\030\r \001(\0132\037.GameListSpectatorJoinedMessage\022"
  "C\n\034gameListSpectatorLeftMessage\030\016 \001(\0132\035."
  "GameListSpectatorLeftMessage\022A\n\033gameList"
  "AdminChangedMessage\030\017 \001(\0132\034.GameListAdmi"
  "nChangedMessage\022;\n\030playerInfoRequestMess"
  "age\030\020 \001(\0132\031.PlayerInfoRequestMessage\0227\n\026"
  "playerInfoReplyMessage\030\021 \001(\0132\027.PlayerInf"
  "oReplyMessage\022\?\n\032subscriptionRequestMess"
  "age\030\022 \001(\0132\033.SubscriptionRequestMessage\022;"
  "\n\030subscriptionReplyMessage\030\023 \001(\0132\031.Subsc"
  "riptionReplyMessage\022-\n\021createGameMessage"
  "\030\024 \001(\0132\022.CreateGameMessage\0229\n\027createGame"
  "FailedMessage\030\025 \001(\0132\030.CreateGameFailedMe"
  "ssage\022)\n\017joinGameMessage\030\026 \001(\0132\020.JoinGam"
  "eMessage\022-\n\021rejoinGameMessage\030\027 \001(\0132\022.Re"
  "joinGameMessage\022/\n\022joinGameAckMessage\030\030 "
  "\001(\0132\023.JoinGameAckMessage\0225\n\025joinGameFail"
  "edMessage\030\031 \001(\0132\026.JoinGameFailedMessage\022"
  "1\n\023inviteNotifyMessage\030\032 \001(\0132\024.InviteNot"
  "ifyMessage\022A\n\033rejectGameInvitationMessag"
  "e\030\033 \001(\0132\034.RejectGameInvitationMessage\0227\n"
  "\026rejectInvNotifyMessage\030\034 \001(\0132\027.RejectIn"
  "vNotifyMessage\022-\n\021statisticsMessage\030\035 \001("
  "\0132\022.StatisticsMessage\022/\n\022chatRequestMess"
  "age\030\036 \001(\0132\023.ChatRequestMessage\022!\n\013chatMe"
  "ssage\030\037 \001(\0132\014.ChatMessage\022-\n\021chatRejectM"
  "essage\030  \001(\0132\022.ChatRejectMessage\022%\n\rdial"
  "ogMessage\030! \001(\0132\016.DialogMessage\0225\n\025timeo"
  "utWarningMessage\030\" \001(\0132\026.TimeoutWarningM"
  "essage\0221\n\023resetTimeoutMessage\030# \001(\0132\024.Re"
  "setTimeoutMessage\0221\n\023reportAvatarMessage"
  "\030$ \001(\0132\024.ReportAvatarMessage\0227\n\026reportAv"
  "atarAckMessage\030% \001(\0132\027.ReportAvatarAckMe"
  "ssage\022-\n\021reportGameMessage\030& \001(\0132\022.Repor"
  "tGameMessage\0223\n\024reportGameAckMessage\030\' \001"
  "(\0132\025.ReportGameAckMessage\0227\n\026adminRemove"
  "GameMessage\030( \001(\0132\027.AdminRemoveGameMessa"
  "ge\022=\n\031adminRemoveGameAckMessage\030) \001(\0132\032."
  "AdminRemoveGameAckMessage\0225\n\025adminBanPla"
  "yerMessage\030* \001(\0132\026.AdminBanPlayerMessage"
  "\022;\n\030adminBanPlayerAckMessage\030+ \001(\0132\031.Adm"
  "inBanPlayerAckMessage\022$\n\014errorMessage\030\201\010"
  " \001(\0132\r.ErrorMessage\"\325\n\n\020LobbyMessageType"
  "\022\030\n\024Type_InitDoneMessage\020\001\022\035\n\031Type_Avata"
  "rRequestMessage\020\002\022\034\n\030Type_AvatarHeaderMe"
  "ssage\020\003\022\032\n\026Type_AvatarDataMessage\020\004\022\031\n\025T"
  "ype_AvatarEndMessage\020\005\022\035\n\031Type_UnknownAv"
  "atarMessage\020\006\022\032\n\026Type_PlayerListMessage\020"
  "\007\022\033\n\027Type_GameListNewMessage\020\010\022\036\n\032Type_G"
  "ameListUpdateMessage\020\t\022$\n Type_GameListP"
  "layerJoinedMessage\020\n\022\"\n\036Type_GameListPla"
  "yerLeftMessage\020\013\022\'\n#Type_GameListSpectat"
  "orJoinedMessage\020\014\022%\n!Type_GameListSpecta"
  "torLeftMessage\020\r\022$\n Type_GameListAdminCh"
  "angedMessage\020\016\022!\n\035Type_PlayerInfoRequest"
  "Message\020\017\022\037\n\033Type_PlayerInfoReplyMessage"
  "\020\020\022#\n\037Type_SubscriptionRequestMessage\020\021\022"
  "!\n\035Type_SubscriptionReplyMessage\020\022\022\032\n\026Ty"
  "pe_CreateGameMessage\020\023\022 \n\034Type_CreateGam"
  "eFailedMessage\020\024\022\030\n\024Type_JoinGameMessage"
  "\020\025\022\032\n\026Type_RejoinGameMessage\020\026\022\033\n\027Type_J"
  "oinGameAckMessage\020\027\022\036\n\032Type_JoinGameFail"
  "edMessage\020\030\022\034\n\030Type_InviteNotifyMessage\020"
  "\031\022$\n Type_RejectGameInvitationMessage\020\032\022"
  "\037\n\033Type_RejectInvNotifyMessage\020\033\022\032\n\026Type"
  "_StatisticsMessage\020\034\022\033\n\027Type_ChatRequest"
  "Message\020\035\022\024\n\020Type_ChatMessage\020\036\022\032\n\026Type_"
  "ChatRejectMessage\020\037\022\026\n\022Type_DialogMessag"
  "e\020 \022\036\n\032Type_TimeoutWarningMessage\020!\022\034\n\030T"
  "ype_ResetTimeoutMessage\020\"\022\034\n\030Type_Report"
  "AvatarMessage\020#\022\037\n\033Type_ReportAvatarAckM"
  "essage\020$\022\032\n\026Type_ReportGameMessage\020%\022\035\n\031"
  "Type_ReportGameAckMessage\020&\022\037\n\033Type_Admi"
  "nRemoveGameMessage\020\'\022\"\n\036Type_AdminRemove"
  "GameAckMessage\020(\022\036\n\032Type_AdminBanPlayerM"
  "essage\020)\022!\n\035Type_AdminBanPlayerAckMessag"
  "e\020*\022\026\n\021Type_ErrorMessage\020\200\010\"\360\023\n\025GameMana"
  "gementMessage\022E\n\013messageType\030\001 \002(\01620.Gam"
  "eManagementMessage.GameManagementMessage"
  "Type\0229\n\027gamePlayerJoinedMessage\030\002 \001(\0132\030."
  "GamePlayerJoinedMessage\0225\n\025gamePlayerLef"
  "tMessage\030\003 \001(\0132\026.GamePlayerLeftMessage\022\?"
  "\n\032gameSpectatorJoinedMessage\030\004 \001(\0132\033.Gam"
  "eSpectatorJoinedMessage\022;\n\030gameSpectator"
  "LeftMessage\030\005 \001(\0132\031.GameSpectatorLeftMes"
  "sage\0229\n\027gameAdminChangedMessage\030\006 \001(\0132\030."
  "GameAdminChangedMessage\0227\n\026removedFromGa"
  "meMessage\030\007 \001(\0132\027.RemovedFromGameMessage"
  "\022;\n\030kickPlayerRequestMessage\030\010 \001(\0132\031.Kic"
  "kPlayerRequestMessage\0229\n\027leaveGameReques"
  "tMessage\030\t \001(\0132\030.LeaveGameRequestMessage"
  "\022=\n\031invitePlayerToGameMessage\030\n \001(\0132\032.In"
  "vitePlayerToGameMessage\022-\n\021startEventMes"
  "sage\030\013 \001(\0132\022.StartEventMessage\0223\n\024startE"
  "ventAckMessage\030\014 \001(\0132\025.StartEventAckMess"
  "age\0229\n\027gameStartInitialMessage\030\r \001(\0132\030.G"
  "ameStartInitialMessage\0227\n\026gameStartRejoi"
  "nMessage\030\016 \001(\0132\027.GameStartRejoinMessage\022"
  "+\n\020endOfGameMessage\030\017 \001(\0132\021.EndOfGameMes"
  "sage\0227\n\026playerIdChangedMessage\030\020 \001(\0132\027.P"
  "layerIdChangedMessage\0223\n\024askKickPlayerMe"
  "ssage\030\021 \001(\0132\025.AskKickPlayerMessage\0223\n\024as"
  "kKickDeniedMessage\030\022 \001(\0132\025.AskKickDenied"
  "Message\022;\n\030startKickPetitionMessage\030\023 \001("
  "\0132\031.StartKickPetitionMessage\0227\n\026voteKick"
  "RequestMessage\030\024 \001(\0132\027.VoteKickRequestMe"
  "ssage\0223\n\024voteKickReplyMessage\030\025 \001(\0132\025.Vo"
  "teKickReplyMessage\022=\n\031kickPetitionUpdate"
  "Message\030\026 \001(\0132\032.KickPetitionUpdateMessag"
  "e\0227\n\026endKickPetitionMessage\030\027 \001(\0132\027.EndK"
  "ickPetitionMessage\022/\n\022chatRequestMessage"
  "\030\030 \001(\0132\023.ChatRequestMessage\022!\n\013chatMessa"
  "ge\030\031 \001(\0132\014.ChatMessage\022-\n\021chatRejectMess"
  "age\030\032 \001(\0132\022.ChatRejectMessage\0225\n\025timeout"
  "WarningMessage\030\033 \001(\0132\026.TimeoutWarningMes"
  "sage\0221\n\023resetTimeoutMessage\030\034 \001(\0132\024.Rese"
  "tTimeoutMessage\022$\n\014errorMessage\030\201\010 \001(\0132\r"
  ".ErrorMessage\"\226\007\n\031GameManagementMessageT"
  "ype\022 \n\034Type_GamePlayerJoinedMessage\020\001\022\036\n"
  "\032Type_GamePlayerLeftMessage\020\002\022#\n\037Type_Ga"
  "meSpectatorJoinedMessage\020\003\022!\n\035Type_GameS"
  "pectatorLeftMessage\020\004\022 \n\034Type_GameAdminC"
  "hangedMessage\020\005\022\037\n\033Type_RemovedFromGameM"
  "essage\020\006\022!\n\035Type_KickPlayerRequestMessag"
  "e\020\007\022 \n\034Type_LeaveGameRequestMessage\020\010\022\"\n"
  "\036Type_InvitePlayerToGameMessage\020\t\022\032\n\026Typ"
  "e_StartEventMessage\020\n\022\035\n\031Type_StartEvent"
  "AckMessage\020\013\022 \n\034Type_GameStartInitialMes"
  "sage\020\014\022\037\n\033Type_GameStartRejoinMessage\020\r\022"
  "\031\n\025Type_EndOfGameMessage\020\016\022\037\n\033Type_Playe"
  "rIdChangedMessage\020\017\022\035\n\031Type_AskKickPlaye"
  "rMessage\020\020\022\035\n\031Type_AskKickDeniedMessage\020"
  "\021\022!\n\035Type_StartKickPetitionMessage\020\022\022\037\n\033"
  "Type_VoteKickRequestMessage\020\023\022\035\n\031Type_Vo"
  "teKickReplyMessage\020\024\022\"\n\036Type_KickPetitio"
  "nUpdateMessage\020\025\022\037\n\033Type_EndKickPetition"
  "Message\020\026\022\033\n\027Type_ChatRequestMessage\020\027\022\024"
  "\n\020Type_ChatMessage\020\030\022\032\n\026Type_ChatRejectM"
  "essage\020\031\022\036\n\032Type_TimeoutWarningMessage\020\032"
  "\022\034\n\030Type_ResetTimeoutMessage\020\033\022\026\n\021Type_E"
  "rrorMessage\020\200\010\"\373\t\n\021GameEngineMessage\022=\n\013"
  "messageType\030\001 \002(\0162(.GameEngineMessage.Ga"
  "meEngineMessageType\022+\n\020handStartMessage\030"
  "\002 \001(\0132\021.HandStartMessage\022/\n\022playersTurnM"
  "essage\030\003 \001(\0132\023.PlayersTurnMessage\0227\n\026myA"
  "ctionRequestMessage\030\004 \001(\0132\027.MyActionRequ"
  "estMessage\022=\n\031yourActionRejectedMessage\030"
  "\005 \001(\0132\032.YourActionRejectedMessage\022;\n\030pla"
  "yersActionDoneMessage\030\006 \001(\0132\031.PlayersAct"
  "ionDoneMessage\0223\n\024dealFlopCardsMessage\030\007"
  " \001(\0132\025.DealFlopCardsMessage\0221\n\023dealTurnC"
  "ardMessage\030\010 \001(\0132\024.DealTurnCardMessage\0223"
  "\n\024dealRiverCardMessage\030\t \001(\0132\025.DealRiver"
  "CardMessage\0225\n\025allInShowCardsMessage\030\n \001"
  "(\0132\026.AllInShowCardsMessage\022=\n\031endOfHandS"
  "howCardsMessage\030\013 \001(\0132\032.EndOfHandShowCar"
  "dsMessage\022=\n\031endOfHandHideCardsMessage\030\014"
  " \001(\0132\032.EndOfHandHideCardsMessage\022=\n\031show"
  "MyCardsRequestMessage\030\r \001(\0132\032.ShowMyCard"
  "sRequestMessage\022=\n\031afterHandShowCardsMes"
  "sage\030\016 \001(\0132\032.AfterHandShowCardsMessage\"\303"
  "\003\n\025GameEngineMessageType\022\031\n\025Type_HandSta"
  "rtMessage\020\001\022\033\n\027Type_PlayersTurnMessage\020\002"
  "\022\037\n\033Type_MyActionRequestMessage\020\003\022\"\n\036Typ"
  "e_YourActionRejectedMessage\020\004\022!\n\035Type_Pl"
  "ayersActionDoneMessage\020\005\022\035\n\031Type_DealFlo"
  "pCardsMessage\020\006\022\034\n\030Type_DealTurnCardMess"
  "age\020\007\022\035\n\031Type_DealRiverCardMessage\020\010\022\036\n\032"
  "Type_AllInShowCardsMessage\020\t\022\"\n\036Type_End"
  "OfHandShowCardsMessage\020\n\022\"\n\036Type_EndOfHa"
  "ndHideCardsMessage\020\013\022\"\n\036Type_ShowMyCards"
  "RequestMessage\020\014\022\"\n\036Type_AfterHandShowCa"
  "rdsMessage\020\r\"\205\002\n\013GameMessage\0221\n\013messageT"
  "ype\030\001 \002(\0162\034.GameMessage.GameMessageType\022"
  "\016\n\006gameId\030\002 \002(\r\0225\n\025gameManagementMessage"
  "\030\003 \001(\0132\026.GameManagementMessage\022-\n\021gameEn"
  "gineMessage\030\004 \001(\0132\022.GameEngineMessage\"M\n"
  "\017GameMessageType\022\036\n\032Type_GameManagementM"
  "essage\020\001\022\032\n\026Type_GameEngineMessage\020\002\"\322\002\n"
  "\016PokerTHMessage\0227\n\013messageType\030\001 \002(\0162\".P"
  "okerTHMessage.PokerTHMessageType\022)\n\017anno"
  "unceMessage\030\002 \001(\0132\020.AnnounceMessage\022!\n\013a"
  "uthMessage\030\003 \001(\0132\014.AuthMessage\022#\n\014lobbyM"
  "essage\030\004 \001(\0132\r.LobbyMessage\022!\n\013gameMessa"
  "ge\030\005 \001(\0132\014.GameMessage\"q\n\022PokerTHMessage"
  "Type\022\030\n\024Type_AnnounceMessage\020\001\022\024\n\020Type_A"
  "uthMessage\020\002\022\025\n\021Type_LobbyMessage\020\003\022\024\n\020T"
  "ype_GameMessage\020\004*H\n\013NetGameMode\022\022\n\016netG"
  "ameCreated\020\001\022\022\n\016netGameStarted\020\002\022\021\n\rnetG"
  "ameClosed\020\003*\226\001\n\014NetGameState\022\023\n\017netState"
  "Preflop\020\000\022\020\n\014netStateFlop\020\001\022\020\n\014netStateT"
  "urn\020\002\022\021\n\rnetStateRiver\020\003\022\035\n\031netStatePref"
  "lopSmallBlind\020\004\022\033\n\027netStatePreflopBigBli"
  "nd\020\005*\230\001\n\017NetPlayerAction\022\021\n\rnetActionNon"
  "e\020\000\022\021\n\rnetActionFold\020\001\022\022\n\016netActionCheck"
  "\020\002\022\021\n\rnetActionCall\020\003\022\020\n\014netActionBet\020\004\022"
  "\022\n\016netActionRaise\020\005\022\022\n\016netActionAllIn\020\006*"
  "h\n\016NetPlayerState\022\030\n\024netPlayerStateNorma"
  "l\020\000\022!\n\035netPlayerStateSessionInactive\020\001\022\031"
  "\n\025netPlayerStateNoMoney\020\002*d\n\023NetPlayerIn"
  "foRights\022\030\n\024netPlayerRightsGuest\020\001\022\031\n\025ne"
  "tPlayerRightsNormal\020\002\022\030\n\024netPlayerRights"
  "Admin\020\003*T\n\rNetAvatarType\022\025\n\021netAvatarIma"
  "gePng\020\001\022\025\n\021netAvatarImageJpg\020\002\022\025\n\021netAva"
  "tarImageGif\020\003B\037\n\023de.pokerth.protocolB\010Pr"
  "otoBuf"
  ;
static ::_pbi::once_flag descriptor_table_pokerth_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pokerth_2eproto = {
    false, false, 21006, descriptor_table_protodef_pokerth_2eproto,
    "pokerth.proto",
    &descriptor_table_pokerth_2eproto_once, nullptr, 0, 98,
    schemas, file_default_instances, TableStruct_pokerth_2eproto::offsets,
    file_level_metadata_pokerth_2eproto, file_level_enum_descriptors_pokerth_2eproto,
    file_level_service_descriptors_pokerth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pokerth_2eproto_getter() {
  return &descriptor_table_pokerth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pokerth_2eproto(&descriptor_table_pokerth_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetGameInfo_NetGameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[0];
}
bool NetGameInfo_NetGameType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetGameInfo_NetGameType NetGameInfo::normalGame;
constexpr NetGameInfo_NetGameType NetGameInfo::registeredOnlyGame;
constexpr NetGameInfo_NetGameType NetGameInfo::inviteOnlyGame;
constexpr NetGameInfo_NetGameType NetGameInfo::rankingGame;
constexpr NetGameInfo_NetGameType NetGameInfo::NetGameType_MIN;
constexpr NetGameInfo_NetGameType NetGameInfo::NetGameType_MAX;
constexpr int NetGameInfo::NetGameType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetGameInfo_RaiseIntervalMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[1];
}
bool NetGameInfo_RaiseIntervalMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnHandNum;
constexpr NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnMinutes;
constexpr NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MIN;
constexpr NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MAX;
constexpr int NetGameInfo::RaiseIntervalMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetGameInfo_EndRaiseMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[2];
}
bool NetGameInfo_EndRaiseMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetGameInfo_EndRaiseMode NetGameInfo::doubleBlinds;
constexpr NetGameInfo_EndRaiseMode NetGameInfo::raiseByEndValue;
constexpr NetGameInfo_EndRaiseMode NetGameInfo::keepLastBlind;
constexpr NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MIN;
constexpr NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MAX;
constexpr int NetGameInfo::EndRaiseMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnnounceMessage_ServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[3];
}
bool AnnounceMessage_ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AnnounceMessage_ServerType AnnounceMessage::serverTypeLAN;
constexpr AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetNoAuth;
constexpr AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetAuth;
constexpr AnnounceMessage_ServerType AnnounceMessage::ServerType_MIN;
constexpr AnnounceMessage_ServerType AnnounceMessage::ServerType_MAX;
constexpr int AnnounceMessage::ServerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthClientRequestMessage_LoginType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[4];
}
bool AuthClientRequestMessage_LoginType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::guestLogin;
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::authenticatedLogin;
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::unauthenticatedLogin;
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::LoginType_MIN;
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::LoginType_MAX;
constexpr int AuthClientRequestMessage::LoginType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerListMessage_PlayerListNotification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[5];
}
bool PlayerListMessage_PlayerListNotification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PlayerListMessage_PlayerListNotification PlayerListMessage::playerListNew;
constexpr PlayerListMessage_PlayerListNotification PlayerListMessage::playerListLeft;
constexpr PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MIN;
constexpr PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MAX;
constexpr int PlayerListMessage::PlayerListNotification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionRequestMessage_SubscriptionAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[6];
}
bool SubscriptionRequestMessage_SubscriptionAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::unsubscribeGameList;
constexpr SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::resubscribeGameList;
constexpr SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MIN;
constexpr SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MAX;
constexpr int SubscriptionRequestMessage::SubscriptionAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateGameFailedMessage_CreateGameFailureReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[7];
}
bool CreateGameFailedMessage_CreateGameFailureReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::notAllowedAsGuest;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::gameNameInUse;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::badGameName;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::invalidSettings;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::CreateGameFailureReason_MIN;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::CreateGameFailureReason_MAX;
constexpr int CreateGameFailedMessage::CreateGameFailureReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinGameFailedMessage_JoinGameFailureReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[8];
}
bool JoinGameFailedMessage_JoinGameFailureReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidGame;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsFull;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsRunning;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notAllowedAsGuest;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidPassword;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notInvited;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::ipAddressBlocked;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::rejoinFailed;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::noSpectatorsAllowed;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MIN;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MAX;
constexpr int JoinGameFailedMessage::JoinGameFailureReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GamePlayerLeftMessage_GamePlayerLeftReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[9];
}
bool GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftOnRequest;
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftKicked;
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftError;
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MIN;
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MAX;
constexpr int GamePlayerLeftMessage::GamePlayerLeftReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemovedFromGameMessage_RemovedFromGameReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[10];
}
bool RemovedFromGameMessage_RemovedFromGameReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedOnRequest;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::kickedFromGame;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsFull;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsRunning;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameTimeout;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedStartFailed;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameClosed;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MIN;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MAX;
constexpr int RemovedFromGameMessage::RemovedFromGameReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RejectGameInvitationMessage_RejectGameInvReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[11];
}
bool RejectGameInvitationMessage_RejectGameInvReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonNo;
constexpr RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonBusy;
constexpr RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MIN;
constexpr RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MAX;
constexpr int RejectGameInvitationMessage::RejectGameInvReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StartEventMessage_StartEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[12];
}
bool StartEventMessage_StartEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StartEventMessage_StartEventType StartEventMessage::startEvent;
constexpr StartEventMessage_StartEventType StartEventMessage::rejoinEvent;
constexpr StartEventMessage_StartEventType StartEventMessage::StartEventType_MIN;
constexpr StartEventMessage_StartEventType StartEventMessage::StartEventType_MAX;
constexpr int StartEventMessage::StartEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* YourActionRejectedMessage_RejectionReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[13];
}
bool YourActionRejectedMessage_RejectionReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedInvalidGameState;
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedNotYourTurn;
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedActionNotAllowed;
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MIN;
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MAX;
constexpr int YourActionRejectedMessage::RejectionReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AskKickDeniedMessage_KickDeniedReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[14];
}
bool AskKickDeniedMessage_KickDeniedReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidGameState;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedNotPossible;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedTryAgainLater;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedAlreadyInProgress;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidPlayerId;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MIN;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MAX;
constexpr int AskKickDeniedMessage::KickDeniedReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoteKickReplyMessage_VoteKickReplyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[15];
}
bool VoteKickReplyMessage_VoteKickReplyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickAck;
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedInvalid;
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedAlreadyVoted;
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MIN;
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MAX;
constexpr int VoteKickReplyMessage::VoteKickReplyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EndKickPetitionMessage_PetitionEndReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[16];
}
bool EndKickPetitionMessage_PetitionEndReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndEnoughVotes;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTooFewPlayers;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndPlayerLeft;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTimeout;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MIN;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MAX;
constexpr int EndKickPetitionMessage::PetitionEndReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatisticsMessage_StatisticsData_StatisticsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[17];
}
bool StatisticsMessage_StatisticsData_StatisticsType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::statNumberOfPlayers;
constexpr StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MIN;
constexpr StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MAX;
constexpr int StatisticsMessage_StatisticsData::StatisticsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatMessage_ChatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[18];
}
bool ChatMessage_ChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChatMessage_ChatType ChatMessage::chatTypeStandard;
constexpr ChatMessage_ChatType ChatMessage::chatTypeBot;
constexpr ChatMessage_ChatType ChatMessage::chatTypeBroadcast;
constexpr ChatMessage_ChatType ChatMessage::chatTypePrivate;
constexpr ChatMessage_ChatType ChatMessage::ChatType_MIN;
constexpr ChatMessage_ChatType ChatMessage::ChatType_MAX;
constexpr int ChatMessage::ChatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeoutWarningMessage_TimeoutReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[19];
}
bool TimeoutWarningMessage_TimeoutReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutNoDataReceived;
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutInactiveGame;
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutKickAfterAutofold;
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MIN;
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MAX;
constexpr int TimeoutWarningMessage::TimeoutReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReportAvatarAckMessage_ReportAvatarResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[20];
}
bool ReportAvatarAckMessage_ReportAvatarResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportAccepted;
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportDuplicate;
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportInvalid;
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MIN;
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MAX;
constexpr int ReportAvatarAckMessage::ReportAvatarResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReportGameAckMessage_ReportGameResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[21];
}
bool ReportGameAckMessage_ReportGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportAccepted;
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportDuplicate;
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportInvalid;
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MIN;
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MAX;
constexpr int ReportGameAckMessage::ReportGameResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorMessage_ErrorReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[22];
}
bool ErrorMessage_ErrorReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ErrorMessage_ErrorReason ErrorMessage::custReserved;
constexpr ErrorMessage_ErrorReason ErrorMessage::initVersionNotSupported;
constexpr ErrorMessage_ErrorReason ErrorMessage::initServerFull;
constexpr ErrorMessage_ErrorReason ErrorMessage::initAuthFailure;
constexpr ErrorMessage_ErrorReason ErrorMessage::initPlayerNameInUse;
constexpr ErrorMessage_ErrorReason ErrorMessage::initInvalidPlayerName;
constexpr ErrorMessage_ErrorReason ErrorMessage::initServerMaintenance;
constexpr ErrorMessage_ErrorReason ErrorMessage::initBlocked;
constexpr ErrorMessage_ErrorReason ErrorMessage::avatarTooLarge;
constexpr ErrorMessage_ErrorReason ErrorMessage::invalidPacket;
constexpr ErrorMessage_ErrorReason ErrorMessage::invalidState;
constexpr ErrorMessage_ErrorReason ErrorMessage::kickedFromServer;
constexpr ErrorMessage_ErrorReason ErrorMessage::bannedFromServer;
constexpr ErrorMessage_ErrorReason ErrorMessage::blockedByServer;
constexpr ErrorMessage_ErrorReason ErrorMessage::sessionTimeout;
constexpr ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MIN;
constexpr ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MAX;
constexpr int ErrorMessage::ErrorReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdminRemoveGameAckMessage_AdminRemoveGameResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[23];
}
bool AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::gameRemoveAccepted;
constexpr AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::gameRemoveInvalid;
constexpr AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::AdminRemoveGameResult_MIN;
constexpr AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::AdminRemoveGameResult_MAX;
constexpr int AdminRemoveGameAckMessage::AdminRemoveGameResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdminBanPlayerAckMessage_AdminBanPlayerResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[24];
}
bool AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerAccepted;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerPending;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerNoDB;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerDBError;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerInvalid;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::AdminBanPlayerResult_MIN;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::AdminBanPlayerResult_MAX;
constexpr int AdminBanPlayerAckMessage::AdminBanPlayerResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthMessage_AuthMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[25];
}
bool AuthMessage_AuthMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 1024:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AuthMessage_AuthMessageType AuthMessage::Type_AuthClientRequestMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::Type_AuthServerChallengeMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::Type_AuthClientResponseMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::Type_AuthServerVerificationMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::Type_ErrorMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::AuthMessageType_MIN;
constexpr AuthMessage_AuthMessageType AuthMessage::AuthMessageType_MAX;
constexpr int AuthMessage::AuthMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobbyMessage_LobbyMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[26];
}
bool LobbyMessage_LobbyMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 1024:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_InitDoneMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AvatarRequestMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AvatarHeaderMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AvatarDataMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AvatarEndMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_UnknownAvatarMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_PlayerListMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListNewMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListUpdateMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListPlayerJoinedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListPlayerLeftMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListSpectatorJoinedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListSpectatorLeftMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListAdminChangedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_PlayerInfoRequestMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_PlayerInfoReplyMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_SubscriptionRequestMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_SubscriptionReplyMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_CreateGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_CreateGameFailedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_JoinGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_RejoinGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_JoinGameAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_JoinGameFailedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_InviteNotifyMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_RejectGameInvitationMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_RejectInvNotifyMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_StatisticsMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ChatRequestMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ChatMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ChatRejectMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_DialogMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_TimeoutWarningMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ResetTimeoutMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ReportAvatarMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ReportAvatarAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ReportGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ReportGameAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AdminRemoveGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AdminRemoveGameAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AdminBanPlayerMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AdminBanPlayerAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ErrorMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::LobbyMessageType_MIN;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::LobbyMessageType_MAX;
constexpr int LobbyMessage::LobbyMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameManagementMessage_GameManagementMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[27];
}
bool GameManagementMessage_GameManagementMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 1024:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GamePlayerJoinedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GamePlayerLeftMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameSpectatorJoinedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameSpectatorLeftMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameAdminChangedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_RemovedFromGameMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_KickPlayerRequestMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_LeaveGameRequestMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_InvitePlayerToGameMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_StartEventMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_StartEventAckMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameStartInitialMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameStartRejoinMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_EndOfGameMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_PlayerIdChangedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_AskKickPlayerMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_AskKickDeniedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_StartKickPetitionMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_VoteKickRequestMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_VoteKickReplyMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_KickPetitionUpdateMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_EndKickPetitionMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ChatRequestMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ChatMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ChatRejectMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_TimeoutWarningMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ResetTimeoutMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ErrorMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::GameManagementMessageType_MIN;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::GameManagementMessageType_MAX;
constexpr int GameManagementMessage::GameManagementMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameEngineMessage_GameEngineMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[28];
}
bool GameEngineMessage_GameEngineMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_HandStartMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_PlayersTurnMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_MyActionRequestMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_YourActionRejectedMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_PlayersActionDoneMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_DealFlopCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_DealTurnCardMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_DealRiverCardMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_AllInShowCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_EndOfHandShowCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_EndOfHandHideCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_ShowMyCardsRequestMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_AfterHandShowCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::GameEngineMessageType_MIN;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::GameEngineMessageType_MAX;
constexpr int GameEngineMessage::GameEngineMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameMessage_GameMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[29];
}
bool GameMessage_GameMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GameMessage_GameMessageType GameMessage::Type_GameManagementMessage;
constexpr GameMessage_GameMessageType GameMessage::Type_GameEngineMessage;
constexpr GameMessage_GameMessageType GameMessage::GameMessageType_MIN;
constexpr GameMessage_GameMessageType GameMessage::GameMessageType_MAX;
constexpr int GameMessage::GameMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PokerTHMessage_PokerTHMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[30];
}
bool PokerTHMessage_PokerTHMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AnnounceMessage;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthMessage;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_LobbyMessage;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameMessage;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MIN;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MAX;
constexpr int PokerTHMessage::PokerTHMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetGameMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[31];
}
bool NetGameMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetGameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[32];
}
bool NetGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetPlayerAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[33];
}
bool NetPlayerAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetPlayerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[34];
}
bool NetPlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetPlayerInfoRights_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[35];
}
bool NetPlayerInfoRights_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetAvatarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pokerth_2eproto);
  return file_level_enum_descriptors_pokerth_2eproto[36];
}
bool NetAvatarType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NetGameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NetGameInfo>()._impl_._has_bits_);
  static void set_has_gamename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_netgametype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_maxnumplayers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_raiseintervalmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_raiseeveryhands(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_raiseeveryminutes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_endraisemode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_endraisesmallblindvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_proposedguispeed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_delaybetweenhands(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_playeractiontimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_firstsmallblind(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_startmoney(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_allowspectators(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001fe3) ^ 0x00001fe3) != 0;
  }
};

NetGameInfo::NetGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NetGameInfo)
}
NetGameInfo::NetGameInfo(const NetGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetGameInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manualblinds_){from._impl_.manualblinds_}
    , /*decltype(_impl_._manualblinds_cached_byte_size_)*/{0}
    , decltype(_impl_.gamename_){}
    , decltype(_impl_.maxnumplayers_){}
    , decltype(_impl_.raiseeveryhands_){}
    , decltype(_impl_.raiseeveryminutes_){}
    , decltype(_impl_.endraisesmallblindvalue_){}
    , decltype(_impl_.proposedguispeed_){}
    , decltype(_impl_.delaybetweenhands_){}
    , decltype(_impl_.playeractiontimeout_){}
    , decltype(_impl_.firstsmallblind_){}
    , decltype(_impl_.startmoney_){}
    , decltype(_impl_.netgametype_){}
    , decltype(_impl_.raiseintervalmode_){}
    , decltype(_impl_.endraisemode_){}
    , decltype(_impl_.allowspectators_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gamename()) {
    _this->_impl_.gamename_.Set(from._internal_gamename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.maxnumplayers_, &from._impl_.maxnumplayers_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allowspectators_) -
    reinterpret_cast<char*>(&_impl_.maxnumplayers_)) + sizeof(_impl_.allowspectators_));
  // @@protoc_insertion_point(copy_constructor:NetGameInfo)
}

inline void NetGameInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manualblinds_){arena}
    , /*decltype(_impl_._manualblinds_cached_byte_size_)*/{0}
    , decltype(_impl_.gamename_){}
    , decltype(_impl_.maxnumplayers_){0u}
    , decltype(_impl_.raiseeveryhands_){0u}
    , decltype(_impl_.raiseeveryminutes_){0u}
    , decltype(_impl_.endraisesmallblindvalue_){0u}
    , decltype(_impl_.proposedguispeed_){0u}
    , decltype(_impl_.delaybetweenhands_){0u}
    , decltype(_impl_.playeractiontimeout_){0u}
    , decltype(_impl_.firstsmallblind_){0u}
    , decltype(_impl_.startmoney_){0u}
    , decltype(_impl_.netgametype_){1}
    , decltype(_impl_.raiseintervalmode_){1}
    , decltype(_impl_.endraisemode_){1}
    , decltype(_impl_.allowspectators_){true}
  };
  _impl_.gamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetGameInfo::~NetGameInfo() {
  // @@protoc_insertion_point(destructor:NetGameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.manualblinds_.~RepeatedField();
  _impl_.gamename_.Destroy();
}

void NetGameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetGameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.manualblinds_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.gamename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.maxnumplayers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playeractiontimeout_) -
        reinterpret_cast<char*>(&_impl_.maxnumplayers_)) + sizeof(_impl_.playeractiontimeout_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.firstsmallblind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.startmoney_) -
        reinterpret_cast<char*>(&_impl_.firstsmallblind_)) + sizeof(_impl_.startmoney_));
    _impl_.netgametype_ = 1;
    _impl_.raiseintervalmode_ = 1;
    _impl_.endraisemode_ = 1;
    _impl_.allowspectators_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetGameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string gameName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gamename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "NetGameInfo.gameName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .NetGameInfo.NetGameType netGameType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameInfo_NetGameType_IsValid(val))) {
            _internal_set_netgametype(static_cast<::NetGameInfo_NetGameType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 maxNumPlayers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_maxnumplayers(&has_bits);
          _impl_.maxnumplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameInfo_RaiseIntervalMode_IsValid(val))) {
            _internal_set_raiseintervalmode(static_cast<::NetGameInfo_RaiseIntervalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raiseEveryHands = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_raiseeveryhands(&has_bits);
          _impl_.raiseeveryhands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raiseEveryMinutes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_raiseeveryminutes(&has_bits);
          _impl_.raiseeveryminutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameInfo_EndRaiseMode_IsValid(val))) {
            _internal_set_endraisemode(static_cast<::NetGameInfo_EndRaiseMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 endRaiseSmallBlindValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_endraisesmallblindvalue(&has_bits);
          _impl_.endraisesmallblindvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 proposedGuiSpeed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_proposedguispeed(&has_bits);
          _impl_.proposedguispeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 delayBetweenHands = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_delaybetweenhands(&has_bits);
          _impl_.delaybetweenhands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerActionTimeout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_playeractiontimeout(&has_bits);
          _impl_.playeractiontimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 firstSmallBlind = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_firstsmallblind(&has_bits);
          _impl_.firstsmallblind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 startMoney = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_startmoney(&has_bits);
          _impl_.startmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 manualBlinds = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_manualblinds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_manualblinds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allowSpectators = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_allowspectators(&has_bits);
          _impl_.allowspectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetGameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetGameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string gameName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamename().data(), static_cast<int>(this->_internal_gamename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NetGameInfo.gameName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gamename(), target);
  }

  // required .NetGameInfo.NetGameType netGameType = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_netgametype(), target);
  }

  // required uint32 maxNumPlayers = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxnumplayers(), target);
  }

  // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_raiseintervalmode(), target);
  }

  // optional uint32 raiseEveryHands = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_raiseeveryhands(), target);
  }

  // optional uint32 raiseEveryMinutes = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_raiseeveryminutes(), target);
  }

  // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_endraisemode(), target);
  }

  // optional uint32 endRaiseSmallBlindValue = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_endraisesmallblindvalue(), target);
  }

  // required uint32 proposedGuiSpeed = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_proposedguispeed(), target);
  }

  // required uint32 delayBetweenHands = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_delaybetweenhands(), target);
  }

  // required uint32 playerActionTimeout = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_playeractiontimeout(), target);
  }

  // required uint32 firstSmallBlind = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_firstsmallblind(), target);
  }

  // required uint32 startMoney = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_startmoney(), target);
  }

  // repeated uint32 manualBlinds = 14 [packed = true];
  {
    int byte_size = _impl_._manualblinds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_manualblinds(), byte_size, target);
    }
  }

  // optional bool allowSpectators = 15 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_allowspectators(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetGameInfo)
  return target;
}

size_t NetGameInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NetGameInfo)
  size_t total_size = 0;

  if (_internal_has_gamename()) {
    // required string gameName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamename());
  }

  if (_internal_has_maxnumplayers()) {
    // required uint32 maxNumPlayers = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxnumplayers());
  }

  if (_internal_has_proposedguispeed()) {
    // required uint32 proposedGuiSpeed = 9;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proposedguispeed());
  }

  if (_internal_has_delaybetweenhands()) {
    // required uint32 delayBetweenHands = 10;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_delaybetweenhands());
  }

  if (_internal_has_playeractiontimeout()) {
    // required uint32 playerActionTimeout = 11;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playeractiontimeout());
  }

  if (_internal_has_firstsmallblind()) {
    // required uint32 firstSmallBlind = 12;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_firstsmallblind());
  }

  if (_internal_has_startmoney()) {
    // required uint32 startMoney = 13;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_startmoney());
  }

  if (_internal_has_netgametype()) {
    // required .NetGameInfo.NetGameType netGameType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_netgametype());
  }

  if (_internal_has_raiseintervalmode()) {
    // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_raiseintervalmode());
  }

  if (_internal_has_endraisemode()) {
    // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_endraisemode());
  }

  return total_size;
}
size_t NetGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetGameInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00001fe3) ^ 0x00001fe3) == 0) {  // All required fields are present.
    // required string gameName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamename());

    // required uint32 maxNumPlayers = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxnumplayers());

    // required uint32 proposedGuiSpeed = 9;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proposedguispeed());

    // required uint32 delayBetweenHands = 10;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_delaybetweenhands());

    // required uint32 playerActionTimeout = 11;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playeractiontimeout());

    // required uint32 firstSmallBlind = 12;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_firstsmallblind());

    // required uint32 startMoney = 13;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_startmoney());

    // required .NetGameInfo.NetGameType netGameType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_netgametype());

    // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_raiseintervalmode());

    // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_endraisemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 manualBlinds = 14 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.manualblinds_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._manualblinds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 raiseEveryHands = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_raiseeveryhands());
    }

    // optional uint32 raiseEveryMinutes = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_raiseeveryminutes());
    }

    // optional uint32 endRaiseSmallBlindValue = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_endraisesmallblindvalue());
    }

  }
  // optional bool allowSpectators = 15 [default = true];
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetGameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetGameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetGameInfo::GetClassData() const { return &_class_data_; }


void NetGameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetGameInfo*>(&to_msg);
  auto& from = static_cast<const NetGameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NetGameInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.manualblinds_.MergeFrom(from._impl_.manualblinds_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_gamename(from._internal_gamename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.maxnumplayers_ = from._impl_.maxnumplayers_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.raiseeveryhands_ = from._impl_.raiseeveryhands_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.raiseeveryminutes_ = from._impl_.raiseeveryminutes_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.endraisesmallblindvalue_ = from._impl_.endraisesmallblindvalue_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.proposedguispeed_ = from._impl_.proposedguispeed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.delaybetweenhands_ = from._impl_.delaybetweenhands_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.playeractiontimeout_ = from._impl_.playeractiontimeout_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.firstsmallblind_ = from._impl_.firstsmallblind_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.startmoney_ = from._impl_.startmoney_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.netgametype_ = from._impl_.netgametype_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.raiseintervalmode_ = from._impl_.raiseintervalmode_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.endraisemode_ = from._impl_.endraisemode_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.allowspectators_ = from._impl_.allowspectators_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetGameInfo::CopyFrom(const NetGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetGameInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void NetGameInfo::InternalSwap(NetGameInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.manualblinds_.InternalSwap(&other->_impl_.manualblinds_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamename_, lhs_arena,
      &other->_impl_.gamename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetGameInfo, _impl_.startmoney_)
      + sizeof(NetGameInfo::_impl_.startmoney_)
      - PROTOBUF_FIELD_OFFSET(NetGameInfo, _impl_.maxnumplayers_)>(
          reinterpret_cast<char*>(&_impl_.maxnumplayers_),
          reinterpret_cast<char*>(&other->_impl_.maxnumplayers_));
  swap(_impl_.netgametype_, other->_impl_.netgametype_);
  swap(_impl_.raiseintervalmode_, other->_impl_.raiseintervalmode_);
  swap(_impl_.endraisemode_, other->_impl_.endraisemode_);
  swap(_impl_.allowspectators_, other->_impl_.allowspectators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetGameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[0]);
}

// ===================================================================

class PlayerResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerResult>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resultcard1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resultcard2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_moneywon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playermoney(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cardsvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

PlayerResult::PlayerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerResult)
}
PlayerResult::PlayerResult(const PlayerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.besthandposition_){from._impl_.besthandposition_}
    , /*decltype(_impl_._besthandposition_cached_byte_size_)*/{0}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.resultcard1_){}
    , decltype(_impl_.resultcard2_){}
    , decltype(_impl_.moneywon_){}
    , decltype(_impl_.playermoney_){}
    , decltype(_impl_.cardsvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cardsvalue_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.cardsvalue_));
  // @@protoc_insertion_point(copy_constructor:PlayerResult)
}

inline void PlayerResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.besthandposition_){arena}
    , /*decltype(_impl_._besthandposition_cached_byte_size_)*/{0}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.resultcard1_){0u}
    , decltype(_impl_.resultcard2_){0u}
    , decltype(_impl_.moneywon_){0u}
    , decltype(_impl_.playermoney_){0u}
    , decltype(_impl_.cardsvalue_){0u}
  };
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:PlayerResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.besthandposition_.~RepeatedField();
}

void PlayerResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.besthandposition_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cardsvalue_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.cardsvalue_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 resultCard1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_resultcard1(&has_bits);
          _impl_.resultcard1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 resultCard2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_resultcard2(&has_bits);
          _impl_.resultcard2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 bestHandPosition = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_besthandposition(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_besthandposition(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 moneyWon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_moneywon(&has_bits);
          _impl_.moneywon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerMoney = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_playermoney(&has_bits);
          _impl_.playermoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cardsValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cardsvalue(&has_bits);
          _impl_.cardsvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required uint32 resultCard1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_resultcard1(), target);
  }

  // required uint32 resultCard2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_resultcard2(), target);
  }

  // repeated uint32 bestHandPosition = 4 [packed = true];
  {
    int byte_size = _impl_._besthandposition_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_besthandposition(), byte_size, target);
    }
  }

  // required uint32 moneyWon = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_moneywon(), target);
  }

  // required uint32 playerMoney = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_playermoney(), target);
  }

  // optional uint32 cardsValue = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cardsvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerResult)
  return target;
}

size_t PlayerResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerResult)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_resultcard1()) {
    // required uint32 resultCard1 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resultcard1());
  }

  if (_internal_has_resultcard2()) {
    // required uint32 resultCard2 = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resultcard2());
  }

  if (_internal_has_moneywon()) {
    // required uint32 moneyWon = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moneywon());
  }

  if (_internal_has_playermoney()) {
    // required uint32 playerMoney = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playermoney());
  }

  return total_size;
}
size_t PlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerResult)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required uint32 resultCard1 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resultcard1());

    // required uint32 resultCard2 = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resultcard2());

    // required uint32 moneyWon = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moneywon());

    // required uint32 playerMoney = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 bestHandPosition = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.besthandposition_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._besthandposition_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 cardsValue = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cardsvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerResult::GetClassData() const { return &_class_data_; }


void PlayerResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerResult*>(&to_msg);
  auto& from = static_cast<const PlayerResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.besthandposition_.MergeFrom(from._impl_.besthandposition_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.resultcard1_ = from._impl_.resultcard1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.resultcard2_ = from._impl_.resultcard2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.moneywon_ = from._impl_.moneywon_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.playermoney_ = from._impl_.playermoney_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cardsvalue_ = from._impl_.cardsvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PlayerResult::InternalSwap(PlayerResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.besthandposition_.InternalSwap(&other->_impl_.besthandposition_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.cardsvalue_)
      + sizeof(PlayerResult::_impl_.cardsvalue_)
      - PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[1]);
}

// ===================================================================

class AnnounceMessage_Version::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnounceMessage_Version>()._impl_._has_bits_);
  static void set_has_majorversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minorversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AnnounceMessage_Version::AnnounceMessage_Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AnnounceMessage.Version)
}
AnnounceMessage_Version::AnnounceMessage_Version(const AnnounceMessage_Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnnounceMessage_Version* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.majorversion_){}
    , decltype(_impl_.minorversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.majorversion_, &from._impl_.majorversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minorversion_) -
    reinterpret_cast<char*>(&_impl_.majorversion_)) + sizeof(_impl_.minorversion_));
  // @@protoc_insertion_point(copy_constructor:AnnounceMessage.Version)
}

inline void AnnounceMessage_Version::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.majorversion_){0u}
    , decltype(_impl_.minorversion_){0u}
  };
}

AnnounceMessage_Version::~AnnounceMessage_Version() {
  // @@protoc_insertion_point(destructor:AnnounceMessage.Version)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnounceMessage_Version::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnnounceMessage_Version::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnounceMessage_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:AnnounceMessage.Version)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.majorversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.minorversion_) -
        reinterpret_cast<char*>(&_impl_.majorversion_)) + sizeof(_impl_.minorversion_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnounceMessage_Version::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 majorVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_majorversion(&has_bits);
          _impl_.majorversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 minorVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_minorversion(&has_bits);
          _impl_.minorversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnounceMessage_Version::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnnounceMessage.Version)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 majorVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_majorversion(), target);
  }

  // required uint32 minorVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minorversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnnounceMessage.Version)
  return target;
}

size_t AnnounceMessage_Version::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnnounceMessage.Version)
  size_t total_size = 0;

  if (_internal_has_majorversion()) {
    // required uint32 majorVersion = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_majorversion());
  }

  if (_internal_has_minorversion()) {
    // required uint32 minorVersion = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minorversion());
  }

  return total_size;
}
size_t AnnounceMessage_Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnnounceMessage.Version)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 majorVersion = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_majorversion());

    // required uint32 minorVersion = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minorversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnounceMessage_Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnnounceMessage_Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnounceMessage_Version::GetClassData() const { return &_class_data_; }


void AnnounceMessage_Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnnounceMessage_Version*>(&to_msg);
  auto& from = static_cast<const AnnounceMessage_Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AnnounceMessage.Version)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.majorversion_ = from._impl_.majorversion_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.minorversion_ = from._impl_.minorversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnounceMessage_Version::CopyFrom(const AnnounceMessage_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnnounceMessage.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage_Version::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AnnounceMessage_Version::InternalSwap(AnnounceMessage_Version* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnounceMessage_Version, _impl_.minorversion_)
      + sizeof(AnnounceMessage_Version::_impl_.minorversion_)
      - PROTOBUF_FIELD_OFFSET(AnnounceMessage_Version, _impl_.majorversion_)>(
          reinterpret_cast<char*>(&_impl_.majorversion_),
          reinterpret_cast<char*>(&other->_impl_.majorversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnounceMessage_Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[2]);
}

// ===================================================================

class AnnounceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnounceMessage>()._impl_._has_bits_);
  static const ::AnnounceMessage_Version& protocolversion(const AnnounceMessage* msg);
  static void set_has_protocolversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AnnounceMessage_Version& latestgameversion(const AnnounceMessage* msg);
  static void set_has_latestgameversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latestbetarevision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_servertype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_numplayersonserver(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::AnnounceMessage_Version&
AnnounceMessage::_Internal::protocolversion(const AnnounceMessage* msg) {
  return *msg->_impl_.protocolversion_;
}
const ::AnnounceMessage_Version&
AnnounceMessage::_Internal::latestgameversion(const AnnounceMessage* msg) {
  return *msg->_impl_.latestgameversion_;
}
AnnounceMessage::AnnounceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AnnounceMessage)
}
AnnounceMessage::AnnounceMessage(const AnnounceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnnounceMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.protocolversion_){nullptr}
    , decltype(_impl_.latestgameversion_){nullptr}
    , decltype(_impl_.latestbetarevision_){}
    , decltype(_impl_.servertype_){}
    , decltype(_impl_.numplayersonserver_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_protocolversion()) {
    _this->_impl_.protocolversion_ = new ::AnnounceMessage_Version(*from._impl_.protocolversion_);
  }
  if (from._internal_has_latestgameversion()) {
    _this->_impl_.latestgameversion_ = new ::AnnounceMessage_Version(*from._impl_.latestgameversion_);
  }
  ::memcpy(&_impl_.latestbetarevision_, &from._impl_.latestbetarevision_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numplayersonserver_) -
    reinterpret_cast<char*>(&_impl_.latestbetarevision_)) + sizeof(_impl_.numplayersonserver_));
  // @@protoc_insertion_point(copy_constructor:AnnounceMessage)
}

inline void AnnounceMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.protocolversion_){nullptr}
    , decltype(_impl_.latestgameversion_){nullptr}
    , decltype(_impl_.latestbetarevision_){0u}
    , decltype(_impl_.servertype_){0}
    , decltype(_impl_.numplayersonserver_){0u}
  };
}

AnnounceMessage::~AnnounceMessage() {
  // @@protoc_insertion_point(destructor:AnnounceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnounceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.protocolversion_;
  if (this != internal_default_instance()) delete _impl_.latestgameversion_;
}

void AnnounceMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnounceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AnnounceMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.protocolversion_ != nullptr);
      _impl_.protocolversion_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.latestgameversion_ != nullptr);
      _impl_.latestgameversion_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.latestbetarevision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numplayersonserver_) -
        reinterpret_cast<char*>(&_impl_.latestbetarevision_)) + sizeof(_impl_.numplayersonserver_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnounceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .AnnounceMessage.Version protocolVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocolversion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .AnnounceMessage.Version latestGameVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latestgameversion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 latestBetaRevision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_latestbetarevision(&has_bits);
          _impl_.latestbetarevision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .AnnounceMessage.ServerType serverType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AnnounceMessage_ServerType_IsValid(val))) {
            _internal_set_servertype(static_cast<::AnnounceMessage_ServerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 numPlayersOnServer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_numplayersonserver(&has_bits);
          _impl_.numplayersonserver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnounceMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnnounceMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .AnnounceMessage.Version protocolVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::protocolversion(this),
        _Internal::protocolversion(this).GetCachedSize(), target, stream);
  }

  // required .AnnounceMessage.Version latestGameVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::latestgameversion(this),
        _Internal::latestgameversion(this).GetCachedSize(), target, stream);
  }

  // required uint32 latestBetaRevision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_latestbetarevision(), target);
  }

  // required .AnnounceMessage.ServerType serverType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_servertype(), target);
  }

  // required uint32 numPlayersOnServer = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_numplayersonserver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnnounceMessage)
  return target;
}

size_t AnnounceMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnnounceMessage)
  size_t total_size = 0;

  if (_internal_has_protocolversion()) {
    // required .AnnounceMessage.Version protocolVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protocolversion_);
  }

  if (_internal_has_latestgameversion()) {
    // required .AnnounceMessage.Version latestGameVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.latestgameversion_);
  }

  if (_internal_has_latestbetarevision()) {
    // required uint32 latestBetaRevision = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_latestbetarevision());
  }

  if (_internal_has_servertype()) {
    // required .AnnounceMessage.ServerType serverType = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_servertype());
  }

  if (_internal_has_numplayersonserver()) {
    // required uint32 numPlayersOnServer = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numplayersonserver());
  }

  return total_size;
}
size_t AnnounceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnnounceMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .AnnounceMessage.Version protocolVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protocolversion_);

    // required .AnnounceMessage.Version latestGameVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.latestgameversion_);

    // required uint32 latestBetaRevision = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_latestbetarevision());

    // required .AnnounceMessage.ServerType serverType = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_servertype());

    // required uint32 numPlayersOnServer = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numplayersonserver());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnounceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnnounceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnounceMessage::GetClassData() const { return &_class_data_; }


void AnnounceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnnounceMessage*>(&to_msg);
  auto& from = static_cast<const AnnounceMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AnnounceMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_protocolversion()->::AnnounceMessage_Version::MergeFrom(
          from._internal_protocolversion());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_latestgameversion()->::AnnounceMessage_Version::MergeFrom(
          from._internal_latestgameversion());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.latestbetarevision_ = from._impl_.latestbetarevision_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.servertype_ = from._impl_.servertype_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.numplayersonserver_ = from._impl_.numplayersonserver_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnounceMessage::CopyFrom(const AnnounceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnnounceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_protocolversion()) {
    if (!_impl_.protocolversion_->IsInitialized()) return false;
  }
  if (_internal_has_latestgameversion()) {
    if (!_impl_.latestgameversion_->IsInitialized()) return false;
  }
  return true;
}

void AnnounceMessage::InternalSwap(AnnounceMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnounceMessage, _impl_.numplayersonserver_)
      + sizeof(AnnounceMessage::_impl_.numplayersonserver_)
      - PROTOBUF_FIELD_OFFSET(AnnounceMessage, _impl_.protocolversion_)>(
          reinterpret_cast<char*>(&_impl_.protocolversion_),
          reinterpret_cast<char*>(&other->_impl_.protocolversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnounceMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[3]);
}

// ===================================================================

class AuthClientRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthClientRequestMessage>()._impl_._has_bits_);
  static const ::AnnounceMessage_Version& requestedversion(const AuthClientRequestMessage* msg);
  static void set_has_requestedversion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_buildid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_login(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_authserverpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientuserdata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mylastsessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000e0) ^ 0x000000e0) != 0;
  }
};

const ::AnnounceMessage_Version&
AuthClientRequestMessage::_Internal::requestedversion(const AuthClientRequestMessage* msg) {
  return *msg->_impl_.requestedversion_;
}
AuthClientRequestMessage::AuthClientRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthClientRequestMessage)
}
AuthClientRequestMessage::AuthClientRequestMessage(const AuthClientRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthClientRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authserverpassword_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.clientuserdata_){}
    , decltype(_impl_.mylastsessionid_){}
    , decltype(_impl_.avatarhash_){}
    , decltype(_impl_.requestedversion_){nullptr}
    , decltype(_impl_.buildid_){}
    , decltype(_impl_.login_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authserverpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authserverpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authserverpassword()) {
    _this->_impl_.authserverpassword_.Set(from._internal_authserverpassword(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuserdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuserdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_clientuserdata()) {
    _this->_impl_.clientuserdata_.Set(from._internal_clientuserdata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mylastsessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mylastsessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mylastsessionid()) {
    _this->_impl_.mylastsessionid_.Set(from._internal_mylastsessionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatarhash()) {
    _this->_impl_.avatarhash_.Set(from._internal_avatarhash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_requestedversion()) {
    _this->_impl_.requestedversion_ = new ::AnnounceMessage_Version(*from._impl_.requestedversion_);
  }
  ::memcpy(&_impl_.buildid_, &from._impl_.buildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_) -
    reinterpret_cast<char*>(&_impl_.buildid_)) + sizeof(_impl_.login_));
  // @@protoc_insertion_point(copy_constructor:AuthClientRequestMessage)
}

inline void AuthClientRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authserverpassword_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.clientuserdata_){}
    , decltype(_impl_.mylastsessionid_){}
    , decltype(_impl_.avatarhash_){}
    , decltype(_impl_.requestedversion_){nullptr}
    , decltype(_impl_.buildid_){0u}
    , decltype(_impl_.login_){0}
  };
  _impl_.authserverpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authserverpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuserdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuserdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mylastsessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mylastsessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthClientRequestMessage::~AuthClientRequestMessage() {
  // @@protoc_insertion_point(destructor:AuthClientRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthClientRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authserverpassword_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.clientuserdata_.Destroy();
  _impl_.mylastsessionid_.Destroy();
  _impl_.avatarhash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.requestedversion_;
}

void AuthClientRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthClientRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthClientRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.authserverpassword_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clientuserdata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mylastsessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.avatarhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.requestedversion_ != nullptr);
      _impl_.requestedversion_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.buildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.login_) -
        reinterpret_cast<char*>(&_impl_.buildid_)) + sizeof(_impl_.login_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthClientRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .AnnounceMessage.Version requestedVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestedversion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 buildId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_buildid(&has_bits);
          _impl_.buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .AuthClientRequestMessage.LoginType login = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AuthClientRequestMessage_LoginType_IsValid(val))) {
            _internal_set_login(static_cast<::AuthClientRequestMessage_LoginType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string authServerPassword = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_authserverpassword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AuthClientRequestMessage.authServerPassword");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string nickName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AuthClientRequestMessage.nickName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes clientUserData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_clientuserdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes myLastSessionId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mylastsessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes avatarHash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_avatarhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthClientRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthClientRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .AnnounceMessage.Version requestedVersion = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::requestedversion(this),
        _Internal::requestedversion(this).GetCachedSize(), target, stream);
  }

  // required uint32 buildId = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_buildid(), target);
  }

  // required .AuthClientRequestMessage.LoginType login = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_login(), target);
  }

  // optional string authServerPassword = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_authserverpassword().data(), static_cast<int>(this->_internal_authserverpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AuthClientRequestMessage.authServerPassword");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_authserverpassword(), target);
  }

  // optional string nickName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AuthClientRequestMessage.nickName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nickname(), target);
  }

  // optional bytes clientUserData = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_clientuserdata(), target);
  }

  // optional bytes myLastSessionId = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_mylastsessionid(), target);
  }

  // optional bytes avatarHash = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_avatarhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthClientRequestMessage)
  return target;
}

size_t AuthClientRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AuthClientRequestMessage)
  size_t total_size = 0;

  if (_internal_has_requestedversion()) {
    // required .AnnounceMessage.Version requestedVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requestedversion_);
  }

  if (_internal_has_buildid()) {
    // required uint32 buildId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buildid());
  }

  if (_internal_has_login()) {
    // required .AuthClientRequestMessage.LoginType login = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_login());
  }

  return total_size;
}
size_t AuthClientRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthClientRequestMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000e0) ^ 0x000000e0) == 0) {  // All required fields are present.
    // required .AnnounceMessage.Version requestedVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requestedversion_);

    // required uint32 buildId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buildid());

    // required .AuthClientRequestMessage.LoginType login = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_login());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string authServerPassword = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authserverpassword());
    }

    // optional string nickName = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional bytes clientUserData = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_clientuserdata());
    }

    // optional bytes myLastSessionId = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mylastsessionid());
    }

    // optional bytes avatarHash = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_avatarhash());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthClientRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthClientRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthClientRequestMessage::GetClassData() const { return &_class_data_; }


void AuthClientRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthClientRequestMessage*>(&to_msg);
  auto& from = static_cast<const AuthClientRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthClientRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_authserverpassword(from._internal_authserverpassword());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_clientuserdata(from._internal_clientuserdata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mylastsessionid(from._internal_mylastsessionid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_avatarhash(from._internal_avatarhash());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_requestedversion()->::AnnounceMessage_Version::MergeFrom(
          from._internal_requestedversion());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.buildid_ = from._impl_.buildid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.login_ = from._impl_.login_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthClientRequestMessage::CopyFrom(const AuthClientRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthClientRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthClientRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_requestedversion()) {
    if (!_impl_.requestedversion_->IsInitialized()) return false;
  }
  return true;
}

void AuthClientRequestMessage::InternalSwap(AuthClientRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authserverpassword_, lhs_arena,
      &other->_impl_.authserverpassword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuserdata_, lhs_arena,
      &other->_impl_.clientuserdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mylastsessionid_, lhs_arena,
      &other->_impl_.mylastsessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatarhash_, lhs_arena,
      &other->_impl_.avatarhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthClientRequestMessage, _impl_.login_)
      + sizeof(AuthClientRequestMessage::_impl_.login_)
      - PROTOBUF_FIELD_OFFSET(AuthClientRequestMessage, _impl_.requestedversion_)>(
          reinterpret_cast<char*>(&_impl_.requestedversion_),
          reinterpret_cast<char*>(&other->_impl_.requestedversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthClientRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[4]);
}

// ===================================================================

class AuthServerChallengeMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthServerChallengeMessage>()._impl_._has_bits_);
  static void set_has_serverchallenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AuthServerChallengeMessage::AuthServerChallengeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthServerChallengeMessage)
}
AuthServerChallengeMessage::AuthServerChallengeMessage(const AuthServerChallengeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthServerChallengeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serverchallenge_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serverchallenge_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverchallenge_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serverchallenge()) {
    _this->_impl_.serverchallenge_.Set(from._internal_serverchallenge(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AuthServerChallengeMessage)
}

inline void AuthServerChallengeMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serverchallenge_){}
  };
  _impl_.serverchallenge_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverchallenge_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthServerChallengeMessage::~AuthServerChallengeMessage() {
  // @@protoc_insertion_point(destructor:AuthServerChallengeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthServerChallengeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serverchallenge_.Destroy();
}

void AuthServerChallengeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthServerChallengeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthServerChallengeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.serverchallenge_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthServerChallengeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes serverChallenge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serverchallenge();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthServerChallengeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthServerChallengeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes serverChallenge = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serverchallenge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthServerChallengeMessage)
  return target;
}

size_t AuthServerChallengeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthServerChallengeMessage)
  size_t total_size = 0;

  // required bytes serverChallenge = 1;
  if (_internal_has_serverchallenge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serverchallenge());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthServerChallengeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthServerChallengeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthServerChallengeMessage::GetClassData() const { return &_class_data_; }


void AuthServerChallengeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthServerChallengeMessage*>(&to_msg);
  auto& from = static_cast<const AuthServerChallengeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthServerChallengeMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serverchallenge()) {
    _this->_internal_set_serverchallenge(from._internal_serverchallenge());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthServerChallengeMessage::CopyFrom(const AuthServerChallengeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthServerChallengeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerChallengeMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AuthServerChallengeMessage::InternalSwap(AuthServerChallengeMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverchallenge_, lhs_arena,
      &other->_impl_.serverchallenge_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthServerChallengeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[5]);
}

// ===================================================================

class AuthClientResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthClientResponseMessage>()._impl_._has_bits_);
  static void set_has_clientresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AuthClientResponseMessage::AuthClientResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthClientResponseMessage)
}
AuthClientResponseMessage::AuthClientResponseMessage(const AuthClientResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthClientResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clientresponse_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientresponse_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientresponse_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_clientresponse()) {
    _this->_impl_.clientresponse_.Set(from._internal_clientresponse(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AuthClientResponseMessage)
}

inline void AuthClientResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clientresponse_){}
  };
  _impl_.clientresponse_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientresponse_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthClientResponseMessage::~AuthClientResponseMessage() {
  // @@protoc_insertion_point(destructor:AuthClientResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthClientResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientresponse_.Destroy();
}

void AuthClientResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthClientResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthClientResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.clientresponse_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthClientResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes clientResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientresponse();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthClientResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthClientResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes clientResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_clientresponse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthClientResponseMessage)
  return target;
}

size_t AuthClientResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthClientResponseMessage)
  size_t total_size = 0;

  // required bytes clientResponse = 1;
  if (_internal_has_clientresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientresponse());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthClientResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthClientResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthClientResponseMessage::GetClassData() const { return &_class_data_; }


void AuthClientResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthClientResponseMessage*>(&to_msg);
  auto& from = static_cast<const AuthClientResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthClientResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clientresponse()) {
    _this->_internal_set_clientresponse(from._internal_clientresponse());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthClientResponseMessage::CopyFrom(const AuthClientResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthClientResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthClientResponseMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AuthClientResponseMessage::InternalSwap(AuthClientResponseMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientresponse_, lhs_arena,
      &other->_impl_.clientresponse_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthClientResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[6]);
}

// ===================================================================

class AuthServerVerificationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthServerVerificationMessage>()._impl_._has_bits_);
  static void set_has_serververification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AuthServerVerificationMessage::AuthServerVerificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthServerVerificationMessage)
}
AuthServerVerificationMessage::AuthServerVerificationMessage(const AuthServerVerificationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthServerVerificationMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serververification_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serververification_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serververification_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serververification()) {
    _this->_impl_.serververification_.Set(from._internal_serververification(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AuthServerVerificationMessage)
}

inline void AuthServerVerificationMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serververification_){}
  };
  _impl_.serververification_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serververification_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthServerVerificationMessage::~AuthServerVerificationMessage() {
  // @@protoc_insertion_point(destructor:AuthServerVerificationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthServerVerificationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serververification_.Destroy();
}

void AuthServerVerificationMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthServerVerificationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthServerVerificationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.serververification_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthServerVerificationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes serverVerification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serververification();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthServerVerificationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthServerVerificationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes serverVerification = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serververification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthServerVerificationMessage)
  return target;
}

size_t AuthServerVerificationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthServerVerificationMessage)
  size_t total_size = 0;

  // required bytes serverVerification = 1;
  if (_internal_has_serververification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serververification());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthServerVerificationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthServerVerificationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthServerVerificationMessage::GetClassData() const { return &_class_data_; }


void AuthServerVerificationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthServerVerificationMessage*>(&to_msg);
  auto& from = static_cast<const AuthServerVerificationMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthServerVerificationMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serververification()) {
    _this->_internal_set_serververification(from._internal_serververification());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthServerVerificationMessage::CopyFrom(const AuthServerVerificationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthServerVerificationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerVerificationMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AuthServerVerificationMessage::InternalSwap(AuthServerVerificationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serververification_, lhs_arena,
      &other->_impl_.serververification_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthServerVerificationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[7]);
}

// ===================================================================

class InitDoneMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<InitDoneMessage>()._impl_._has_bits_);
  static void set_has_yoursessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yourplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_youravatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rejoingameid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

InitDoneMessage::InitDoneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InitDoneMessage)
}
InitDoneMessage::InitDoneMessage(const InitDoneMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitDoneMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yoursessionid_){}
    , decltype(_impl_.youravatarhash_){}
    , decltype(_impl_.yourplayerid_){}
    , decltype(_impl_.rejoingameid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.yoursessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.yoursessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_yoursessionid()) {
    _this->_impl_.yoursessionid_.Set(from._internal_yoursessionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.youravatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.youravatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_youravatarhash()) {
    _this->_impl_.youravatarhash_.Set(from._internal_youravatarhash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.yourplayerid_, &from._impl_.yourplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rejoingameid_) -
    reinterpret_cast<char*>(&_impl_.yourplayerid_)) + sizeof(_impl_.rejoingameid_));
  // @@protoc_insertion_point(copy_constructor:InitDoneMessage)
}

inline void InitDoneMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yoursessionid_){}
    , decltype(_impl_.youravatarhash_){}
    , decltype(_impl_.yourplayerid_){0u}
    , decltype(_impl_.rejoingameid_){0u}
  };
  _impl_.yoursessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.yoursessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.youravatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.youravatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitDoneMessage::~InitDoneMessage() {
  // @@protoc_insertion_point(destructor:InitDoneMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitDoneMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.yoursessionid_.Destroy();
  _impl_.youravatarhash_.Destroy();
}

void InitDoneMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitDoneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InitDoneMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.yoursessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.youravatarhash_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.yourplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rejoingameid_) -
        reinterpret_cast<char*>(&_impl_.yourplayerid_)) + sizeof(_impl_.rejoingameid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitDoneMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes yourSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_yoursessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 yourPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_yourplayerid(&has_bits);
          _impl_.yourplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes yourAvatarHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_youravatarhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rejoinGameId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rejoingameid(&has_bits);
          _impl_.rejoingameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitDoneMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitDoneMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes yourSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_yoursessionid(), target);
  }

  // required uint32 yourPlayerId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_yourplayerid(), target);
  }

  // optional bytes yourAvatarHash = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_youravatarhash(), target);
  }

  // optional uint32 rejoinGameId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rejoingameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitDoneMessage)
  return target;
}

size_t InitDoneMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InitDoneMessage)
  size_t total_size = 0;

  if (_internal_has_yoursessionid()) {
    // required bytes yourSessionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_yoursessionid());
  }

  if (_internal_has_yourplayerid()) {
    // required uint32 yourPlayerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_yourplayerid());
  }

  return total_size;
}
size_t InitDoneMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitDoneMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes yourSessionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_yoursessionid());

    // required uint32 yourPlayerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_yourplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes yourAvatarHash = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_youravatarhash());
  }

  // optional uint32 rejoinGameId = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rejoingameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitDoneMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitDoneMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitDoneMessage::GetClassData() const { return &_class_data_; }


void InitDoneMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitDoneMessage*>(&to_msg);
  auto& from = static_cast<const InitDoneMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InitDoneMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_yoursessionid(from._internal_yoursessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_youravatarhash(from._internal_youravatarhash());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.yourplayerid_ = from._impl_.yourplayerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rejoingameid_ = from._impl_.rejoingameid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitDoneMessage::CopyFrom(const InitDoneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitDoneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitDoneMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InitDoneMessage::InternalSwap(InitDoneMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.yoursessionid_, lhs_arena,
      &other->_impl_.yoursessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.youravatarhash_, lhs_arena,
      &other->_impl_.youravatarhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitDoneMessage, _impl_.rejoingameid_)
      + sizeof(InitDoneMessage::_impl_.rejoingameid_)
      - PROTOBUF_FIELD_OFFSET(InitDoneMessage, _impl_.yourplayerid_)>(
          reinterpret_cast<char*>(&_impl_.yourplayerid_),
          reinterpret_cast<char*>(&other->_impl_.yourplayerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitDoneMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[8]);
}

// ===================================================================

class AvatarRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarRequestMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AvatarRequestMessage::AvatarRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AvatarRequestMessage)
}
AvatarRequestMessage::AvatarRequestMessage(const AvatarRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvatarRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.avatarhash_){}
    , decltype(_impl_.requestid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.avatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatarhash()) {
    _this->_impl_.avatarhash_.Set(from._internal_avatarhash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:AvatarRequestMessage)
}

inline void AvatarRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.avatarhash_){}
    , decltype(_impl_.requestid_){0u}
  };
  _impl_.avatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AvatarRequestMessage::~AvatarRequestMessage() {
  // @@protoc_insertion_point(destructor:AvatarRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvatarRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.avatarhash_.Destroy();
}

void AvatarRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvatarRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.avatarhash_.ClearNonDefaultToEmpty();
  }
  _impl_.requestid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvatarRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes avatarHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_avatarhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvatarRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvatarRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required bytes avatarHash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_avatarhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarRequestMessage)
  return target;
}

size_t AvatarRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarRequestMessage)
  size_t total_size = 0;

  if (_internal_has_avatarhash()) {
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarhash());
  }

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  return total_size;
}
size_t AvatarRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarRequestMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarhash());

    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvatarRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvatarRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvatarRequestMessage::GetClassData() const { return &_class_data_; }


void AvatarRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvatarRequestMessage*>(&to_msg);
  auto& from = static_cast<const AvatarRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AvatarRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_avatarhash(from._internal_avatarhash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvatarRequestMessage::CopyFrom(const AvatarRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AvatarRequestMessage::InternalSwap(AvatarRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatarhash_, lhs_arena,
      &other->_impl_.avatarhash_, rhs_arena
  );
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvatarRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[9]);
}

// ===================================================================

class AvatarHeaderMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarHeaderMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avatartype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avatarsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AvatarHeaderMessage::AvatarHeaderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AvatarHeaderMessage)
}
AvatarHeaderMessage::AvatarHeaderMessage(const AvatarHeaderMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvatarHeaderMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.avatarsize_){}
    , decltype(_impl_.avatartype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.avatartype_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.avatartype_));
  // @@protoc_insertion_point(copy_constructor:AvatarHeaderMessage)
}

inline void AvatarHeaderMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){0u}
    , decltype(_impl_.avatarsize_){0u}
    , decltype(_impl_.avatartype_){1}
  };
}

AvatarHeaderMessage::~AvatarHeaderMessage() {
  // @@protoc_insertion_point(destructor:AvatarHeaderMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvatarHeaderMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AvatarHeaderMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvatarHeaderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarHeaderMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.avatarsize_) -
        reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.avatarsize_));
    _impl_.avatartype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvatarHeaderMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetAvatarType avatarType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetAvatarType_IsValid(val))) {
            _internal_set_avatartype(static_cast<::NetAvatarType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 avatarSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_avatarsize(&has_bits);
          _impl_.avatarsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvatarHeaderMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvatarHeaderMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .NetAvatarType avatarType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_avatartype(), target);
  }

  // required uint32 avatarSize = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_avatarsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarHeaderMessage)
  return target;
}

size_t AvatarHeaderMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarHeaderMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_avatarsize()) {
    // required uint32 avatarSize = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avatarsize());
  }

  if (_internal_has_avatartype()) {
    // required .NetAvatarType avatarType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_avatartype());
  }

  return total_size;
}
size_t AvatarHeaderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarHeaderMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

    // required uint32 avatarSize = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avatarsize());

    // required .NetAvatarType avatarType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_avatartype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvatarHeaderMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvatarHeaderMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvatarHeaderMessage::GetClassData() const { return &_class_data_; }


void AvatarHeaderMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvatarHeaderMessage*>(&to_msg);
  auto& from = static_cast<const AvatarHeaderMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AvatarHeaderMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.avatarsize_ = from._impl_.avatarsize_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.avatartype_ = from._impl_.avatartype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvatarHeaderMessage::CopyFrom(const AvatarHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarHeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarHeaderMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AvatarHeaderMessage::InternalSwap(AvatarHeaderMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvatarHeaderMessage, _impl_.avatarsize_)
      + sizeof(AvatarHeaderMessage::_impl_.avatarsize_)
      - PROTOBUF_FIELD_OFFSET(AvatarHeaderMessage, _impl_.requestid_)>(
          reinterpret_cast<char*>(&_impl_.requestid_),
          reinterpret_cast<char*>(&other->_impl_.requestid_));
  swap(_impl_.avatartype_, other->_impl_.avatartype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvatarHeaderMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[10]);
}

// ===================================================================

class AvatarDataMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarDataMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatarblock(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AvatarDataMessage::AvatarDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AvatarDataMessage)
}
AvatarDataMessage::AvatarDataMessage(const AvatarDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvatarDataMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.avatarblock_){}
    , decltype(_impl_.requestid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.avatarblock_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatarblock_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatarblock()) {
    _this->_impl_.avatarblock_.Set(from._internal_avatarblock(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:AvatarDataMessage)
}

inline void AvatarDataMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.avatarblock_){}
    , decltype(_impl_.requestid_){0u}
  };
  _impl_.avatarblock_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatarblock_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AvatarDataMessage::~AvatarDataMessage() {
  // @@protoc_insertion_point(destructor:AvatarDataMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvatarDataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.avatarblock_.Destroy();
}

void AvatarDataMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvatarDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarDataMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.avatarblock_.ClearNonDefaultToEmpty();
  }
  _impl_.requestid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvatarDataMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes avatarBlock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_avatarblock();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvatarDataMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvatarDataMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required bytes avatarBlock = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_avatarblock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarDataMessage)
  return target;
}

size_t AvatarDataMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarDataMessage)
  size_t total_size = 0;

  if (_internal_has_avatarblock()) {
    // required bytes avatarBlock = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarblock());
  }

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  return total_size;
}
size_t AvatarDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarDataMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes avatarBlock = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarblock());

    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvatarDataMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvatarDataMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvatarDataMessage::GetClassData() const { return &_class_data_; }


void AvatarDataMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvatarDataMessage*>(&to_msg);
  auto& from = static_cast<const AvatarDataMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AvatarDataMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_avatarblock(from._internal_avatarblock());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvatarDataMessage::CopyFrom(const AvatarDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarDataMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AvatarDataMessage::InternalSwap(AvatarDataMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatarblock_, lhs_arena,
      &other->_impl_.avatarblock_, rhs_arena
  );
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvatarDataMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[11]);
}

// ===================================================================

class AvatarEndMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarEndMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AvatarEndMessage::AvatarEndMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AvatarEndMessage)
}
AvatarEndMessage::AvatarEndMessage(const AvatarEndMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvatarEndMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:AvatarEndMessage)
}

inline void AvatarEndMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){0u}
  };
}

AvatarEndMessage::~AvatarEndMessage() {
  // @@protoc_insertion_point(destructor:AvatarEndMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvatarEndMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AvatarEndMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvatarEndMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarEndMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requestid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvatarEndMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvatarEndMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvatarEndMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarEndMessage)
  return target;
}

size_t AvatarEndMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarEndMessage)
  size_t total_size = 0;

  // required uint32 requestId = 1;
  if (_internal_has_requestid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvatarEndMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvatarEndMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvatarEndMessage::GetClassData() const { return &_class_data_; }


void AvatarEndMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvatarEndMessage*>(&to_msg);
  auto& from = static_cast<const AvatarEndMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AvatarEndMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_requestid()) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvatarEndMessage::CopyFrom(const AvatarEndMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarEndMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarEndMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AvatarEndMessage::InternalSwap(AvatarEndMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvatarEndMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[12]);
}

// ===================================================================

class UnknownAvatarMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownAvatarMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UnknownAvatarMessage::UnknownAvatarMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UnknownAvatarMessage)
}
UnknownAvatarMessage::UnknownAvatarMessage(const UnknownAvatarMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnknownAvatarMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:UnknownAvatarMessage)
}

inline void UnknownAvatarMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){0u}
  };
}

UnknownAvatarMessage::~UnknownAvatarMessage() {
  // @@protoc_insertion_point(destructor:UnknownAvatarMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownAvatarMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnknownAvatarMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnknownAvatarMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:UnknownAvatarMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requestid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownAvatarMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownAvatarMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnknownAvatarMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnknownAvatarMessage)
  return target;
}

size_t UnknownAvatarMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnknownAvatarMessage)
  size_t total_size = 0;

  // required uint32 requestId = 1;
  if (_internal_has_requestid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnknownAvatarMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnknownAvatarMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnknownAvatarMessage::GetClassData() const { return &_class_data_; }


void UnknownAvatarMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnknownAvatarMessage*>(&to_msg);
  auto& from = static_cast<const UnknownAvatarMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UnknownAvatarMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_requestid()) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnknownAvatarMessage::CopyFrom(const UnknownAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnknownAvatarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownAvatarMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UnknownAvatarMessage::InternalSwap(UnknownAvatarMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownAvatarMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[13]);
}

// ===================================================================

class PlayerListMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerListMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerlistnotification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayerListMessage::PlayerListMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerListMessage)
}
PlayerListMessage::PlayerListMessage(const PlayerListMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerListMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.playerlistnotification_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerlistnotification_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.playerlistnotification_));
  // @@protoc_insertion_point(copy_constructor:PlayerListMessage)
}

inline void PlayerListMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.playerlistnotification_){0}
  };
}

PlayerListMessage::~PlayerListMessage() {
  // @@protoc_insertion_point(destructor:PlayerListMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerListMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerListMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerListMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerListMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playerlistnotification_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.playerlistnotification_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerListMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PlayerListMessage_PlayerListNotification_IsValid(val))) {
            _internal_set_playerlistnotification(static_cast<::PlayerListMessage_PlayerListNotification>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerListMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerListMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playerlistnotification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerListMessage)
  return target;
}

size_t PlayerListMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerListMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_playerlistnotification()) {
    // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerlistnotification());
  }

  return total_size;
}
size_t PlayerListMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerListMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerlistnotification());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerListMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerListMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerListMessage::GetClassData() const { return &_class_data_; }


void PlayerListMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerListMessage*>(&to_msg);
  auto& from = static_cast<const PlayerListMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerListMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerlistnotification_ = from._impl_.playerlistnotification_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerListMessage::CopyFrom(const PlayerListMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerListMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerListMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PlayerListMessage::InternalSwap(PlayerListMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerListMessage, _impl_.playerlistnotification_)
      + sizeof(PlayerListMessage::_impl_.playerlistnotification_)
      - PROTOBUF_FIELD_OFFSET(PlayerListMessage, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerListMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[14]);
}

// ===================================================================

class GameListNewMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListNewMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gamemode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isprivate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adminplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::NetGameInfo& gameinfo(const GameListNewMessage* msg);
  static void set_has_gameinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::NetGameInfo&
GameListNewMessage::_Internal::gameinfo(const GameListNewMessage* msg) {
  return *msg->_impl_.gameinfo_;
}
GameListNewMessage::GameListNewMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameListNewMessage)
}
GameListNewMessage::GameListNewMessage(const GameListNewMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameListNewMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerids_){from._impl_.playerids_}
    , /*decltype(_impl_._playerids_cached_byte_size_)*/{0}
    , decltype(_impl_.spectatorids_){from._impl_.spectatorids_}
    , /*decltype(_impl_._spectatorids_cached_byte_size_)*/{0}
    , decltype(_impl_.gameinfo_){nullptr}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.isprivate_){}
    , decltype(_impl_.adminplayerid_){}
    , decltype(_impl_.gamemode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameinfo()) {
    _this->_impl_.gameinfo_ = new ::NetGameInfo(*from._impl_.gameinfo_);
  }
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gamemode_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.gamemode_));
  // @@protoc_insertion_point(copy_constructor:GameListNewMessage)
}

inline void GameListNewMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerids_){arena}
    , /*decltype(_impl_._playerids_cached_byte_size_)*/{0}
    , decltype(_impl_.spectatorids_){arena}
    , /*decltype(_impl_._spectatorids_cached_byte_size_)*/{0}
    , decltype(_impl_.gameinfo_){nullptr}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.isprivate_){false}
    , decltype(_impl_.adminplayerid_){0u}
    , decltype(_impl_.gamemode_){1}
  };
}

GameListNewMessage::~GameListNewMessage() {
  // @@protoc_insertion_point(destructor:GameListNewMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameListNewMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerids_.~RepeatedField();
  _impl_.spectatorids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.gameinfo_;
}

void GameListNewMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameListNewMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListNewMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerids_.Clear();
  _impl_.spectatorids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.gameinfo_ != nullptr);
    _impl_.gameinfo_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.adminplayerid_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.adminplayerid_));
    _impl_.gamemode_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListNewMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameMode gameMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameMode_IsValid(val))) {
            _internal_set_gamemode(static_cast<::NetGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool isPrivate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_isprivate(&has_bits);
          _impl_.isprivate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 playerIds = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_playerids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_playerids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 adminPlayerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_adminplayerid(&has_bits);
          _impl_.adminplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameInfo gameInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 spectatorIds = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_spectatorids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_spectatorids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameListNewMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListNewMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required .NetGameMode gameMode = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamemode(), target);
  }

  // required bool isPrivate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isprivate(), target);
  }

  // repeated uint32 playerIds = 4 [packed = true];
  {
    int byte_size = _impl_._playerids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_playerids(), byte_size, target);
    }
  }

  // required uint32 adminPlayerId = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_adminplayerid(), target);
  }

  // required .NetGameInfo gameInfo = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gameinfo(this),
        _Internal::gameinfo(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 spectatorIds = 7 [packed = true];
  {
    int byte_size = _impl_._spectatorids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_spectatorids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListNewMessage)
  return target;
}

size_t GameListNewMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListNewMessage)
  size_t total_size = 0;

  if (_internal_has_gameinfo()) {
    // required .NetGameInfo gameInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gameinfo_);
  }

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_isprivate()) {
    // required bool isPrivate = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_adminplayerid()) {
    // required uint32 adminPlayerId = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_adminplayerid());
  }

  if (_internal_has_gamemode()) {
    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamemode());
  }

  return total_size;
}
size_t GameListNewMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListNewMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .NetGameInfo gameInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gameinfo_);

    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required bool isPrivate = 3;
    total_size += 1 + 1;

    // required uint32 adminPlayerId = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_adminplayerid());

    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerIds = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.playerids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._playerids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 spectatorIds = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.spectatorids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._spectatorids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameListNewMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameListNewMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameListNewMessage::GetClassData() const { return &_class_data_; }


void GameListNewMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameListNewMessage*>(&to_msg);
  auto& from = static_cast<const GameListNewMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameListNewMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playerids_.MergeFrom(from._impl_.playerids_);
  _this->_impl_.spectatorids_.MergeFrom(from._impl_.spectatorids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_gameinfo()->::NetGameInfo::MergeFrom(
          from._internal_gameinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isprivate_ = from._impl_.isprivate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.adminplayerid_ = from._impl_.adminplayerid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.gamemode_ = from._impl_.gamemode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameListNewMessage::CopyFrom(const GameListNewMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListNewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListNewMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_gameinfo()) {
    if (!_impl_.gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void GameListNewMessage::InternalSwap(GameListNewMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.playerids_.InternalSwap(&other->_impl_.playerids_);
  _impl_.spectatorids_.InternalSwap(&other->_impl_.spectatorids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListNewMessage, _impl_.adminplayerid_)
      + sizeof(GameListNewMessage::_impl_.adminplayerid_)
      - PROTOBUF_FIELD_OFFSET(GameListNewMessage, _impl_.gameinfo_)>(
          reinterpret_cast<char*>(&_impl_.gameinfo_),
          reinterpret_cast<char*>(&other->_impl_.gameinfo_));
  swap(_impl_.gamemode_, other->_impl_.gamemode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListNewMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[15]);
}

// ===================================================================

class GameListUpdateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListUpdateMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamemode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListUpdateMessage::GameListUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameListUpdateMessage)
}
GameListUpdateMessage::GameListUpdateMessage(const GameListUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameListUpdateMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.gamemode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gamemode_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.gamemode_));
  // @@protoc_insertion_point(copy_constructor:GameListUpdateMessage)
}

inline void GameListUpdateMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.gamemode_){1}
  };
}

GameListUpdateMessage::~GameListUpdateMessage() {
  // @@protoc_insertion_point(destructor:GameListUpdateMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameListUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameListUpdateMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameListUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListUpdateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.gameid_ = 0u;
    _impl_.gamemode_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListUpdateMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameMode gameMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameMode_IsValid(val))) {
            _internal_set_gamemode(static_cast<::NetGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameListUpdateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListUpdateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required .NetGameMode gameMode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamemode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListUpdateMessage)
  return target;
}

size_t GameListUpdateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListUpdateMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_gamemode()) {
    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamemode());
  }

  return total_size;
}
size_t GameListUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListUpdateMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameListUpdateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameListUpdateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameListUpdateMessage::GetClassData() const { return &_class_data_; }


void GameListUpdateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameListUpdateMessage*>(&to_msg);
  auto& from = static_cast<const GameListUpdateMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameListUpdateMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gamemode_ = from._impl_.gamemode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameListUpdateMessage::CopyFrom(const GameListUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListUpdateMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameListUpdateMessage::InternalSwap(GameListUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gameid_, other->_impl_.gameid_);
  swap(_impl_.gamemode_, other->_impl_.gamemode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListUpdateMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[16]);
}

// ===================================================================

class GameListPlayerJoinedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListPlayerJoinedMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListPlayerJoinedMessage::GameListPlayerJoinedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameListPlayerJoinedMessage)
}
GameListPlayerJoinedMessage::GameListPlayerJoinedMessage(const GameListPlayerJoinedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameListPlayerJoinedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListPlayerJoinedMessage)
}

inline void GameListPlayerJoinedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.playerid_){0u}
  };
}

GameListPlayerJoinedMessage::~GameListPlayerJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameListPlayerJoinedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameListPlayerJoinedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameListPlayerJoinedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameListPlayerJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListPlayerJoinedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playerid_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListPlayerJoinedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameListPlayerJoinedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListPlayerJoinedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListPlayerJoinedMessage)
  return target;
}

size_t GameListPlayerJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListPlayerJoinedMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return total_size;
}
size_t GameListPlayerJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListPlayerJoinedMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameListPlayerJoinedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameListPlayerJoinedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameListPlayerJoinedMessage::GetClassData() const { return &_class_data_; }


void GameListPlayerJoinedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameListPlayerJoinedMessage*>(&to_msg);
  auto& from = static_cast<const GameListPlayerJoinedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameListPlayerJoinedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameListPlayerJoinedMessage::CopyFrom(const GameListPlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListPlayerJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerJoinedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameListPlayerJoinedMessage::InternalSwap(GameListPlayerJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListPlayerJoinedMessage, _impl_.playerid_)
      + sizeof(GameListPlayerJoinedMessage::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(GameListPlayerJoinedMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListPlayerJoinedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[17]);
}

// ===================================================================

class GameListPlayerLeftMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListPlayerLeftMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListPlayerLeftMessage::GameListPlayerLeftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameListPlayerLeftMessage)
}
GameListPlayerLeftMessage::GameListPlayerLeftMessage(const GameListPlayerLeftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameListPlayerLeftMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListPlayerLeftMessage)
}

inline void GameListPlayerLeftMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.playerid_){0u}
  };
}

GameListPlayerLeftMessage::~GameListPlayerLeftMessage() {
  // @@protoc_insertion_point(destructor:GameListPlayerLeftMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameListPlayerLeftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameListPlayerLeftMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameListPlayerLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListPlayerLeftMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playerid_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListPlayerLeftMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameListPlayerLeftMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListPlayerLeftMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListPlayerLeftMessage)
  return target;
}

size_t GameListPlayerLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListPlayerLeftMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return total_size;
}
size_t GameListPlayerLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListPlayerLeftMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameListPlayerLeftMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameListPlayerLeftMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameListPlayerLeftMessage::GetClassData() const { return &_class_data_; }


void GameListPlayerLeftMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameListPlayerLeftMessage*>(&to_msg);
  auto& from = static_cast<const GameListPlayerLeftMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameListPlayerLeftMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameListPlayerLeftMessage::CopyFrom(const GameListPlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListPlayerLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerLeftMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameListPlayerLeftMessage::InternalSwap(GameListPlayerLeftMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListPlayerLeftMessage, _impl_.playerid_)
      + sizeof(GameListPlayerLeftMessage::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(GameListPlayerLeftMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListPlayerLeftMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[18]);
}

// ===================================================================

class GameListSpectatorJoinedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListSpectatorJoinedMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListSpectatorJoinedMessage::GameListSpectatorJoinedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameListSpectatorJoinedMessage)
}
GameListSpectatorJoinedMessage::GameListSpectatorJoinedMessage(const GameListSpectatorJoinedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameListSpectatorJoinedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListSpectatorJoinedMessage)
}

inline void GameListSpectatorJoinedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.playerid_){0u}
  };
}

GameListSpectatorJoinedMessage::~GameListSpectatorJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameListSpectatorJoinedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameListSpectatorJoinedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameListSpectatorJoinedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameListSpectatorJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListSpectatorJoinedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playerid_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListSpectatorJoinedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameListSpectatorJoinedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListSpectatorJoinedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListSpectatorJoinedMessage)
  return target;
}

size_t GameListSpectatorJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListSpectatorJoinedMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return total_size;
}
size_t GameListSpectatorJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListSpectatorJoinedMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameListSpectatorJoinedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameListSpectatorJoinedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameListSpectatorJoinedMessage::GetClassData() const { return &_class_data_; }


void GameListSpectatorJoinedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameListSpectatorJoinedMessage*>(&to_msg);
  auto& from = static_cast<const GameListSpectatorJoinedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameListSpectatorJoinedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameListSpectatorJoinedMessage::CopyFrom(const GameListSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListSpectatorJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListSpectatorJoinedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameListSpectatorJoinedMessage::InternalSwap(GameListSpectatorJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListSpectatorJoinedMessage, _impl_.playerid_)
      + sizeof(GameListSpectatorJoinedMessage::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(GameListSpectatorJoinedMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListSpectatorJoinedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[19]);
}

// ===================================================================

class GameListSpectatorLeftMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListSpectatorLeftMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListSpectatorLeftMessage::GameListSpectatorLeftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameListSpectatorLeftMessage)
}
GameListSpectatorLeftMessage::GameListSpectatorLeftMessage(const GameListSpectatorLeftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameListSpectatorLeftMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListSpectatorLeftMessage)
}

inline void GameListSpectatorLeftMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.playerid_){0u}
  };
}

GameListSpectatorLeftMessage::~GameListSpectatorLeftMessage() {
  // @@protoc_insertion_point(destructor:GameListSpectatorLeftMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameListSpectatorLeftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameListSpectatorLeftMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameListSpectatorLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListSpectatorLeftMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playerid_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListSpectatorLeftMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameListSpectatorLeftMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListSpectatorLeftMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListSpectatorLeftMessage)
  return target;
}

size_t GameListSpectatorLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListSpectatorLeftMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return total_size;
}
size_t GameListSpectatorLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListSpectatorLeftMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameListSpectatorLeftMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameListSpectatorLeftMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameListSpectatorLeftMessage::GetClassData() const { return &_class_data_; }


void GameListSpectatorLeftMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameListSpectatorLeftMessage*>(&to_msg);
  auto& from = static_cast<const GameListSpectatorLeftMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameListSpectatorLeftMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameListSpectatorLeftMessage::CopyFrom(const GameListSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListSpectatorLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListSpectatorLeftMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameListSpectatorLeftMessage::InternalSwap(GameListSpectatorLeftMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListSpectatorLeftMessage, _impl_.playerid_)
      + sizeof(GameListSpectatorLeftMessage::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(GameListSpectatorLeftMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListSpectatorLeftMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[20]);
}

// ===================================================================

class GameListAdminChangedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListAdminChangedMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newadminplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListAdminChangedMessage::GameListAdminChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameListAdminChangedMessage)
}
GameListAdminChangedMessage::GameListAdminChangedMessage(const GameListAdminChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameListAdminChangedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.newadminplayerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newadminplayerid_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.newadminplayerid_));
  // @@protoc_insertion_point(copy_constructor:GameListAdminChangedMessage)
}

inline void GameListAdminChangedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.newadminplayerid_){0u}
  };
}

GameListAdminChangedMessage::~GameListAdminChangedMessage() {
  // @@protoc_insertion_point(destructor:GameListAdminChangedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameListAdminChangedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameListAdminChangedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameListAdminChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListAdminChangedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.newadminplayerid_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.newadminplayerid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListAdminChangedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 newAdminPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_newadminplayerid(&has_bits);
          _impl_.newadminplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameListAdminChangedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListAdminChangedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 newAdminPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_newadminplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListAdminChangedMessage)
  return target;
}

size_t GameListAdminChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListAdminChangedMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_newadminplayerid()) {
    // required uint32 newAdminPlayerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newadminplayerid());
  }

  return total_size;
}
size_t GameListAdminChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListAdminChangedMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required uint32 newAdminPlayerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newadminplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameListAdminChangedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameListAdminChangedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameListAdminChangedMessage::GetClassData() const { return &_class_data_; }


void GameListAdminChangedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameListAdminChangedMessage*>(&to_msg);
  auto& from = static_cast<const GameListAdminChangedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameListAdminChangedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.newadminplayerid_ = from._impl_.newadminplayerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameListAdminChangedMessage::CopyFrom(const GameListAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListAdminChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListAdminChangedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameListAdminChangedMessage::InternalSwap(GameListAdminChangedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListAdminChangedMessage, _impl_.newadminplayerid_)
      + sizeof(GameListAdminChangedMessage::_impl_.newadminplayerid_)
      - PROTOBUF_FIELD_OFFSET(GameListAdminChangedMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListAdminChangedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[21]);
}

// ===================================================================

class PlayerInfoRequestMessage::_Internal {
 public:
};

PlayerInfoRequestMessage::PlayerInfoRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerInfoRequestMessage)
}
PlayerInfoRequestMessage::PlayerInfoRequestMessage(const PlayerInfoRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfoRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){from._impl_.playerid_}
    , /*decltype(_impl_._playerid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlayerInfoRequestMessage)
}

inline void PlayerInfoRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){arena}
    , /*decltype(_impl_._playerid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerInfoRequestMessage::~PlayerInfoRequestMessage() {
  // @@protoc_insertion_point(destructor:PlayerInfoRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfoRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerid_.~RepeatedField();
}

void PlayerInfoRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfoRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfoRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 playerId = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_playerid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_playerid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfoRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 playerId = 1 [packed = true];
  {
    int byte_size = _impl_._playerid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_playerid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoRequestMessage)
  return target;
}

size_t PlayerInfoRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerId = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.playerid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._playerid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfoRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfoRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfoRequestMessage::GetClassData() const { return &_class_data_; }


void PlayerInfoRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfoRequestMessage*>(&to_msg);
  auto& from = static_cast<const PlayerInfoRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playerid_.MergeFrom(from._impl_.playerid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfoRequestMessage::CopyFrom(const PlayerInfoRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoRequestMessage::IsInitialized() const {
  return true;
}

void PlayerInfoRequestMessage::InternalSwap(PlayerInfoRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.playerid_.InternalSwap(&other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfoRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[22]);
}

// ===================================================================

class PlayerInfoReplyMessage_PlayerInfoData_AvatarData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfoReplyMessage_PlayerInfoData_AvatarData>()._impl_._has_bits_);
  static void set_has_avatartype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}
PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.avatarhash_){}
    , decltype(_impl_.avatartype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.avatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatarhash()) {
    _this->_impl_.avatarhash_.Set(from._internal_avatarhash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.avatartype_ = from._impl_.avatartype_;
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}

inline void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.avatarhash_){}
    , decltype(_impl_.avatartype_){1}
  };
  _impl_.avatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::~PlayerInfoReplyMessage_PlayerInfoData_AvatarData() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.avatarhash_.Destroy();
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.avatarhash_.ClearNonDefaultToEmpty();
    }
    _impl_.avatartype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .NetAvatarType avatarType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetAvatarType_IsValid(val))) {
            _internal_set_avatartype(static_cast<::NetAvatarType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bytes avatarHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_avatarhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .NetAvatarType avatarType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_avatartype(), target);
  }

  // required bytes avatarHash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_avatarhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  return target;
}

size_t PlayerInfoReplyMessage_PlayerInfoData_AvatarData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  size_t total_size = 0;

  if (_internal_has_avatarhash()) {
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarhash());
  }

  if (_internal_has_avatartype()) {
    // required .NetAvatarType avatarType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_avatartype());
  }

  return total_size;
}
size_t PlayerInfoReplyMessage_PlayerInfoData_AvatarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarhash());

    // required .NetAvatarType avatarType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_avatartype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfoReplyMessage_PlayerInfoData_AvatarData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfoReplyMessage_PlayerInfoData_AvatarData::GetClassData() const { return &_class_data_; }


void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(&to_msg);
  auto& from = static_cast<const PlayerInfoReplyMessage_PlayerInfoData_AvatarData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_avatarhash(from._internal_avatarhash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.avatartype_ = from._impl_.avatartype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InternalSwap(PlayerInfoReplyMessage_PlayerInfoData_AvatarData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatarhash_, lhs_arena,
      &other->_impl_.avatarhash_, rhs_arena
  );
  swap(_impl_.avatartype_, other->_impl_.avatartype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfoReplyMessage_PlayerInfoData_AvatarData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[23]);
}

// ===================================================================

class PlayerInfoReplyMessage_PlayerInfoData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfoReplyMessage_PlayerInfoData>()._impl_._has_bits_);
  static void set_has_playername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ishuman(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playerrights(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData& avatardata(const PlayerInfoReplyMessage_PlayerInfoData* msg);
  static void set_has_avatardata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000019) ^ 0x00000019) != 0;
  }
};

const ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData&
PlayerInfoReplyMessage_PlayerInfoData::_Internal::avatardata(const PlayerInfoReplyMessage_PlayerInfoData* msg) {
  return *msg->_impl_.avatardata_;
}
PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerInfoReplyMessage.PlayerInfoData)
}
PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData(const PlayerInfoReplyMessage_PlayerInfoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfoReplyMessage_PlayerInfoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playername_){}
    , decltype(_impl_.countrycode_){}
    , decltype(_impl_.avatardata_){nullptr}
    , decltype(_impl_.ishuman_){}
    , decltype(_impl_.playerrights_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_playername()) {
    _this->_impl_.playername_.Set(from._internal_playername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_countrycode()) {
    _this->_impl_.countrycode_.Set(from._internal_countrycode(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_avatardata()) {
    _this->_impl_.avatardata_ = new ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(*from._impl_.avatardata_);
  }
  ::memcpy(&_impl_.ishuman_, &from._impl_.ishuman_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerrights_) -
    reinterpret_cast<char*>(&_impl_.ishuman_)) + sizeof(_impl_.playerrights_));
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage.PlayerInfoData)
}

inline void PlayerInfoReplyMessage_PlayerInfoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playername_){}
    , decltype(_impl_.countrycode_){}
    , decltype(_impl_.avatardata_){nullptr}
    , decltype(_impl_.ishuman_){false}
    , decltype(_impl_.playerrights_){1}
  };
  _impl_.playername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfoReplyMessage_PlayerInfoData::~PlayerInfoReplyMessage_PlayerInfoData() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage.PlayerInfoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfoReplyMessage_PlayerInfoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playername_.Destroy();
  _impl_.countrycode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.avatardata_;
}

void PlayerInfoReplyMessage_PlayerInfoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfoReplyMessage_PlayerInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage.PlayerInfoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.playername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.avatardata_ != nullptr);
      _impl_.avatardata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    _impl_.ishuman_ = false;
    _impl_.playerrights_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfoReplyMessage_PlayerInfoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string playerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PlayerInfoReplyMessage.PlayerInfoData.playerName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool isHuman = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ishuman(&has_bits);
          _impl_.ishuman_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetPlayerInfoRights playerRights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetPlayerInfoRights_IsValid(val))) {
            _internal_set_playerrights(static_cast<::NetPlayerInfoRights>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string countryCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PlayerInfoReplyMessage.PlayerInfoData.countryCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatardata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfoReplyMessage_PlayerInfoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoReplyMessage.PlayerInfoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string playerName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PlayerInfoReplyMessage.PlayerInfoData.playerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playername(), target);
  }

  // required bool isHuman = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ishuman(), target);
  }

  // required .NetPlayerInfoRights playerRights = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_playerrights(), target);
  }

  // optional string countryCode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_countrycode().data(), static_cast<int>(this->_internal_countrycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PlayerInfoReplyMessage.PlayerInfoData.countryCode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_countrycode(), target);
  }

  // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::avatardata(this),
        _Internal::avatardata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoReplyMessage.PlayerInfoData)
  return target;
}

size_t PlayerInfoReplyMessage_PlayerInfoData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerInfoReplyMessage.PlayerInfoData)
  size_t total_size = 0;

  if (_internal_has_playername()) {
    // required string playerName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  if (_internal_has_ishuman()) {
    // required bool isHuman = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_playerrights()) {
    // required .NetPlayerInfoRights playerRights = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerrights());
  }

  return total_size;
}
size_t PlayerInfoReplyMessage_PlayerInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage.PlayerInfoData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required string playerName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());

    // required bool isHuman = 2;
    total_size += 1 + 1;

    // required .NetPlayerInfoRights playerRights = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerrights());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string countryCode = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_countrycode());
    }

    // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.avatardata_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfoReplyMessage_PlayerInfoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfoReplyMessage_PlayerInfoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfoReplyMessage_PlayerInfoData::GetClassData() const { return &_class_data_; }


void PlayerInfoReplyMessage_PlayerInfoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfoReplyMessage_PlayerInfoData*>(&to_msg);
  auto& from = static_cast<const PlayerInfoReplyMessage_PlayerInfoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage.PlayerInfoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_playername(from._internal_playername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_avatardata()->::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(
          from._internal_avatardata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ishuman_ = from._impl_.ishuman_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.playerrights_ = from._impl_.playerrights_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfoReplyMessage_PlayerInfoData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage.PlayerInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_avatardata()) {
    if (!_impl_.avatardata_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData::InternalSwap(PlayerInfoReplyMessage_PlayerInfoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playername_, lhs_arena,
      &other->_impl_.playername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.countrycode_, lhs_arena,
      &other->_impl_.countrycode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, _impl_.ishuman_)
      + sizeof(PlayerInfoReplyMessage_PlayerInfoData::_impl_.ishuman_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, _impl_.avatardata_)>(
          reinterpret_cast<char*>(&_impl_.avatardata_),
          reinterpret_cast<char*>(&other->_impl_.avatardata_));
  swap(_impl_.playerrights_, other->_impl_.playerrights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfoReplyMessage_PlayerInfoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[24]);
}

// ===================================================================

class PlayerInfoReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfoReplyMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PlayerInfoReplyMessage_PlayerInfoData& playerinfodata(const PlayerInfoReplyMessage* msg);
  static void set_has_playerinfodata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::PlayerInfoReplyMessage_PlayerInfoData&
PlayerInfoReplyMessage::_Internal::playerinfodata(const PlayerInfoReplyMessage* msg) {
  return *msg->_impl_.playerinfodata_;
}
PlayerInfoReplyMessage::PlayerInfoReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerInfoReplyMessage)
}
PlayerInfoReplyMessage::PlayerInfoReplyMessage(const PlayerInfoReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfoReplyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerinfodata_){nullptr}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfodata()) {
    _this->_impl_.playerinfodata_ = new ::PlayerInfoReplyMessage_PlayerInfoData(*from._impl_.playerinfodata_);
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage)
}

inline void PlayerInfoReplyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerinfodata_){nullptr}
    , decltype(_impl_.playerid_){0u}
  };
}

PlayerInfoReplyMessage::~PlayerInfoReplyMessage() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfoReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerinfodata_;
}

void PlayerInfoReplyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfoReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.playerinfodata_ != nullptr);
    _impl_.playerinfodata_->Clear();
  }
  _impl_.playerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfoReplyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfodata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfoReplyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoReplyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::playerinfodata(this),
        _Internal::playerinfodata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoReplyMessage)
  return target;
}

size_t PlayerInfoReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage)
  size_t total_size = 0;

  // required uint32 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinfodata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfoReplyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfoReplyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfoReplyMessage::GetClassData() const { return &_class_data_; }


void PlayerInfoReplyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfoReplyMessage*>(&to_msg);
  auto& from = static_cast<const PlayerInfoReplyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_playerinfodata()->::PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(
          from._internal_playerinfodata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfoReplyMessage::CopyFrom(const PlayerInfoReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_playerinfodata()) {
    if (!_impl_.playerinfodata_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage::InternalSwap(PlayerInfoReplyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfoReplyMessage, _impl_.playerid_)
      + sizeof(PlayerInfoReplyMessage::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfoReplyMessage, _impl_.playerinfodata_)>(
          reinterpret_cast<char*>(&_impl_.playerinfodata_),
          reinterpret_cast<char*>(&other->_impl_.playerinfodata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfoReplyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[25]);
}

// ===================================================================

class SubscriptionRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionRequestMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subscriptionaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SubscriptionRequestMessage::SubscriptionRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SubscriptionRequestMessage)
}
SubscriptionRequestMessage::SubscriptionRequestMessage(const SubscriptionRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.subscriptionaction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.subscriptionaction_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.subscriptionaction_));
  // @@protoc_insertion_point(copy_constructor:SubscriptionRequestMessage)
}

inline void SubscriptionRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){0u}
    , decltype(_impl_.subscriptionaction_){1}
  };
}

SubscriptionRequestMessage::~SubscriptionRequestMessage() {
  // @@protoc_insertion_point(destructor:SubscriptionRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscriptionRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SubscriptionRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.requestid_ = 0u;
    _impl_.subscriptionaction_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SubscriptionRequestMessage_SubscriptionAction_IsValid(val))) {
            _internal_set_subscriptionaction(static_cast<::SubscriptionRequestMessage_SubscriptionAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubscriptionRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_subscriptionaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubscriptionRequestMessage)
  return target;
}

size_t SubscriptionRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SubscriptionRequestMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_subscriptionaction()) {
    // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscriptionaction());
  }

  return total_size;
}
size_t SubscriptionRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubscriptionRequestMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

    // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscriptionaction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionRequestMessage::GetClassData() const { return &_class_data_; }


void SubscriptionRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionRequestMessage*>(&to_msg);
  auto& from = static_cast<const SubscriptionRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SubscriptionRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.subscriptionaction_ = from._impl_.subscriptionaction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionRequestMessage::CopyFrom(const SubscriptionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubscriptionRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SubscriptionRequestMessage::InternalSwap(SubscriptionRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.requestid_, other->_impl_.requestid_);
  swap(_impl_.subscriptionaction_, other->_impl_.subscriptionaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[26]);
}

// ===================================================================

class SubscriptionReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionReplyMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SubscriptionReplyMessage::SubscriptionReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SubscriptionReplyMessage)
}
SubscriptionReplyMessage::SubscriptionReplyMessage(const SubscriptionReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionReplyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.ack_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ack_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.ack_));
  // @@protoc_insertion_point(copy_constructor:SubscriptionReplyMessage)
}

inline void SubscriptionReplyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){0u}
    , decltype(_impl_.ack_){false}
  };
}

SubscriptionReplyMessage::~SubscriptionReplyMessage() {
  // @@protoc_insertion_point(destructor:SubscriptionReplyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscriptionReplyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SubscriptionReplyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ack_) -
        reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.ack_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionReplyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool ack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ack(&has_bits);
          _impl_.ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionReplyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubscriptionReplyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required bool ack = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubscriptionReplyMessage)
  return target;
}

size_t SubscriptionReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SubscriptionReplyMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_ack()) {
    // required bool ack = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SubscriptionReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubscriptionReplyMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

    // required bool ack = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionReplyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionReplyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionReplyMessage::GetClassData() const { return &_class_data_; }


void SubscriptionReplyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionReplyMessage*>(&to_msg);
  auto& from = static_cast<const SubscriptionReplyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SubscriptionReplyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ack_ = from._impl_.ack_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionReplyMessage::CopyFrom(const SubscriptionReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubscriptionReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SubscriptionReplyMessage::InternalSwap(SubscriptionReplyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionReplyMessage, _impl_.ack_)
      + sizeof(SubscriptionReplyMessage::_impl_.ack_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionReplyMessage, _impl_.requestid_)>(
          reinterpret_cast<char*>(&_impl_.requestid_),
          reinterpret_cast<char*>(&other->_impl_.requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionReplyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[27]);
}

// ===================================================================

class CreateGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateGameMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::NetGameInfo& gameinfo(const CreateGameMessage* msg);
  static void set_has_gameinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autoleave(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::NetGameInfo&
CreateGameMessage::_Internal::gameinfo(const CreateGameMessage* msg) {
  return *msg->_impl_.gameinfo_;
}
CreateGameMessage::CreateGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CreateGameMessage)
}
CreateGameMessage::CreateGameMessage(const CreateGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateGameMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.password_){}
    , decltype(_impl_.gameinfo_){nullptr}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.autoleave_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_gameinfo()) {
    _this->_impl_.gameinfo_ = new ::NetGameInfo(*from._impl_.gameinfo_);
  }
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.autoleave_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.autoleave_));
  // @@protoc_insertion_point(copy_constructor:CreateGameMessage)
}

inline void CreateGameMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.password_){}
    , decltype(_impl_.gameinfo_){nullptr}
    , decltype(_impl_.requestid_){0u}
    , decltype(_impl_.autoleave_){false}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateGameMessage::~CreateGameMessage() {
  // @@protoc_insertion_point(destructor:CreateGameMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.gameinfo_;
}

void CreateGameMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateGameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gameinfo_ != nullptr);
      _impl_.gameinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.autoleave_) -
        reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.autoleave_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGameMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameInfo gameInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CreateGameMessage.password");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool autoLeave = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_autoleave(&has_bits);
          _impl_.autoleave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateGameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .NetGameInfo gameInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gameinfo(this),
        _Internal::gameinfo(this).GetCachedSize(), target, stream);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CreateGameMessage.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // optional bool autoLeave = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_autoleave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateGameMessage)
  return target;
}

size_t CreateGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CreateGameMessage)
  size_t total_size = 0;

  if (_internal_has_gameinfo()) {
    // required .NetGameInfo gameInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gameinfo_);
  }

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  return total_size;
}
size_t CreateGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateGameMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .NetGameInfo gameInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gameinfo_);

    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string password = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // optional bool autoLeave = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateGameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGameMessage::GetClassData() const { return &_class_data_; }


void CreateGameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateGameMessage*>(&to_msg);
  auto& from = static_cast<const CreateGameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CreateGameMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gameinfo()->::NetGameInfo::MergeFrom(
          from._internal_gameinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.autoleave_ = from._impl_.autoleave_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGameMessage::CopyFrom(const CreateGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_gameinfo()) {
    if (!_impl_.gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void CreateGameMessage::InternalSwap(CreateGameMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateGameMessage, _impl_.autoleave_)
      + sizeof(CreateGameMessage::_impl_.autoleave_)
      - PROTOBUF_FIELD_OFFSET(CreateGameMessage, _impl_.gameinfo_)>(
          reinterpret_cast<char*>(&_impl_.gameinfo_),
          reinterpret_cast<char*>(&other->_impl_.gameinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[28]);
}

// ===================================================================

class CreateGameFailedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateGameFailedMessage>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creategamefailurereason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CreateGameFailedMessage::CreateGameFailedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CreateGameFailedMessage)
}
CreateGameFailedMessage::CreateGameFailedMessage(const CreateGameFailedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateGameFailedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.creategamefailurereason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creategamefailurereason_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.creategamefailurereason_));
  // @@protoc_insertion_point(copy_constructor:CreateGameFailedMessage)
}

inline void CreateGameFailedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){0u}
    , decltype(_impl_.creategamefailurereason_){1}
  };
}

CreateGameFailedMessage::~CreateGameFailedMessage() {
  // @@protoc_insertion_point(destructor:CreateGameFailedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateGameFailedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateGameFailedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateGameFailedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateGameFailedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.requestid_ = 0u;
    _impl_.creategamefailurereason_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGameFailedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .CreateGameFailedMessage.CreateGameFailureReason createGameFailureReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CreateGameFailedMessage_CreateGameFailureReason_IsValid(val))) {
            _internal_set_creategamefailurereason(static_cast<::CreateGameFailedMessage_CreateGameFailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGameFailedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateGameFailedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .CreateGameFailedMessage.CreateGameFailureReason createGameFailureReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_creategamefailurereason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateGameFailedMessage)
  return target;
}

size_t CreateGameFailedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CreateGameFailedMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_creategamefailurereason()) {
    // required .CreateGameFailedMessage.CreateGameFailureReason createGameFailureReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_creategamefailurereason());
  }

  return total_size;
}
size_t CreateGameFailedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateGameFailedMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

    // required .CreateGameFailedMessage.CreateGameFailureReason createGameFailureReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_creategamefailurereason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGameFailedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateGameFailedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGameFailedMessage::GetClassData() const { return &_class_data_; }


void CreateGameFailedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateGameFailedMessage*>(&to_msg);
  auto& from = static_cast<const CreateGameFailedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CreateGameFailedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.creategamefailurereason_ = from._impl_.creategamefailurereason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGameFailedMessage::CopyFrom(const CreateGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateGameFailedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameFailedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CreateGameFailedMessage::InternalSwap(CreateGameFailedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.requestid_, other->_impl_.requestid_);
  swap(_impl_.creategamefailurereason_, other->_impl_.creategamefailurereason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGameFailedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[29]);
}

// ===================================================================

class JoinGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinGameMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autoleave(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spectateonly(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

JoinGameMessage::JoinGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JoinGameMessage)
}
JoinGameMessage::JoinGameMessage(const JoinGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinGameMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.password_){}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.autoleave_){}
    , decltype(_impl_.spectateonly_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.spectateonly_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.spectateonly_));
  // @@protoc_insertion_point(copy_constructor:JoinGameMessage)
}

inline void JoinGameMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.password_){}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.autoleave_){false}
    , decltype(_impl_.spectateonly_){false}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinGameMessage::~JoinGameMessage() {
  // @@protoc_insertion_point(destructor:JoinGameMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
}

void JoinGameMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.password_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.spectateonly_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.spectateonly_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "JoinGameMessage.password");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool autoLeave = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_autoleave(&has_bits);
          _impl_.autoleave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool spectateOnly = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_spectateonly(&has_bits);
          _impl_.spectateonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JoinGameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "JoinGameMessage.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // optional bool autoLeave = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_autoleave(), target);
  }

  // optional bool spectateOnly = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_spectateonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JoinGameMessage)
  return target;
}

size_t JoinGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameMessage)
  size_t total_size = 0;

  // required uint32 gameId = 1;
  if (_internal_has_gameid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string password = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional bool autoLeave = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool spectateOnly = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinGameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGameMessage::GetClassData() const { return &_class_data_; }


void JoinGameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinGameMessage*>(&to_msg);
  auto& from = static_cast<const JoinGameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JoinGameMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.autoleave_ = from._impl_.autoleave_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.spectateonly_ = from._impl_.spectateonly_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGameMessage::CopyFrom(const JoinGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void JoinGameMessage::InternalSwap(JoinGameMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGameMessage, _impl_.spectateonly_)
      + sizeof(JoinGameMessage::_impl_.spectateonly_)
      - PROTOBUF_FIELD_OFFSET(JoinGameMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[30]);
}

// ===================================================================

class RejoinGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RejoinGameMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autoleave(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RejoinGameMessage::RejoinGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RejoinGameMessage)
}
RejoinGameMessage::RejoinGameMessage(const RejoinGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RejoinGameMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.autoleave_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.autoleave_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.autoleave_));
  // @@protoc_insertion_point(copy_constructor:RejoinGameMessage)
}

inline void RejoinGameMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.autoleave_){false}
  };
}

RejoinGameMessage::~RejoinGameMessage() {
  // @@protoc_insertion_point(destructor:RejoinGameMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RejoinGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RejoinGameMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RejoinGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejoinGameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.autoleave_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.autoleave_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RejoinGameMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool autoLeave = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_autoleave(&has_bits);
          _impl_.autoleave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RejoinGameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RejoinGameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // optional bool autoLeave = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_autoleave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RejoinGameMessage)
  return target;
}

size_t RejoinGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RejoinGameMessage)
  size_t total_size = 0;

  // required uint32 gameId = 1;
  if (_internal_has_gameid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool autoLeave = 2 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RejoinGameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RejoinGameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RejoinGameMessage::GetClassData() const { return &_class_data_; }


void RejoinGameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RejoinGameMessage*>(&to_msg);
  auto& from = static_cast<const RejoinGameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RejoinGameMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.autoleave_ = from._impl_.autoleave_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RejoinGameMessage::CopyFrom(const RejoinGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejoinGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejoinGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RejoinGameMessage::InternalSwap(RejoinGameMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RejoinGameMessage, _impl_.autoleave_)
      + sizeof(RejoinGameMessage::_impl_.autoleave_)
      - PROTOBUF_FIELD_OFFSET(RejoinGameMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RejoinGameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[31]);
}

// ===================================================================

class JoinGameAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinGameAckMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_areyougameadmin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::NetGameInfo& gameinfo(const JoinGameAckMessage* msg);
  static void set_has_gameinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spectateonly(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::NetGameInfo&
JoinGameAckMessage::_Internal::gameinfo(const JoinGameAckMessage* msg) {
  return *msg->_impl_.gameinfo_;
}
JoinGameAckMessage::JoinGameAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JoinGameAckMessage)
}
JoinGameAckMessage::JoinGameAckMessage(const JoinGameAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinGameAckMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameinfo_){nullptr}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.areyougameadmin_){}
    , decltype(_impl_.spectateonly_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameinfo()) {
    _this->_impl_.gameinfo_ = new ::NetGameInfo(*from._impl_.gameinfo_);
  }
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.spectateonly_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.spectateonly_));
  // @@protoc_insertion_point(copy_constructor:JoinGameAckMessage)
}

inline void JoinGameAckMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameinfo_){nullptr}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.areyougameadmin_){false}
    , decltype(_impl_.spectateonly_){false}
  };
}

JoinGameAckMessage::~JoinGameAckMessage() {
  // @@protoc_insertion_point(destructor:JoinGameAckMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinGameAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gameinfo_;
}

void JoinGameAckMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameAckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.gameinfo_ != nullptr);
    _impl_.gameinfo_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.spectateonly_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.spectateonly_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameAckMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool areYouGameAdmin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_areyougameadmin(&has_bits);
          _impl_.areyougameadmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameInfo gameInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool spectateOnly = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_spectateonly(&has_bits);
          _impl_.spectateonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGameAckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JoinGameAckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required bool areYouGameAdmin = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_areyougameadmin(), target);
  }

  // required .NetGameInfo gameInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gameinfo(this),
        _Internal::gameinfo(this).GetCachedSize(), target, stream);
  }

  // optional bool spectateOnly = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_spectateonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JoinGameAckMessage)
  return target;
}

size_t JoinGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:JoinGameAckMessage)
  size_t total_size = 0;

  if (_internal_has_gameinfo()) {
    // required .NetGameInfo gameInfo = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gameinfo_);
  }

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_areyougameadmin()) {
    // required bool areYouGameAdmin = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t JoinGameAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameAckMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NetGameInfo gameInfo = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gameinfo_);

    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required bool areYouGameAdmin = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool spectateOnly = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGameAckMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinGameAckMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGameAckMessage::GetClassData() const { return &_class_data_; }


void JoinGameAckMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinGameAckMessage*>(&to_msg);
  auto& from = static_cast<const JoinGameAckMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JoinGameAckMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_gameinfo()->::NetGameInfo::MergeFrom(
          from._internal_gameinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.areyougameadmin_ = from._impl_.areyougameadmin_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.spectateonly_ = from._impl_.spectateonly_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGameAckMessage::CopyFrom(const JoinGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_gameinfo()) {
    if (!_impl_.gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void JoinGameAckMessage::InternalSwap(JoinGameAckMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGameAckMessage, _impl_.spectateonly_)
      + sizeof(JoinGameAckMessage::_impl_.spectateonly_)
      - PROTOBUF_FIELD_OFFSET(JoinGameAckMessage, _impl_.gameinfo_)>(
          reinterpret_cast<char*>(&_impl_.gameinfo_),
          reinterpret_cast<char*>(&other->_impl_.gameinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameAckMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[32]);
}

// ===================================================================

class JoinGameFailedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinGameFailedMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_joingamefailurereason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

JoinGameFailedMessage::JoinGameFailedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JoinGameFailedMessage)
}
JoinGameFailedMessage::JoinGameFailedMessage(const JoinGameFailedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinGameFailedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.joingamefailurereason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.joingamefailurereason_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.joingamefailurereason_));
  // @@protoc_insertion_point(copy_constructor:JoinGameFailedMessage)
}

inline void JoinGameFailedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.joingamefailurereason_){1}
  };
}

JoinGameFailedMessage::~JoinGameFailedMessage() {
  // @@protoc_insertion_point(destructor:JoinGameFailedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinGameFailedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoinGameFailedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinGameFailedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameFailedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.gameid_ = 0u;
    _impl_.joingamefailurereason_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameFailedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::JoinGameFailedMessage_JoinGameFailureReason_IsValid(val))) {
            _internal_set_joingamefailurereason(static_cast<::JoinGameFailedMessage_JoinGameFailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGameFailedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JoinGameFailedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_joingamefailurereason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JoinGameFailedMessage)
  return target;
}

size_t JoinGameFailedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:JoinGameFailedMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_joingamefailurereason()) {
    // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_joingamefailurereason());
  }

  return total_size;
}
size_t JoinGameFailedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameFailedMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_joingamefailurereason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGameFailedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinGameFailedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGameFailedMessage::GetClassData() const { return &_class_data_; }


void JoinGameFailedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinGameFailedMessage*>(&to_msg);
  auto& from = static_cast<const JoinGameFailedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JoinGameFailedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.joingamefailurereason_ = from._impl_.joingamefailurereason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGameFailedMessage::CopyFrom(const JoinGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameFailedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameFailedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void JoinGameFailedMessage::InternalSwap(JoinGameFailedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gameid_, other->_impl_.gameid_);
  swap(_impl_.joingamefailurereason_, other->_impl_.joingamefailurereason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameFailedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[33]);
}

// ===================================================================

class GamePlayerJoinedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GamePlayerJoinedMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isgameadmin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GamePlayerJoinedMessage::GamePlayerJoinedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GamePlayerJoinedMessage)
}
GamePlayerJoinedMessage::GamePlayerJoinedMessage(const GamePlayerJoinedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GamePlayerJoinedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.isgameadmin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isgameadmin_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.isgameadmin_));
  // @@protoc_insertion_point(copy_constructor:GamePlayerJoinedMessage)
}

inline void GamePlayerJoinedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.isgameadmin_){false}
  };
}

GamePlayerJoinedMessage::~GamePlayerJoinedMessage() {
  // @@protoc_insertion_point(destructor:GamePlayerJoinedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GamePlayerJoinedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GamePlayerJoinedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GamePlayerJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerJoinedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isgameadmin_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.isgameadmin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePlayerJoinedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool isGameAdmin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_isgameadmin(&has_bits);
          _impl_.isgameadmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GamePlayerJoinedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GamePlayerJoinedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required bool isGameAdmin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isgameadmin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GamePlayerJoinedMessage)
  return target;
}

size_t GamePlayerJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GamePlayerJoinedMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_isgameadmin()) {
    // required bool isGameAdmin = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GamePlayerJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerJoinedMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required bool isGameAdmin = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GamePlayerJoinedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GamePlayerJoinedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GamePlayerJoinedMessage::GetClassData() const { return &_class_data_; }


void GamePlayerJoinedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GamePlayerJoinedMessage*>(&to_msg);
  auto& from = static_cast<const GamePlayerJoinedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerJoinedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.isgameadmin_ = from._impl_.isgameadmin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GamePlayerJoinedMessage::CopyFrom(const GamePlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerJoinedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GamePlayerJoinedMessage::InternalSwap(GamePlayerJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GamePlayerJoinedMessage, _impl_.isgameadmin_)
      + sizeof(GamePlayerJoinedMessage::_impl_.isgameadmin_)
      - PROTOBUF_FIELD_OFFSET(GamePlayerJoinedMessage, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePlayerJoinedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[34]);
}

// ===================================================================

class GamePlayerLeftMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GamePlayerLeftMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gameplayerleftreason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GamePlayerLeftMessage::GamePlayerLeftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GamePlayerLeftMessage)
}
GamePlayerLeftMessage::GamePlayerLeftMessage(const GamePlayerLeftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GamePlayerLeftMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.gameplayerleftreason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gameplayerleftreason_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.gameplayerleftreason_));
  // @@protoc_insertion_point(copy_constructor:GamePlayerLeftMessage)
}

inline void GamePlayerLeftMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.gameplayerleftreason_){0}
  };
}

GamePlayerLeftMessage::~GamePlayerLeftMessage() {
  // @@protoc_insertion_point(destructor:GamePlayerLeftMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GamePlayerLeftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GamePlayerLeftMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GamePlayerLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerLeftMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gameplayerleftreason_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.gameplayerleftreason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePlayerLeftMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(val))) {
            _internal_set_gameplayerleftreason(static_cast<::GamePlayerLeftMessage_GamePlayerLeftReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GamePlayerLeftMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GamePlayerLeftMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gameplayerleftreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GamePlayerLeftMessage)
  return target;
}

size_t GamePlayerLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GamePlayerLeftMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_gameplayerleftreason()) {
    // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gameplayerleftreason());
  }

  return total_size;
}
size_t GamePlayerLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerLeftMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gameplayerleftreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GamePlayerLeftMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GamePlayerLeftMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GamePlayerLeftMessage::GetClassData() const { return &_class_data_; }


void GamePlayerLeftMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GamePlayerLeftMessage*>(&to_msg);
  auto& from = static_cast<const GamePlayerLeftMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerLeftMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gameplayerleftreason_ = from._impl_.gameplayerleftreason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GamePlayerLeftMessage::CopyFrom(const GamePlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerLeftMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GamePlayerLeftMessage::InternalSwap(GamePlayerLeftMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GamePlayerLeftMessage, _impl_.gameplayerleftreason_)
      + sizeof(GamePlayerLeftMessage::_impl_.gameplayerleftreason_)
      - PROTOBUF_FIELD_OFFSET(GamePlayerLeftMessage, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePlayerLeftMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[35]);
}

// ===================================================================

class GameSpectatorJoinedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSpectatorJoinedMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameSpectatorJoinedMessage::GameSpectatorJoinedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameSpectatorJoinedMessage)
}
GameSpectatorJoinedMessage::GameSpectatorJoinedMessage(const GameSpectatorJoinedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameSpectatorJoinedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:GameSpectatorJoinedMessage)
}

inline void GameSpectatorJoinedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
  };
}

GameSpectatorJoinedMessage::~GameSpectatorJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameSpectatorJoinedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameSpectatorJoinedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameSpectatorJoinedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameSpectatorJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpectatorJoinedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSpectatorJoinedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameSpectatorJoinedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameSpectatorJoinedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpectatorJoinedMessage)
  return target;
}

size_t GameSpectatorJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpectatorJoinedMessage)
  size_t total_size = 0;

  // required uint32 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameSpectatorJoinedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameSpectatorJoinedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameSpectatorJoinedMessage::GetClassData() const { return &_class_data_; }


void GameSpectatorJoinedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameSpectatorJoinedMessage*>(&to_msg);
  auto& from = static_cast<const GameSpectatorJoinedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameSpectatorJoinedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameSpectatorJoinedMessage::CopyFrom(const GameSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpectatorJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSpectatorJoinedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameSpectatorJoinedMessage::InternalSwap(GameSpectatorJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSpectatorJoinedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[36]);
}

// ===================================================================

class GameSpectatorLeftMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSpectatorLeftMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamespectatorleftreason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameSpectatorLeftMessage::GameSpectatorLeftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameSpectatorLeftMessage)
}
GameSpectatorLeftMessage::GameSpectatorLeftMessage(const GameSpectatorLeftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameSpectatorLeftMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.gamespectatorleftreason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gamespectatorleftreason_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.gamespectatorleftreason_));
  // @@protoc_insertion_point(copy_constructor:GameSpectatorLeftMessage)
}

inline void GameSpectatorLeftMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.gamespectatorleftreason_){0}
  };
}

GameSpectatorLeftMessage::~GameSpectatorLeftMessage() {
  // @@protoc_insertion_point(destructor:GameSpectatorLeftMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameSpectatorLeftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameSpectatorLeftMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameSpectatorLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpectatorLeftMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gamespectatorleftreason_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.gamespectatorleftreason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSpectatorLeftMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(val))) {
            _internal_set_gamespectatorleftreason(static_cast<::GamePlayerLeftMessage_GamePlayerLeftReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameSpectatorLeftMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameSpectatorLeftMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamespectatorleftreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpectatorLeftMessage)
  return target;
}

size_t GameSpectatorLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameSpectatorLeftMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_gamespectatorleftreason()) {
    // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamespectatorleftreason());
  }

  return total_size;
}
size_t GameSpectatorLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpectatorLeftMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamespectatorleftreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameSpectatorLeftMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameSpectatorLeftMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameSpectatorLeftMessage::GetClassData() const { return &_class_data_; }


void GameSpectatorLeftMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameSpectatorLeftMessage*>(&to_msg);
  auto& from = static_cast<const GameSpectatorLeftMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameSpectatorLeftMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gamespectatorleftreason_ = from._impl_.gamespectatorleftreason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameSpectatorLeftMessage::CopyFrom(const GameSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpectatorLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSpectatorLeftMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameSpectatorLeftMessage::InternalSwap(GameSpectatorLeftMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameSpectatorLeftMessage, _impl_.gamespectatorleftreason_)
      + sizeof(GameSpectatorLeftMessage::_impl_.gamespectatorleftreason_)
      - PROTOBUF_FIELD_OFFSET(GameSpectatorLeftMessage, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSpectatorLeftMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[37]);
}

// ===================================================================

class GameAdminChangedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAdminChangedMessage>()._impl_._has_bits_);
  static void set_has_newadminplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameAdminChangedMessage::GameAdminChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameAdminChangedMessage)
}
GameAdminChangedMessage::GameAdminChangedMessage(const GameAdminChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameAdminChangedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newadminplayerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.newadminplayerid_ = from._impl_.newadminplayerid_;
  // @@protoc_insertion_point(copy_constructor:GameAdminChangedMessage)
}

inline void GameAdminChangedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newadminplayerid_){0u}
  };
}

GameAdminChangedMessage::~GameAdminChangedMessage() {
  // @@protoc_insertion_point(destructor:GameAdminChangedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameAdminChangedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameAdminChangedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameAdminChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameAdminChangedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newadminplayerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameAdminChangedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 newAdminPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_newadminplayerid(&has_bits);
          _impl_.newadminplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameAdminChangedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameAdminChangedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 newAdminPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_newadminplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameAdminChangedMessage)
  return target;
}

size_t GameAdminChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameAdminChangedMessage)
  size_t total_size = 0;

  // required uint32 newAdminPlayerId = 1;
  if (_internal_has_newadminplayerid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newadminplayerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameAdminChangedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameAdminChangedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameAdminChangedMessage::GetClassData() const { return &_class_data_; }


void GameAdminChangedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameAdminChangedMessage*>(&to_msg);
  auto& from = static_cast<const GameAdminChangedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameAdminChangedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_newadminplayerid()) {
    _this->_internal_set_newadminplayerid(from._internal_newadminplayerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameAdminChangedMessage::CopyFrom(const GameAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameAdminChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAdminChangedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameAdminChangedMessage::InternalSwap(GameAdminChangedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.newadminplayerid_, other->_impl_.newadminplayerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAdminChangedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[38]);
}

// ===================================================================

class RemovedFromGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RemovedFromGameMessage>()._impl_._has_bits_);
  static void set_has_removedfromgamereason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RemovedFromGameMessage::RemovedFromGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemovedFromGameMessage)
}
RemovedFromGameMessage::RemovedFromGameMessage(const RemovedFromGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemovedFromGameMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removedfromgamereason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.removedfromgamereason_ = from._impl_.removedfromgamereason_;
  // @@protoc_insertion_point(copy_constructor:RemovedFromGameMessage)
}

inline void RemovedFromGameMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removedfromgamereason_){0}
  };
}

RemovedFromGameMessage::~RemovedFromGameMessage() {
  // @@protoc_insertion_point(destructor:RemovedFromGameMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemovedFromGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemovedFromGameMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemovedFromGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RemovedFromGameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.removedfromgamereason_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemovedFromGameMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RemovedFromGameMessage_RemovedFromGameReason_IsValid(val))) {
            _internal_set_removedfromgamereason(static_cast<::RemovedFromGameMessage_RemovedFromGameReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemovedFromGameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemovedFromGameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_removedfromgamereason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemovedFromGameMessage)
  return target;
}

size_t RemovedFromGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemovedFromGameMessage)
  size_t total_size = 0;

  // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 1;
  if (_internal_has_removedfromgamereason()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_removedfromgamereason());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemovedFromGameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemovedFromGameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemovedFromGameMessage::GetClassData() const { return &_class_data_; }


void RemovedFromGameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemovedFromGameMessage*>(&to_msg);
  auto& from = static_cast<const RemovedFromGameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemovedFromGameMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_removedfromgamereason()) {
    _this->_internal_set_removedfromgamereason(from._internal_removedfromgamereason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemovedFromGameMessage::CopyFrom(const RemovedFromGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemovedFromGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovedFromGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RemovedFromGameMessage::InternalSwap(RemovedFromGameMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.removedfromgamereason_, other->_impl_.removedfromgamereason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovedFromGameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[39]);
}

// ===================================================================

class KickPlayerRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<KickPlayerRequestMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

KickPlayerRequestMessage::KickPlayerRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KickPlayerRequestMessage)
}
KickPlayerRequestMessage::KickPlayerRequestMessage(const KickPlayerRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KickPlayerRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:KickPlayerRequestMessage)
}

inline void KickPlayerRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
  };
}

KickPlayerRequestMessage::~KickPlayerRequestMessage() {
  // @@protoc_insertion_point(destructor:KickPlayerRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KickPlayerRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KickPlayerRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KickPlayerRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPlayerRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickPlayerRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KickPlayerRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KickPlayerRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KickPlayerRequestMessage)
  return target;
}

size_t KickPlayerRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickPlayerRequestMessage)
  size_t total_size = 0;

  // required uint32 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KickPlayerRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KickPlayerRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KickPlayerRequestMessage::GetClassData() const { return &_class_data_; }


void KickPlayerRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KickPlayerRequestMessage*>(&to_msg);
  auto& from = static_cast<const KickPlayerRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KickPlayerRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KickPlayerRequestMessage::CopyFrom(const KickPlayerRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPlayerRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void KickPlayerRequestMessage::InternalSwap(KickPlayerRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickPlayerRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[40]);
}

// ===================================================================

class LeaveGameRequestMessage::_Internal {
 public:
};

LeaveGameRequestMessage::LeaveGameRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:LeaveGameRequestMessage)
}
LeaveGameRequestMessage::LeaveGameRequestMessage(const LeaveGameRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LeaveGameRequestMessage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LeaveGameRequestMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveGameRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveGameRequestMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LeaveGameRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[41]);
}

// ===================================================================

class InvitePlayerToGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<InvitePlayerToGameMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

InvitePlayerToGameMessage::InvitePlayerToGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InvitePlayerToGameMessage)
}
InvitePlayerToGameMessage::InvitePlayerToGameMessage(const InvitePlayerToGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InvitePlayerToGameMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:InvitePlayerToGameMessage)
}

inline void InvitePlayerToGameMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.playerid_){0u}
  };
}

InvitePlayerToGameMessage::~InvitePlayerToGameMessage() {
  // @@protoc_insertion_point(destructor:InvitePlayerToGameMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvitePlayerToGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InvitePlayerToGameMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InvitePlayerToGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InvitePlayerToGameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playerid_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvitePlayerToGameMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvitePlayerToGameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InvitePlayerToGameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InvitePlayerToGameMessage)
  return target;
}

size_t InvitePlayerToGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InvitePlayerToGameMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return total_size;
}
size_t InvitePlayerToGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InvitePlayerToGameMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvitePlayerToGameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InvitePlayerToGameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvitePlayerToGameMessage::GetClassData() const { return &_class_data_; }


void InvitePlayerToGameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InvitePlayerToGameMessage*>(&to_msg);
  auto& from = static_cast<const InvitePlayerToGameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InvitePlayerToGameMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvitePlayerToGameMessage::CopyFrom(const InvitePlayerToGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InvitePlayerToGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitePlayerToGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InvitePlayerToGameMessage::InternalSwap(InvitePlayerToGameMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvitePlayerToGameMessage, _impl_.playerid_)
      + sizeof(InvitePlayerToGameMessage::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(InvitePlayerToGameMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvitePlayerToGameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[42]);
}

// ===================================================================

class InviteNotifyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<InviteNotifyMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playeridwho(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playeridbywhom(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

InviteNotifyMessage::InviteNotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InviteNotifyMessage)
}
InviteNotifyMessage::InviteNotifyMessage(const InviteNotifyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InviteNotifyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.playeridwho_){}
    , decltype(_impl_.playeridbywhom_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playeridbywhom_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playeridbywhom_));
  // @@protoc_insertion_point(copy_constructor:InviteNotifyMessage)
}

inline void InviteNotifyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.playeridwho_){0u}
    , decltype(_impl_.playeridbywhom_){0u}
  };
}

InviteNotifyMessage::~InviteNotifyMessage() {
  // @@protoc_insertion_point(destructor:InviteNotifyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InviteNotifyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InviteNotifyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InviteNotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InviteNotifyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playeridbywhom_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playeridbywhom_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InviteNotifyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerIdWho = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playeridwho(&has_bits);
          _impl_.playeridwho_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerIdByWhom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_playeridbywhom(&has_bits);
          _impl_.playeridbywhom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InviteNotifyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InviteNotifyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerIdWho = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playeridwho(), target);
  }

  // required uint32 playerIdByWhom = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_playeridbywhom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InviteNotifyMessage)
  return target;
}

size_t InviteNotifyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InviteNotifyMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_playeridwho()) {
    // required uint32 playerIdWho = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playeridwho());
  }

  if (_internal_has_playeridbywhom()) {
    // required uint32 playerIdByWhom = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playeridbywhom());
  }

  return total_size;
}
size_t InviteNotifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InviteNotifyMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required uint32 playerIdWho = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playeridwho());

    // required uint32 playerIdByWhom = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playeridbywhom());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InviteNotifyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InviteNotifyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InviteNotifyMessage::GetClassData() const { return &_class_data_; }


void InviteNotifyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InviteNotifyMessage*>(&to_msg);
  auto& from = static_cast<const InviteNotifyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InviteNotifyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playeridwho_ = from._impl_.playeridwho_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.playeridbywhom_ = from._impl_.playeridbywhom_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InviteNotifyMessage::CopyFrom(const InviteNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InviteNotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteNotifyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InviteNotifyMessage::InternalSwap(InviteNotifyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InviteNotifyMessage, _impl_.playeridbywhom_)
      + sizeof(InviteNotifyMessage::_impl_.playeridbywhom_)
      - PROTOBUF_FIELD_OFFSET(InviteNotifyMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InviteNotifyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[43]);
}

// ===================================================================

class RejectGameInvitationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RejectGameInvitationMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_myrejectreason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RejectGameInvitationMessage::RejectGameInvitationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RejectGameInvitationMessage)
}
RejectGameInvitationMessage::RejectGameInvitationMessage(const RejectGameInvitationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RejectGameInvitationMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.myrejectreason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.myrejectreason_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.myrejectreason_));
  // @@protoc_insertion_point(copy_constructor:RejectGameInvitationMessage)
}

inline void RejectGameInvitationMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.myrejectreason_){0}
  };
}

RejectGameInvitationMessage::~RejectGameInvitationMessage() {
  // @@protoc_insertion_point(destructor:RejectGameInvitationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RejectGameInvitationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RejectGameInvitationMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RejectGameInvitationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejectGameInvitationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.myrejectreason_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.myrejectreason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RejectGameInvitationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RejectGameInvitationMessage_RejectGameInvReason_IsValid(val))) {
            _internal_set_myrejectreason(static_cast<::RejectGameInvitationMessage_RejectGameInvReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RejectGameInvitationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RejectGameInvitationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_myrejectreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RejectGameInvitationMessage)
  return target;
}

size_t RejectGameInvitationMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RejectGameInvitationMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_myrejectreason()) {
    // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_myrejectreason());
  }

  return total_size;
}
size_t RejectGameInvitationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RejectGameInvitationMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_myrejectreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RejectGameInvitationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RejectGameInvitationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RejectGameInvitationMessage::GetClassData() const { return &_class_data_; }


void RejectGameInvitationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RejectGameInvitationMessage*>(&to_msg);
  auto& from = static_cast<const RejectGameInvitationMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RejectGameInvitationMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.myrejectreason_ = from._impl_.myrejectreason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RejectGameInvitationMessage::CopyFrom(const RejectGameInvitationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejectGameInvitationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectGameInvitationMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RejectGameInvitationMessage::InternalSwap(RejectGameInvitationMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RejectGameInvitationMessage, _impl_.myrejectreason_)
      + sizeof(RejectGameInvitationMessage::_impl_.myrejectreason_)
      - PROTOBUF_FIELD_OFFSET(RejectGameInvitationMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RejectGameInvitationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[44]);
}

// ===================================================================

class RejectInvNotifyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RejectInvNotifyMessage>()._impl_._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playerrejectreason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

RejectInvNotifyMessage::RejectInvNotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RejectInvNotifyMessage)
}
RejectInvNotifyMessage::RejectInvNotifyMessage(const RejectInvNotifyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RejectInvNotifyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.playerrejectreason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerrejectreason_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerrejectreason_));
  // @@protoc_insertion_point(copy_constructor:RejectInvNotifyMessage)
}

inline void RejectInvNotifyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.playerrejectreason_){0}
  };
}

RejectInvNotifyMessage::~RejectInvNotifyMessage() {
  // @@protoc_insertion_point(destructor:RejectInvNotifyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RejectInvNotifyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RejectInvNotifyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RejectInvNotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejectInvNotifyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playerrejectreason_) -
        reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.playerrejectreason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RejectInvNotifyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RejectGameInvitationMessage_RejectGameInvReason_IsValid(val))) {
            _internal_set_playerrejectreason(static_cast<::RejectGameInvitationMessage_RejectGameInvReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RejectInvNotifyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RejectInvNotifyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_playerrejectreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RejectInvNotifyMessage)
  return target;
}

size_t RejectInvNotifyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RejectInvNotifyMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_playerrejectreason()) {
    // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerrejectreason());
  }

  return total_size;
}
size_t RejectInvNotifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RejectInvNotifyMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerrejectreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RejectInvNotifyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RejectInvNotifyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RejectInvNotifyMessage::GetClassData() const { return &_class_data_; }


void RejectInvNotifyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RejectInvNotifyMessage*>(&to_msg);
  auto& from = static_cast<const RejectInvNotifyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RejectInvNotifyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.playerrejectreason_ = from._impl_.playerrejectreason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RejectInvNotifyMessage::CopyFrom(const RejectInvNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejectInvNotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectInvNotifyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RejectInvNotifyMessage::InternalSwap(RejectInvNotifyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RejectInvNotifyMessage, _impl_.playerrejectreason_)
      + sizeof(RejectInvNotifyMessage::_impl_.playerrejectreason_)
      - PROTOBUF_FIELD_OFFSET(RejectInvNotifyMessage, _impl_.gameid_)>(
          reinterpret_cast<char*>(&_impl_.gameid_),
          reinterpret_cast<char*>(&other->_impl_.gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RejectInvNotifyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[45]);
}

// ===================================================================

class StartEventMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StartEventMessage>()._impl_._has_bits_);
  static void set_has_starteventtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fillwithcomputerplayers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StartEventMessage::StartEventMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StartEventMessage)
}
StartEventMessage::StartEventMessage(const StartEventMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartEventMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.starteventtype_){}
    , decltype(_impl_.fillwithcomputerplayers_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.starteventtype_, &from._impl_.starteventtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fillwithcomputerplayers_) -
    reinterpret_cast<char*>(&_impl_.starteventtype_)) + sizeof(_impl_.fillwithcomputerplayers_));
  // @@protoc_insertion_point(copy_constructor:StartEventMessage)
}

inline void StartEventMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.starteventtype_){0}
    , decltype(_impl_.fillwithcomputerplayers_){false}
  };
}

StartEventMessage::~StartEventMessage() {
  // @@protoc_insertion_point(destructor:StartEventMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartEventMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartEventMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartEventMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartEventMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.starteventtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fillwithcomputerplayers_) -
        reinterpret_cast<char*>(&_impl_.starteventtype_)) + sizeof(_impl_.fillwithcomputerplayers_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartEventMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .StartEventMessage.StartEventType startEventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::StartEventMessage_StartEventType_IsValid(val))) {
            _internal_set_starteventtype(static_cast<::StartEventMessage_StartEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool fillWithComputerPlayers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fillwithcomputerplayers(&has_bits);
          _impl_.fillwithcomputerplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartEventMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartEventMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .StartEventMessage.StartEventType startEventType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_starteventtype(), target);
  }

  // optional bool fillWithComputerPlayers = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_fillwithcomputerplayers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartEventMessage)
  return target;
}

size_t StartEventMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartEventMessage)
  size_t total_size = 0;

  // required .StartEventMessage.StartEventType startEventType = 1;
  if (_internal_has_starteventtype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_starteventtype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool fillWithComputerPlayers = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartEventMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartEventMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartEventMessage::GetClassData() const { return &_class_data_; }


void StartEventMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartEventMessage*>(&to_msg);
  auto& from = static_cast<const StartEventMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StartEventMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.starteventtype_ = from._impl_.starteventtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fillwithcomputerplayers_ = from._impl_.fillwithcomputerplayers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartEventMessage::CopyFrom(const StartEventMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartEventMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEventMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StartEventMessage::InternalSwap(StartEventMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartEventMessage, _impl_.fillwithcomputerplayers_)
      + sizeof(StartEventMessage::_impl_.fillwithcomputerplayers_)
      - PROTOBUF_FIELD_OFFSET(StartEventMessage, _impl_.starteventtype_)>(
          reinterpret_cast<char*>(&_impl_.starteventtype_),
          reinterpret_cast<char*>(&other->_impl_.starteventtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartEventMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[46]);
}

// ===================================================================

class StartEventAckMessage::_Internal {
 public:
};

StartEventAckMessage::StartEventAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:StartEventAckMessage)
}
StartEventAckMessage::StartEventAckMessage(const StartEventAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StartEventAckMessage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StartEventAckMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartEventAckMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartEventAckMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StartEventAckMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[47]);
}

// ===================================================================

class GameStartInitialMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameStartInitialMessage>()._impl_._has_bits_);
  static void set_has_startdealerplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameStartInitialMessage::GameStartInitialMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameStartInitialMessage)
}
GameStartInitialMessage::GameStartInitialMessage(const GameStartInitialMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStartInitialMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerseats_){from._impl_.playerseats_}
    , /*decltype(_impl_._playerseats_cached_byte_size_)*/{0}
    , decltype(_impl_.startdealerplayerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.startdealerplayerid_ = from._impl_.startdealerplayerid_;
  // @@protoc_insertion_point(copy_constructor:GameStartInitialMessage)
}

inline void GameStartInitialMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerseats_){arena}
    , /*decltype(_impl_._playerseats_cached_byte_size_)*/{0}
    , decltype(_impl_.startdealerplayerid_){0u}
  };
}

GameStartInitialMessage::~GameStartInitialMessage() {
  // @@protoc_insertion_point(destructor:GameStartInitialMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStartInitialMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerseats_.~RepeatedField();
}

void GameStartInitialMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStartInitialMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartInitialMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerseats_.Clear();
  _impl_.startdealerplayerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStartInitialMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 startDealerPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_startdealerplayerid(&has_bits);
          _impl_.startdealerplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 playerSeats = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_playerseats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_playerseats(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStartInitialMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStartInitialMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 startDealerPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startdealerplayerid(), target);
  }

  // repeated uint32 playerSeats = 2 [packed = true];
  {
    int byte_size = _impl_._playerseats_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_playerseats(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartInitialMessage)
  return target;
}

size_t GameStartInitialMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartInitialMessage)
  size_t total_size = 0;

  // required uint32 startDealerPlayerId = 1;
  if (_internal_has_startdealerplayerid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_startdealerplayerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerSeats = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.playerseats_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._playerseats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStartInitialMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStartInitialMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStartInitialMessage::GetClassData() const { return &_class_data_; }


void GameStartInitialMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStartInitialMessage*>(&to_msg);
  auto& from = static_cast<const GameStartInitialMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameStartInitialMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playerseats_.MergeFrom(from._impl_.playerseats_);
  if (from._internal_has_startdealerplayerid()) {
    _this->_internal_set_startdealerplayerid(from._internal_startdealerplayerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStartInitialMessage::CopyFrom(const GameStartInitialMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartInitialMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartInitialMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameStartInitialMessage::InternalSwap(GameStartInitialMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.playerseats_.InternalSwap(&other->_impl_.playerseats_);
  swap(_impl_.startdealerplayerid_, other->_impl_.startdealerplayerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStartInitialMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[48]);
}

// ===================================================================

class GameStartRejoinMessage_RejoinPlayerData::_Internal {
 public:
  using HasBits = decltype(std::declval<GameStartRejoinMessage_RejoinPlayerData>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playermoney(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameStartRejoinMessage.RejoinPlayerData)
}
GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData(const GameStartRejoinMessage_RejoinPlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStartRejoinMessage_RejoinPlayerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.playermoney_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playermoney_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.playermoney_));
  // @@protoc_insertion_point(copy_constructor:GameStartRejoinMessage.RejoinPlayerData)
}

inline void GameStartRejoinMessage_RejoinPlayerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.playermoney_){0u}
  };
}

GameStartRejoinMessage_RejoinPlayerData::~GameStartRejoinMessage_RejoinPlayerData() {
  // @@protoc_insertion_point(destructor:GameStartRejoinMessage.RejoinPlayerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStartRejoinMessage_RejoinPlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameStartRejoinMessage_RejoinPlayerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStartRejoinMessage_RejoinPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartRejoinMessage.RejoinPlayerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playermoney_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.playermoney_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStartRejoinMessage_RejoinPlayerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playermoney(&has_bits);
          _impl_.playermoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStartRejoinMessage_RejoinPlayerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStartRejoinMessage.RejoinPlayerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required uint32 playerMoney = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playermoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartRejoinMessage.RejoinPlayerData)
  return target;
}

size_t GameStartRejoinMessage_RejoinPlayerData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartRejoinMessage.RejoinPlayerData)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_playermoney()) {
    // required uint32 playerMoney = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playermoney());
  }

  return total_size;
}
size_t GameStartRejoinMessage_RejoinPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartRejoinMessage.RejoinPlayerData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required uint32 playerMoney = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStartRejoinMessage_RejoinPlayerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStartRejoinMessage_RejoinPlayerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStartRejoinMessage_RejoinPlayerData::GetClassData() const { return &_class_data_; }


void GameStartRejoinMessage_RejoinPlayerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStartRejoinMessage_RejoinPlayerData*>(&to_msg);
  auto& from = static_cast<const GameStartRejoinMessage_RejoinPlayerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameStartRejoinMessage.RejoinPlayerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playermoney_ = from._impl_.playermoney_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStartRejoinMessage_RejoinPlayerData::CopyFrom(const GameStartRejoinMessage_RejoinPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartRejoinMessage.RejoinPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage_RejoinPlayerData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameStartRejoinMessage_RejoinPlayerData::InternalSwap(GameStartRejoinMessage_RejoinPlayerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStartRejoinMessage_RejoinPlayerData, _impl_.playermoney_)
      + sizeof(GameStartRejoinMessage_RejoinPlayerData::_impl_.playermoney_)
      - PROTOBUF_FIELD_OFFSET(GameStartRejoinMessage_RejoinPlayerData, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStartRejoinMessage_RejoinPlayerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[49]);
}

// ===================================================================

class GameStartRejoinMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameStartRejoinMessage>()._impl_._has_bits_);
  static void set_has_startdealerplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_handnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameStartRejoinMessage::GameStartRejoinMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameStartRejoinMessage)
}
GameStartRejoinMessage::GameStartRejoinMessage(const GameStartRejoinMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStartRejoinMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rejoinplayerdata_){from._impl_.rejoinplayerdata_}
    , decltype(_impl_.startdealerplayerid_){}
    , decltype(_impl_.handnum_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.startdealerplayerid_, &from._impl_.startdealerplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.handnum_) -
    reinterpret_cast<char*>(&_impl_.startdealerplayerid_)) + sizeof(_impl_.handnum_));
  // @@protoc_insertion_point(copy_constructor:GameStartRejoinMessage)
}

inline void GameStartRejoinMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rejoinplayerdata_){arena}
    , decltype(_impl_.startdealerplayerid_){0u}
    , decltype(_impl_.handnum_){0u}
  };
}

GameStartRejoinMessage::~GameStartRejoinMessage() {
  // @@protoc_insertion_point(destructor:GameStartRejoinMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStartRejoinMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rejoinplayerdata_.~RepeatedPtrField();
}

void GameStartRejoinMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStartRejoinMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartRejoinMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rejoinplayerdata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.startdealerplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.handnum_) -
        reinterpret_cast<char*>(&_impl_.startdealerplayerid_)) + sizeof(_impl_.handnum_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStartRejoinMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 startDealerPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_startdealerplayerid(&has_bits);
          _impl_.startdealerplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 handNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_handnum(&has_bits);
          _impl_.handnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rejoinplayerdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStartRejoinMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStartRejoinMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 startDealerPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startdealerplayerid(), target);
  }

  // required uint32 handNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_handnum(), target);
  }

  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rejoinplayerdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_rejoinplayerdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartRejoinMessage)
  return target;
}

size_t GameStartRejoinMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartRejoinMessage)
  size_t total_size = 0;

  if (_internal_has_startdealerplayerid()) {
    // required uint32 startDealerPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_startdealerplayerid());
  }

  if (_internal_has_handnum()) {
    // required uint32 handNum = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handnum());
  }

  return total_size;
}
size_t GameStartRejoinMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartRejoinMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 startDealerPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_startdealerplayerid());

    // required uint32 handNum = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 3;
  total_size += 1UL * this->_internal_rejoinplayerdata_size();
  for (const auto& msg : this->_impl_.rejoinplayerdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStartRejoinMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStartRejoinMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStartRejoinMessage::GetClassData() const { return &_class_data_; }


void GameStartRejoinMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStartRejoinMessage*>(&to_msg);
  auto& from = static_cast<const GameStartRejoinMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameStartRejoinMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rejoinplayerdata_.MergeFrom(from._impl_.rejoinplayerdata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.startdealerplayerid_ = from._impl_.startdealerplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.handnum_ = from._impl_.handnum_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStartRejoinMessage::CopyFrom(const GameStartRejoinMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartRejoinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rejoinplayerdata_))
    return false;
  return true;
}

void GameStartRejoinMessage::InternalSwap(GameStartRejoinMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rejoinplayerdata_.InternalSwap(&other->_impl_.rejoinplayerdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStartRejoinMessage, _impl_.handnum_)
      + sizeof(GameStartRejoinMessage::_impl_.handnum_)
      - PROTOBUF_FIELD_OFFSET(GameStartRejoinMessage, _impl_.startdealerplayerid_)>(
          reinterpret_cast<char*>(&_impl_.startdealerplayerid_),
          reinterpret_cast<char*>(&other->_impl_.startdealerplayerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStartRejoinMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[50]);
}

// ===================================================================

class HandStartMessage_PlainCards::_Internal {
 public:
  using HasBits = decltype(std::declval<HandStartMessage_PlainCards>()._impl_._has_bits_);
  static void set_has_plaincard1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plaincard2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

HandStartMessage_PlainCards::HandStartMessage_PlainCards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HandStartMessage.PlainCards)
}
HandStartMessage_PlainCards::HandStartMessage_PlainCards(const HandStartMessage_PlainCards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandStartMessage_PlainCards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plaincard1_){}
    , decltype(_impl_.plaincard2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.plaincard1_, &from._impl_.plaincard1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.plaincard2_) -
    reinterpret_cast<char*>(&_impl_.plaincard1_)) + sizeof(_impl_.plaincard2_));
  // @@protoc_insertion_point(copy_constructor:HandStartMessage.PlainCards)
}

inline void HandStartMessage_PlainCards::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plaincard1_){0u}
    , decltype(_impl_.plaincard2_){0u}
  };
}

HandStartMessage_PlainCards::~HandStartMessage_PlainCards() {
  // @@protoc_insertion_point(destructor:HandStartMessage.PlainCards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandStartMessage_PlainCards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HandStartMessage_PlainCards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandStartMessage_PlainCards::Clear() {
// @@protoc_insertion_point(message_clear_start:HandStartMessage.PlainCards)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.plaincard1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.plaincard2_) -
        reinterpret_cast<char*>(&_impl_.plaincard1_)) + sizeof(_impl_.plaincard2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandStartMessage_PlainCards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 plainCard1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_plaincard1(&has_bits);
          _impl_.plaincard1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 plainCard2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_plaincard2(&has_bits);
          _impl_.plaincard2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandStartMessage_PlainCards::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HandStartMessage.PlainCards)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 plainCard1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_plaincard1(), target);
  }

  // required uint32 plainCard2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_plaincard2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HandStartMessage.PlainCards)
  return target;
}

size_t HandStartMessage_PlainCards::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HandStartMessage.PlainCards)
  size_t total_size = 0;

  if (_internal_has_plaincard1()) {
    // required uint32 plainCard1 = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_plaincard1());
  }

  if (_internal_has_plaincard2()) {
    // required uint32 plainCard2 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_plaincard2());
  }

  return total_size;
}
size_t HandStartMessage_PlainCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HandStartMessage.PlainCards)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 plainCard1 = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_plaincard1());

    // required uint32 plainCard2 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_plaincard2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandStartMessage_PlainCards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandStartMessage_PlainCards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandStartMessage_PlainCards::GetClassData() const { return &_class_data_; }


void HandStartMessage_PlainCards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandStartMessage_PlainCards*>(&to_msg);
  auto& from = static_cast<const HandStartMessage_PlainCards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HandStartMessage.PlainCards)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.plaincard1_ = from._impl_.plaincard1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.plaincard2_ = from._impl_.plaincard2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandStartMessage_PlainCards::CopyFrom(const HandStartMessage_PlainCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandStartMessage.PlainCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage_PlainCards::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void HandStartMessage_PlainCards::InternalSwap(HandStartMessage_PlainCards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HandStartMessage_PlainCards, _impl_.plaincard2_)
      + sizeof(HandStartMessage_PlainCards::_impl_.plaincard2_)
      - PROTOBUF_FIELD_OFFSET(HandStartMessage_PlainCards, _impl_.plaincard1_)>(
          reinterpret_cast<char*>(&_impl_.plaincard1_),
          reinterpret_cast<char*>(&other->_impl_.plaincard1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HandStartMessage_PlainCards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[51]);
}

// ===================================================================

class HandStartMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<HandStartMessage>()._impl_._has_bits_);
  static const ::HandStartMessage_PlainCards& plaincards(const HandStartMessage* msg);
  static void set_has_plaincards(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encryptedcards(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_smallblind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dealerplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::HandStartMessage_PlainCards&
HandStartMessage::_Internal::plaincards(const HandStartMessage* msg) {
  return *msg->_impl_.plaincards_;
}
HandStartMessage::HandStartMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HandStartMessage)
}
HandStartMessage::HandStartMessage(const HandStartMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandStartMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seatstates_){from._impl_.seatstates_}
    , decltype(_impl_.encryptedcards_){}
    , decltype(_impl_.plaincards_){nullptr}
    , decltype(_impl_.smallblind_){}
    , decltype(_impl_.dealerplayerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encryptedcards_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encryptedcards_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encryptedcards()) {
    _this->_impl_.encryptedcards_.Set(from._internal_encryptedcards(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_plaincards()) {
    _this->_impl_.plaincards_ = new ::HandStartMessage_PlainCards(*from._impl_.plaincards_);
  }
  ::memcpy(&_impl_.smallblind_, &from._impl_.smallblind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dealerplayerid_) -
    reinterpret_cast<char*>(&_impl_.smallblind_)) + sizeof(_impl_.dealerplayerid_));
  // @@protoc_insertion_point(copy_constructor:HandStartMessage)
}

inline void HandStartMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seatstates_){arena}
    , decltype(_impl_.encryptedcards_){}
    , decltype(_impl_.plaincards_){nullptr}
    , decltype(_impl_.smallblind_){0u}
    , decltype(_impl_.dealerplayerid_){0u}
  };
  _impl_.encryptedcards_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encryptedcards_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandStartMessage::~HandStartMessage() {
  // @@protoc_insertion_point(destructor:HandStartMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandStartMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seatstates_.~RepeatedField();
  _impl_.encryptedcards_.Destroy();
  if (this != internal_default_instance()) delete _impl_.plaincards_;
}

void HandStartMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandStartMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HandStartMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seatstates_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.encryptedcards_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.plaincards_ != nullptr);
      _impl_.plaincards_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.smallblind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dealerplayerid_) -
        reinterpret_cast<char*>(&_impl_.smallblind_)) + sizeof(_impl_.dealerplayerid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandStartMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .HandStartMessage.PlainCards plainCards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plaincards(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes encryptedCards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encryptedcards();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 smallBlind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_smallblind(&has_bits);
          _impl_.smallblind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .NetPlayerState seatStates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::NetPlayerState_IsValid(val))) {
              _internal_add_seatstates(static_cast<::NetPlayerState>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_seatstates(), ptr, ctx, ::NetPlayerState_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dealerPlayerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_dealerplayerid(&has_bits);
          _impl_.dealerplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandStartMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HandStartMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .HandStartMessage.PlainCards plainCards = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plaincards(this),
        _Internal::plaincards(this).GetCachedSize(), target, stream);
  }

  // optional bytes encryptedCards = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encryptedcards(), target);
  }

  // required uint32 smallBlind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_smallblind(), target);
  }

  // repeated .NetPlayerState seatStates = 4;
  for (int i = 0, n = this->_internal_seatstates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_seatstates(i), target);
  }

  // optional uint32 dealerPlayerId = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dealerplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HandStartMessage)
  return target;
}

size_t HandStartMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HandStartMessage)
  size_t total_size = 0;

  // required uint32 smallBlind = 3;
  if (_internal_has_smallblind()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_smallblind());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NetPlayerState seatStates = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_seatstates_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_seatstates(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encryptedCards = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encryptedcards());
    }

    // optional .HandStartMessage.PlainCards plainCards = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.plaincards_);
    }

  }
  // optional uint32 dealerPlayerId = 5;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dealerplayerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandStartMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandStartMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandStartMessage::GetClassData() const { return &_class_data_; }


void HandStartMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandStartMessage*>(&to_msg);
  auto& from = static_cast<const HandStartMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HandStartMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.seatstates_.MergeFrom(from._impl_.seatstates_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_encryptedcards(from._internal_encryptedcards());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_plaincards()->::HandStartMessage_PlainCards::MergeFrom(
          from._internal_plaincards());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.smallblind_ = from._impl_.smallblind_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dealerplayerid_ = from._impl_.dealerplayerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandStartMessage::CopyFrom(const HandStartMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandStartMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_plaincards()) {
    if (!_impl_.plaincards_->IsInitialized()) return false;
  }
  return true;
}

void HandStartMessage::InternalSwap(HandStartMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.seatstates_.InternalSwap(&other->_impl_.seatstates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encryptedcards_, lhs_arena,
      &other->_impl_.encryptedcards_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HandStartMessage, _impl_.dealerplayerid_)
      + sizeof(HandStartMessage::_impl_.dealerplayerid_)
      - PROTOBUF_FIELD_OFFSET(HandStartMessage, _impl_.plaincards_)>(
          reinterpret_cast<char*>(&_impl_.plaincards_),
          reinterpret_cast<char*>(&other->_impl_.plaincards_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HandStartMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[52]);
}

// ===================================================================

class PlayersTurnMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayersTurnMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayersTurnMessage::PlayersTurnMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayersTurnMessage)
}
PlayersTurnMessage::PlayersTurnMessage(const PlayersTurnMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayersTurnMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.gamestate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gamestate_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.gamestate_));
  // @@protoc_insertion_point(copy_constructor:PlayersTurnMessage)
}

inline void PlayersTurnMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.gamestate_){0}
  };
}

PlayersTurnMessage::~PlayersTurnMessage() {
  // @@protoc_insertion_point(destructor:PlayersTurnMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayersTurnMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayersTurnMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayersTurnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayersTurnMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gamestate_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.gamestate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayersTurnMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameState gameState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameState_IsValid(val))) {
            _internal_set_gamestate(static_cast<::NetGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayersTurnMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayersTurnMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .NetGameState gameState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayersTurnMessage)
  return target;
}

size_t PlayersTurnMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayersTurnMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_gamestate()) {
    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  return total_size;
}
size_t PlayersTurnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayersTurnMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayersTurnMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayersTurnMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayersTurnMessage::GetClassData() const { return &_class_data_; }


void PlayersTurnMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayersTurnMessage*>(&to_msg);
  auto& from = static_cast<const PlayersTurnMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayersTurnMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gamestate_ = from._impl_.gamestate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayersTurnMessage::CopyFrom(const PlayersTurnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayersTurnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersTurnMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PlayersTurnMessage::InternalSwap(PlayersTurnMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayersTurnMessage, _impl_.gamestate_)
      + sizeof(PlayersTurnMessage::_impl_.gamestate_)
      - PROTOBUF_FIELD_OFFSET(PlayersTurnMessage, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayersTurnMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[53]);
}

// ===================================================================

class MyActionRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<MyActionRequestMessage>()._impl_._has_bits_);
  static void set_has_handnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_myaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_myrelativebet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

MyActionRequestMessage::MyActionRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MyActionRequestMessage)
}
MyActionRequestMessage::MyActionRequestMessage(const MyActionRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MyActionRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handnum_){}
    , decltype(_impl_.gamestate_){}
    , decltype(_impl_.myaction_){}
    , decltype(_impl_.myrelativebet_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.handnum_, &from._impl_.handnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.myrelativebet_) -
    reinterpret_cast<char*>(&_impl_.handnum_)) + sizeof(_impl_.myrelativebet_));
  // @@protoc_insertion_point(copy_constructor:MyActionRequestMessage)
}

inline void MyActionRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handnum_){0u}
    , decltype(_impl_.gamestate_){0}
    , decltype(_impl_.myaction_){0}
    , decltype(_impl_.myrelativebet_){0u}
  };
}

MyActionRequestMessage::~MyActionRequestMessage() {
  // @@protoc_insertion_point(destructor:MyActionRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyActionRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MyActionRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MyActionRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MyActionRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.handnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.myrelativebet_) -
        reinterpret_cast<char*>(&_impl_.handnum_)) + sizeof(_impl_.myrelativebet_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyActionRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 handNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_handnum(&has_bits);
          _impl_.handnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameState gameState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameState_IsValid(val))) {
            _internal_set_gamestate(static_cast<::NetGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .NetPlayerAction myAction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetPlayerAction_IsValid(val))) {
            _internal_set_myaction(static_cast<::NetPlayerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 myRelativeBet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_myrelativebet(&has_bits);
          _impl_.myrelativebet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyActionRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyActionRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 handNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handnum(), target);
  }

  // required .NetGameState gameState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamestate(), target);
  }

  // required .NetPlayerAction myAction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_myaction(), target);
  }

  // required uint32 myRelativeBet = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_myrelativebet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyActionRequestMessage)
  return target;
}

size_t MyActionRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MyActionRequestMessage)
  size_t total_size = 0;

  if (_internal_has_handnum()) {
    // required uint32 handNum = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handnum());
  }

  if (_internal_has_gamestate()) {
    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  if (_internal_has_myaction()) {
    // required .NetPlayerAction myAction = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_myaction());
  }

  if (_internal_has_myrelativebet()) {
    // required uint32 myRelativeBet = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_myrelativebet());
  }

  return total_size;
}
size_t MyActionRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyActionRequestMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 handNum = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handnum());

    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());

    // required .NetPlayerAction myAction = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_myaction());

    // required uint32 myRelativeBet = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_myrelativebet());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyActionRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MyActionRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyActionRequestMessage::GetClassData() const { return &_class_data_; }


void MyActionRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MyActionRequestMessage*>(&to_msg);
  auto& from = static_cast<const MyActionRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MyActionRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.handnum_ = from._impl_.handnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gamestate_ = from._impl_.gamestate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.myaction_ = from._impl_.myaction_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.myrelativebet_ = from._impl_.myrelativebet_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyActionRequestMessage::CopyFrom(const MyActionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyActionRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyActionRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MyActionRequestMessage::InternalSwap(MyActionRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyActionRequestMessage, _impl_.myrelativebet_)
      + sizeof(MyActionRequestMessage::_impl_.myrelativebet_)
      - PROTOBUF_FIELD_OFFSET(MyActionRequestMessage, _impl_.handnum_)>(
          reinterpret_cast<char*>(&_impl_.handnum_),
          reinterpret_cast<char*>(&other->_impl_.handnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyActionRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[54]);
}

// ===================================================================

class YourActionRejectedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<YourActionRejectedMessage>()._impl_._has_bits_);
  static void set_has_gamestate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_youraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yourrelativebet(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rejectionreason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

YourActionRejectedMessage::YourActionRejectedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:YourActionRejectedMessage)
}
YourActionRejectedMessage::YourActionRejectedMessage(const YourActionRejectedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  YourActionRejectedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gamestate_){}
    , decltype(_impl_.youraction_){}
    , decltype(_impl_.yourrelativebet_){}
    , decltype(_impl_.rejectionreason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gamestate_, &from._impl_.gamestate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rejectionreason_) -
    reinterpret_cast<char*>(&_impl_.gamestate_)) + sizeof(_impl_.rejectionreason_));
  // @@protoc_insertion_point(copy_constructor:YourActionRejectedMessage)
}

inline void YourActionRejectedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gamestate_){0}
    , decltype(_impl_.youraction_){0}
    , decltype(_impl_.yourrelativebet_){0u}
    , decltype(_impl_.rejectionreason_){1}
  };
}

YourActionRejectedMessage::~YourActionRejectedMessage() {
  // @@protoc_insertion_point(destructor:YourActionRejectedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void YourActionRejectedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void YourActionRejectedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void YourActionRejectedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:YourActionRejectedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.gamestate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.yourrelativebet_) -
        reinterpret_cast<char*>(&_impl_.gamestate_)) + sizeof(_impl_.yourrelativebet_));
    _impl_.rejectionreason_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YourActionRejectedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .NetGameState gameState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameState_IsValid(val))) {
            _internal_set_gamestate(static_cast<::NetGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .NetPlayerAction yourAction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetPlayerAction_IsValid(val))) {
            _internal_set_youraction(static_cast<::NetPlayerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 yourRelativeBet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_yourrelativebet(&has_bits);
          _impl_.yourrelativebet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .YourActionRejectedMessage.RejectionReason rejectionReason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::YourActionRejectedMessage_RejectionReason_IsValid(val))) {
            _internal_set_rejectionreason(static_cast<::YourActionRejectedMessage_RejectionReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YourActionRejectedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YourActionRejectedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .NetGameState gameState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gamestate(), target);
  }

  // required .NetPlayerAction yourAction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_youraction(), target);
  }

  // required uint32 yourRelativeBet = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_yourrelativebet(), target);
  }

  // required .YourActionRejectedMessage.RejectionReason rejectionReason = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rejectionreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YourActionRejectedMessage)
  return target;
}

size_t YourActionRejectedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:YourActionRejectedMessage)
  size_t total_size = 0;

  if (_internal_has_gamestate()) {
    // required .NetGameState gameState = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  if (_internal_has_youraction()) {
    // required .NetPlayerAction yourAction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_youraction());
  }

  if (_internal_has_yourrelativebet()) {
    // required uint32 yourRelativeBet = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_yourrelativebet());
  }

  if (_internal_has_rejectionreason()) {
    // required .YourActionRejectedMessage.RejectionReason rejectionReason = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rejectionreason());
  }

  return total_size;
}
size_t YourActionRejectedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YourActionRejectedMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .NetGameState gameState = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());

    // required .NetPlayerAction yourAction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_youraction());

    // required uint32 yourRelativeBet = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_yourrelativebet());

    // required .YourActionRejectedMessage.RejectionReason rejectionReason = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rejectionreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YourActionRejectedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    YourActionRejectedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YourActionRejectedMessage::GetClassData() const { return &_class_data_; }


void YourActionRejectedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<YourActionRejectedMessage*>(&to_msg);
  auto& from = static_cast<const YourActionRejectedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:YourActionRejectedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gamestate_ = from._impl_.gamestate_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.youraction_ = from._impl_.youraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.yourrelativebet_ = from._impl_.yourrelativebet_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rejectionreason_ = from._impl_.rejectionreason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YourActionRejectedMessage::CopyFrom(const YourActionRejectedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YourActionRejectedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YourActionRejectedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void YourActionRejectedMessage::InternalSwap(YourActionRejectedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(YourActionRejectedMessage, _impl_.yourrelativebet_)
      + sizeof(YourActionRejectedMessage::_impl_.yourrelativebet_)
      - PROTOBUF_FIELD_OFFSET(YourActionRejectedMessage, _impl_.gamestate_)>(
          reinterpret_cast<char*>(&_impl_.gamestate_),
          reinterpret_cast<char*>(&other->_impl_.gamestate_));
  swap(_impl_.rejectionreason_, other->_impl_.rejectionreason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YourActionRejectedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[55]);
}

// ===================================================================

class PlayersActionDoneMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayersActionDoneMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playeraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_totalplayerbet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playermoney(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_highestset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_minimumraise(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

PlayersActionDoneMessage::PlayersActionDoneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayersActionDoneMessage)
}
PlayersActionDoneMessage::PlayersActionDoneMessage(const PlayersActionDoneMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayersActionDoneMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.gamestate_){}
    , decltype(_impl_.playeraction_){}
    , decltype(_impl_.totalplayerbet_){}
    , decltype(_impl_.playermoney_){}
    , decltype(_impl_.highestset_){}
    , decltype(_impl_.minimumraise_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minimumraise_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.minimumraise_));
  // @@protoc_insertion_point(copy_constructor:PlayersActionDoneMessage)
}

inline void PlayersActionDoneMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.gamestate_){0}
    , decltype(_impl_.playeraction_){0}
    , decltype(_impl_.totalplayerbet_){0u}
    , decltype(_impl_.playermoney_){0u}
    , decltype(_impl_.highestset_){0u}
    , decltype(_impl_.minimumraise_){0u}
  };
}

PlayersActionDoneMessage::~PlayersActionDoneMessage() {
  // @@protoc_insertion_point(destructor:PlayersActionDoneMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayersActionDoneMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayersActionDoneMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayersActionDoneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayersActionDoneMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.minimumraise_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.minimumraise_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayersActionDoneMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .NetGameState gameState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameState_IsValid(val))) {
            _internal_set_gamestate(static_cast<::NetGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .NetPlayerAction playerAction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetPlayerAction_IsValid(val))) {
            _internal_set_playeraction(static_cast<::NetPlayerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 totalPlayerBet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_totalplayerbet(&has_bits);
          _impl_.totalplayerbet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerMoney = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_playermoney(&has_bits);
          _impl_.playermoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 highestSet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_highestset(&has_bits);
          _impl_.highestset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 minimumRaise = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_minimumraise(&has_bits);
          _impl_.minimumraise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayersActionDoneMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayersActionDoneMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .NetGameState gameState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamestate(), target);
  }

  // required .NetPlayerAction playerAction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_playeraction(), target);
  }

  // required uint32 totalPlayerBet = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_totalplayerbet(), target);
  }

  // required uint32 playerMoney = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_playermoney(), target);
  }

  // required uint32 highestSet = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_highestset(), target);
  }

  // required uint32 minimumRaise = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_minimumraise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayersActionDoneMessage)
  return target;
}

size_t PlayersActionDoneMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayersActionDoneMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_gamestate()) {
    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  if (_internal_has_playeraction()) {
    // required .NetPlayerAction playerAction = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playeraction());
  }

  if (_internal_has_totalplayerbet()) {
    // required uint32 totalPlayerBet = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_totalplayerbet());
  }

  if (_internal_has_playermoney()) {
    // required uint32 playerMoney = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playermoney());
  }

  if (_internal_has_highestset()) {
    // required uint32 highestSet = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_highestset());
  }

  if (_internal_has_minimumraise()) {
    // required uint32 minimumRaise = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minimumraise());
  }

  return total_size;
}
size_t PlayersActionDoneMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayersActionDoneMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gamestate());

    // required .NetPlayerAction playerAction = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playeraction());

    // required uint32 totalPlayerBet = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_totalplayerbet());

    // required uint32 playerMoney = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playermoney());

    // required uint32 highestSet = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_highestset());

    // required uint32 minimumRaise = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minimumraise());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayersActionDoneMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayersActionDoneMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayersActionDoneMessage::GetClassData() const { return &_class_data_; }


void PlayersActionDoneMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayersActionDoneMessage*>(&to_msg);
  auto& from = static_cast<const PlayersActionDoneMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayersActionDoneMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gamestate_ = from._impl_.gamestate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.playeraction_ = from._impl_.playeraction_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.totalplayerbet_ = from._impl_.totalplayerbet_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.playermoney_ = from._impl_.playermoney_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.highestset_ = from._impl_.highestset_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.minimumraise_ = from._impl_.minimumraise_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayersActionDoneMessage::CopyFrom(const PlayersActionDoneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayersActionDoneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersActionDoneMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PlayersActionDoneMessage::InternalSwap(PlayersActionDoneMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayersActionDoneMessage, _impl_.minimumraise_)
      + sizeof(PlayersActionDoneMessage::_impl_.minimumraise_)
      - PROTOBUF_FIELD_OFFSET(PlayersActionDoneMessage, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayersActionDoneMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[56]);
}

// ===================================================================

class DealFlopCardsMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DealFlopCardsMessage>()._impl_._has_bits_);
  static void set_has_flopcard1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flopcard2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flopcard3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

DealFlopCardsMessage::DealFlopCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DealFlopCardsMessage)
}
DealFlopCardsMessage::DealFlopCardsMessage(const DealFlopCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DealFlopCardsMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flopcard1_){}
    , decltype(_impl_.flopcard2_){}
    , decltype(_impl_.flopcard3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.flopcard1_, &from._impl_.flopcard1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flopcard3_) -
    reinterpret_cast<char*>(&_impl_.flopcard1_)) + sizeof(_impl_.flopcard3_));
  // @@protoc_insertion_point(copy_constructor:DealFlopCardsMessage)
}

inline void DealFlopCardsMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flopcard1_){0u}
    , decltype(_impl_.flopcard2_){0u}
    , decltype(_impl_.flopcard3_){0u}
  };
}

DealFlopCardsMessage::~DealFlopCardsMessage() {
  // @@protoc_insertion_point(destructor:DealFlopCardsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DealFlopCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DealFlopCardsMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DealFlopCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealFlopCardsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.flopcard1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flopcard3_) -
        reinterpret_cast<char*>(&_impl_.flopcard1_)) + sizeof(_impl_.flopcard3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DealFlopCardsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 flopCard1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_flopcard1(&has_bits);
          _impl_.flopcard1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 flopCard2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_flopcard2(&has_bits);
          _impl_.flopcard2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 flopCard3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flopcard3(&has_bits);
          _impl_.flopcard3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DealFlopCardsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DealFlopCardsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 flopCard1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flopcard1(), target);
  }

  // required uint32 flopCard2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flopcard2(), target);
  }

  // required uint32 flopCard3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flopcard3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DealFlopCardsMessage)
  return target;
}

size_t DealFlopCardsMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DealFlopCardsMessage)
  size_t total_size = 0;

  if (_internal_has_flopcard1()) {
    // required uint32 flopCard1 = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flopcard1());
  }

  if (_internal_has_flopcard2()) {
    // required uint32 flopCard2 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flopcard2());
  }

  if (_internal_has_flopcard3()) {
    // required uint32 flopCard3 = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flopcard3());
  }

  return total_size;
}
size_t DealFlopCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DealFlopCardsMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 flopCard1 = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flopcard1());

    // required uint32 flopCard2 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flopcard2());

    // required uint32 flopCard3 = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flopcard3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DealFlopCardsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DealFlopCardsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DealFlopCardsMessage::GetClassData() const { return &_class_data_; }


void DealFlopCardsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DealFlopCardsMessage*>(&to_msg);
  auto& from = static_cast<const DealFlopCardsMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DealFlopCardsMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.flopcard1_ = from._impl_.flopcard1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flopcard2_ = from._impl_.flopcard2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flopcard3_ = from._impl_.flopcard3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DealFlopCardsMessage::CopyFrom(const DealFlopCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealFlopCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealFlopCardsMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DealFlopCardsMessage::InternalSwap(DealFlopCardsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DealFlopCardsMessage, _impl_.flopcard3_)
      + sizeof(DealFlopCardsMessage::_impl_.flopcard3_)
      - PROTOBUF_FIELD_OFFSET(DealFlopCardsMessage, _impl_.flopcard1_)>(
          reinterpret_cast<char*>(&_impl_.flopcard1_),
          reinterpret_cast<char*>(&other->_impl_.flopcard1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DealFlopCardsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[57]);
}

// ===================================================================

class DealTurnCardMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DealTurnCardMessage>()._impl_._has_bits_);
  static void set_has_turncard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DealTurnCardMessage::DealTurnCardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DealTurnCardMessage)
}
DealTurnCardMessage::DealTurnCardMessage(const DealTurnCardMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DealTurnCardMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turncard_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.turncard_ = from._impl_.turncard_;
  // @@protoc_insertion_point(copy_constructor:DealTurnCardMessage)
}

inline void DealTurnCardMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turncard_){0u}
  };
}

DealTurnCardMessage::~DealTurnCardMessage() {
  // @@protoc_insertion_point(destructor:DealTurnCardMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DealTurnCardMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DealTurnCardMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DealTurnCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealTurnCardMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.turncard_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DealTurnCardMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 turnCard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_turncard(&has_bits);
          _impl_.turncard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DealTurnCardMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DealTurnCardMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 turnCard = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_turncard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DealTurnCardMessage)
  return target;
}

size_t DealTurnCardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DealTurnCardMessage)
  size_t total_size = 0;

  // required uint32 turnCard = 1;
  if (_internal_has_turncard()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_turncard());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DealTurnCardMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DealTurnCardMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DealTurnCardMessage::GetClassData() const { return &_class_data_; }


void DealTurnCardMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DealTurnCardMessage*>(&to_msg);
  auto& from = static_cast<const DealTurnCardMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DealTurnCardMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turncard()) {
    _this->_internal_set_turncard(from._internal_turncard());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DealTurnCardMessage::CopyFrom(const DealTurnCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealTurnCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealTurnCardMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DealTurnCardMessage::InternalSwap(DealTurnCardMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.turncard_, other->_impl_.turncard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DealTurnCardMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[58]);
}

// ===================================================================

class DealRiverCardMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DealRiverCardMessage>()._impl_._has_bits_);
  static void set_has_rivercard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DealRiverCardMessage::DealRiverCardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DealRiverCardMessage)
}
DealRiverCardMessage::DealRiverCardMessage(const DealRiverCardMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DealRiverCardMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rivercard_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rivercard_ = from._impl_.rivercard_;
  // @@protoc_insertion_point(copy_constructor:DealRiverCardMessage)
}

inline void DealRiverCardMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rivercard_){0u}
  };
}

DealRiverCardMessage::~DealRiverCardMessage() {
  // @@protoc_insertion_point(destructor:DealRiverCardMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DealRiverCardMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DealRiverCardMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DealRiverCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealRiverCardMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rivercard_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DealRiverCardMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 riverCard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rivercard(&has_bits);
          _impl_.rivercard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DealRiverCardMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DealRiverCardMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 riverCard = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rivercard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DealRiverCardMessage)
  return target;
}

size_t DealRiverCardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DealRiverCardMessage)
  size_t total_size = 0;

  // required uint32 riverCard = 1;
  if (_internal_has_rivercard()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rivercard());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DealRiverCardMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DealRiverCardMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DealRiverCardMessage::GetClassData() const { return &_class_data_; }


void DealRiverCardMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DealRiverCardMessage*>(&to_msg);
  auto& from = static_cast<const DealRiverCardMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DealRiverCardMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rivercard()) {
    _this->_internal_set_rivercard(from._internal_rivercard());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DealRiverCardMessage::CopyFrom(const DealRiverCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealRiverCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealRiverCardMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DealRiverCardMessage::InternalSwap(DealRiverCardMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rivercard_, other->_impl_.rivercard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DealRiverCardMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[59]);
}

// ===================================================================

class AllInShowCardsMessage_PlayerAllIn::_Internal {
 public:
  using HasBits = decltype(std::declval<AllInShowCardsMessage_PlayerAllIn>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allincard1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allincard2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AllInShowCardsMessage.PlayerAllIn)
}
AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn(const AllInShowCardsMessage_PlayerAllIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllInShowCardsMessage_PlayerAllIn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.allincard1_){}
    , decltype(_impl_.allincard2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allincard2_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.allincard2_));
  // @@protoc_insertion_point(copy_constructor:AllInShowCardsMessage.PlayerAllIn)
}

inline void AllInShowCardsMessage_PlayerAllIn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.allincard1_){0u}
    , decltype(_impl_.allincard2_){0u}
  };
}

AllInShowCardsMessage_PlayerAllIn::~AllInShowCardsMessage_PlayerAllIn() {
  // @@protoc_insertion_point(destructor:AllInShowCardsMessage.PlayerAllIn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllInShowCardsMessage_PlayerAllIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllInShowCardsMessage_PlayerAllIn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllInShowCardsMessage_PlayerAllIn::Clear() {
// @@protoc_insertion_point(message_clear_start:AllInShowCardsMessage.PlayerAllIn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.allincard2_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.allincard2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllInShowCardsMessage_PlayerAllIn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 allInCard1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_allincard1(&has_bits);
          _impl_.allincard1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 allInCard2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_allincard2(&has_bits);
          _impl_.allincard2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllInShowCardsMessage_PlayerAllIn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllInShowCardsMessage.PlayerAllIn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required uint32 allInCard1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_allincard1(), target);
  }

  // required uint32 allInCard2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_allincard2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllInShowCardsMessage.PlayerAllIn)
  return target;
}

size_t AllInShowCardsMessage_PlayerAllIn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AllInShowCardsMessage.PlayerAllIn)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_allincard1()) {
    // required uint32 allInCard1 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_allincard1());
  }

  if (_internal_has_allincard2()) {
    // required uint32 allInCard2 = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_allincard2());
  }

  return total_size;
}
size_t AllInShowCardsMessage_PlayerAllIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AllInShowCardsMessage.PlayerAllIn)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required uint32 allInCard1 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_allincard1());

    // required uint32 allInCard2 = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_allincard2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllInShowCardsMessage_PlayerAllIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllInShowCardsMessage_PlayerAllIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllInShowCardsMessage_PlayerAllIn::GetClassData() const { return &_class_data_; }


void AllInShowCardsMessage_PlayerAllIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllInShowCardsMessage_PlayerAllIn*>(&to_msg);
  auto& from = static_cast<const AllInShowCardsMessage_PlayerAllIn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AllInShowCardsMessage.PlayerAllIn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.allincard1_ = from._impl_.allincard1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.allincard2_ = from._impl_.allincard2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllInShowCardsMessage_PlayerAllIn::CopyFrom(const AllInShowCardsMessage_PlayerAllIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllInShowCardsMessage.PlayerAllIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage_PlayerAllIn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AllInShowCardsMessage_PlayerAllIn::InternalSwap(AllInShowCardsMessage_PlayerAllIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllInShowCardsMessage_PlayerAllIn, _impl_.allincard2_)
      + sizeof(AllInShowCardsMessage_PlayerAllIn::_impl_.allincard2_)
      - PROTOBUF_FIELD_OFFSET(AllInShowCardsMessage_PlayerAllIn, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllInShowCardsMessage_PlayerAllIn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[60]);
}

// ===================================================================

class AllInShowCardsMessage::_Internal {
 public:
};

AllInShowCardsMessage::AllInShowCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AllInShowCardsMessage)
}
AllInShowCardsMessage::AllInShowCardsMessage(const AllInShowCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllInShowCardsMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playersallin_){from._impl_.playersallin_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AllInShowCardsMessage)
}

inline void AllInShowCardsMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playersallin_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllInShowCardsMessage::~AllInShowCardsMessage() {
  // @@protoc_insertion_point(destructor:AllInShowCardsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllInShowCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playersallin_.~RepeatedPtrField();
}

void AllInShowCardsMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllInShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AllInShowCardsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playersallin_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllInShowCardsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playersallin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllInShowCardsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllInShowCardsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playersallin_size()); i < n; i++) {
    const auto& repfield = this->_internal_playersallin(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllInShowCardsMessage)
  return target;
}

size_t AllInShowCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AllInShowCardsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 1;
  total_size += 1UL * this->_internal_playersallin_size();
  for (const auto& msg : this->_impl_.playersallin_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllInShowCardsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllInShowCardsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllInShowCardsMessage::GetClassData() const { return &_class_data_; }


void AllInShowCardsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllInShowCardsMessage*>(&to_msg);
  auto& from = static_cast<const AllInShowCardsMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AllInShowCardsMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playersallin_.MergeFrom(from._impl_.playersallin_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllInShowCardsMessage::CopyFrom(const AllInShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllInShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.playersallin_))
    return false;
  return true;
}

void AllInShowCardsMessage::InternalSwap(AllInShowCardsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.playersallin_.InternalSwap(&other->_impl_.playersallin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllInShowCardsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[61]);
}

// ===================================================================

class EndOfHandShowCardsMessage::_Internal {
 public:
};

EndOfHandShowCardsMessage::EndOfHandShowCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EndOfHandShowCardsMessage)
}
EndOfHandShowCardsMessage::EndOfHandShowCardsMessage(const EndOfHandShowCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EndOfHandShowCardsMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerresults_){from._impl_.playerresults_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EndOfHandShowCardsMessage)
}

inline void EndOfHandShowCardsMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerresults_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EndOfHandShowCardsMessage::~EndOfHandShowCardsMessage() {
  // @@protoc_insertion_point(destructor:EndOfHandShowCardsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndOfHandShowCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerresults_.~RepeatedPtrField();
}

void EndOfHandShowCardsMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndOfHandShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfHandShowCardsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerresults_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndOfHandShowCardsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PlayerResult playerResults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndOfHandShowCardsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndOfHandShowCardsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerResult playerResults = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playerresults_size()); i < n; i++) {
    const auto& repfield = this->_internal_playerresults(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndOfHandShowCardsMessage)
  return target;
}

size_t EndOfHandShowCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfHandShowCardsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerResult playerResults = 1;
  total_size += 1UL * this->_internal_playerresults_size();
  for (const auto& msg : this->_impl_.playerresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndOfHandShowCardsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EndOfHandShowCardsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndOfHandShowCardsMessage::GetClassData() const { return &_class_data_; }


void EndOfHandShowCardsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EndOfHandShowCardsMessage*>(&to_msg);
  auto& from = static_cast<const EndOfHandShowCardsMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EndOfHandShowCardsMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playerresults_.MergeFrom(from._impl_.playerresults_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndOfHandShowCardsMessage::CopyFrom(const EndOfHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfHandShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandShowCardsMessage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.playerresults_))
    return false;
  return true;
}

void EndOfHandShowCardsMessage::InternalSwap(EndOfHandShowCardsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.playerresults_.InternalSwap(&other->_impl_.playerresults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndOfHandShowCardsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[62]);
}

// ===================================================================

class EndOfHandHideCardsMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<EndOfHandHideCardsMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moneywon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playermoney(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

EndOfHandHideCardsMessage::EndOfHandHideCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EndOfHandHideCardsMessage)
}
EndOfHandHideCardsMessage::EndOfHandHideCardsMessage(const EndOfHandHideCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EndOfHandHideCardsMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.moneywon_){}
    , decltype(_impl_.playermoney_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playermoney_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.playermoney_));
  // @@protoc_insertion_point(copy_constructor:EndOfHandHideCardsMessage)
}

inline void EndOfHandHideCardsMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.moneywon_){0u}
    , decltype(_impl_.playermoney_){0u}
  };
}

EndOfHandHideCardsMessage::~EndOfHandHideCardsMessage() {
  // @@protoc_insertion_point(destructor:EndOfHandHideCardsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndOfHandHideCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EndOfHandHideCardsMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndOfHandHideCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfHandHideCardsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playermoney_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.playermoney_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndOfHandHideCardsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 moneyWon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_moneywon(&has_bits);
          _impl_.moneywon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerMoney = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_playermoney(&has_bits);
          _impl_.playermoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndOfHandHideCardsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndOfHandHideCardsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required uint32 moneyWon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_moneywon(), target);
  }

  // required uint32 playerMoney = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_playermoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndOfHandHideCardsMessage)
  return target;
}

size_t EndOfHandHideCardsMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndOfHandHideCardsMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_moneywon()) {
    // required uint32 moneyWon = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moneywon());
  }

  if (_internal_has_playermoney()) {
    // required uint32 playerMoney = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playermoney());
  }

  return total_size;
}
size_t EndOfHandHideCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfHandHideCardsMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required uint32 moneyWon = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moneywon());

    // required uint32 playerMoney = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndOfHandHideCardsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EndOfHandHideCardsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndOfHandHideCardsMessage::GetClassData() const { return &_class_data_; }


void EndOfHandHideCardsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EndOfHandHideCardsMessage*>(&to_msg);
  auto& from = static_cast<const EndOfHandHideCardsMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EndOfHandHideCardsMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.moneywon_ = from._impl_.moneywon_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.playermoney_ = from._impl_.playermoney_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndOfHandHideCardsMessage::CopyFrom(const EndOfHandHideCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfHandHideCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandHideCardsMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EndOfHandHideCardsMessage::InternalSwap(EndOfHandHideCardsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndOfHandHideCardsMessage, _impl_.playermoney_)
      + sizeof(EndOfHandHideCardsMessage::_impl_.playermoney_)
      - PROTOBUF_FIELD_OFFSET(EndOfHandHideCardsMessage, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndOfHandHideCardsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[63]);
}

// ===================================================================

class ShowMyCardsRequestMessage::_Internal {
 public:
};

ShowMyCardsRequestMessage::ShowMyCardsRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ShowMyCardsRequestMessage)
}
ShowMyCardsRequestMessage::ShowMyCardsRequestMessage(const ShowMyCardsRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShowMyCardsRequestMessage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ShowMyCardsRequestMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowMyCardsRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowMyCardsRequestMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShowMyCardsRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[64]);
}

// ===================================================================

class AfterHandShowCardsMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AfterHandShowCardsMessage>()._impl_._has_bits_);
  static const ::PlayerResult& playerresult(const AfterHandShowCardsMessage* msg);
  static void set_has_playerresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::PlayerResult&
AfterHandShowCardsMessage::_Internal::playerresult(const AfterHandShowCardsMessage* msg) {
  return *msg->_impl_.playerresult_;
}
AfterHandShowCardsMessage::AfterHandShowCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AfterHandShowCardsMessage)
}
AfterHandShowCardsMessage::AfterHandShowCardsMessage(const AfterHandShowCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AfterHandShowCardsMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerresult_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerresult()) {
    _this->_impl_.playerresult_ = new ::PlayerResult(*from._impl_.playerresult_);
  }
  // @@protoc_insertion_point(copy_constructor:AfterHandShowCardsMessage)
}

inline void AfterHandShowCardsMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerresult_){nullptr}
  };
}

AfterHandShowCardsMessage::~AfterHandShowCardsMessage() {
  // @@protoc_insertion_point(destructor:AfterHandShowCardsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AfterHandShowCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerresult_;
}

void AfterHandShowCardsMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AfterHandShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AfterHandShowCardsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.playerresult_ != nullptr);
    _impl_.playerresult_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AfterHandShowCardsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PlayerResult playerResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AfterHandShowCardsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AfterHandShowCardsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PlayerResult playerResult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::playerresult(this),
        _Internal::playerresult(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AfterHandShowCardsMessage)
  return target;
}

size_t AfterHandShowCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AfterHandShowCardsMessage)
  size_t total_size = 0;

  // required .PlayerResult playerResult = 1;
  if (_internal_has_playerresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerresult_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AfterHandShowCardsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AfterHandShowCardsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AfterHandShowCardsMessage::GetClassData() const { return &_class_data_; }


void AfterHandShowCardsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AfterHandShowCardsMessage*>(&to_msg);
  auto& from = static_cast<const AfterHandShowCardsMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AfterHandShowCardsMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerresult()) {
    _this->_internal_mutable_playerresult()->::PlayerResult::MergeFrom(
        from._internal_playerresult());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AfterHandShowCardsMessage::CopyFrom(const AfterHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AfterHandShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfterHandShowCardsMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_playerresult()) {
    if (!_impl_.playerresult_->IsInitialized()) return false;
  }
  return true;
}

void AfterHandShowCardsMessage::InternalSwap(AfterHandShowCardsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.playerresult_, other->_impl_.playerresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AfterHandShowCardsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[65]);
}

// ===================================================================

class EndOfGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<EndOfGameMessage>()._impl_._has_bits_);
  static void set_has_winnerplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EndOfGameMessage::EndOfGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EndOfGameMessage)
}
EndOfGameMessage::EndOfGameMessage(const EndOfGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EndOfGameMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.winnerplayerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.winnerplayerid_ = from._impl_.winnerplayerid_;
  // @@protoc_insertion_point(copy_constructor:EndOfGameMessage)
}

inline void EndOfGameMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.winnerplayerid_){0u}
  };
}

EndOfGameMessage::~EndOfGameMessage() {
  // @@protoc_insertion_point(destructor:EndOfGameMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndOfGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EndOfGameMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndOfGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfGameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.winnerplayerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndOfGameMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 winnerPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_winnerplayerid(&has_bits);
          _impl_.winnerplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndOfGameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndOfGameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 winnerPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_winnerplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndOfGameMessage)
  return target;
}

size_t EndOfGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfGameMessage)
  size_t total_size = 0;

  // required uint32 winnerPlayerId = 1;
  if (_internal_has_winnerplayerid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_winnerplayerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndOfGameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EndOfGameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndOfGameMessage::GetClassData() const { return &_class_data_; }


void EndOfGameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EndOfGameMessage*>(&to_msg);
  auto& from = static_cast<const EndOfGameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EndOfGameMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_winnerplayerid()) {
    _this->_internal_set_winnerplayerid(from._internal_winnerplayerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndOfGameMessage::CopyFrom(const EndOfGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EndOfGameMessage::InternalSwap(EndOfGameMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.winnerplayerid_, other->_impl_.winnerplayerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndOfGameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[66]);
}

// ===================================================================

class PlayerIdChangedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerIdChangedMessage>()._impl_._has_bits_);
  static void set_has_oldplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayerIdChangedMessage::PlayerIdChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerIdChangedMessage)
}
PlayerIdChangedMessage::PlayerIdChangedMessage(const PlayerIdChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerIdChangedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldplayerid_){}
    , decltype(_impl_.newplayerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.oldplayerid_, &from._impl_.oldplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newplayerid_) -
    reinterpret_cast<char*>(&_impl_.oldplayerid_)) + sizeof(_impl_.newplayerid_));
  // @@protoc_insertion_point(copy_constructor:PlayerIdChangedMessage)
}

inline void PlayerIdChangedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldplayerid_){0u}
    , decltype(_impl_.newplayerid_){0u}
  };
}

PlayerIdChangedMessage::~PlayerIdChangedMessage() {
  // @@protoc_insertion_point(destructor:PlayerIdChangedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerIdChangedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerIdChangedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerIdChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerIdChangedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.oldplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.newplayerid_) -
        reinterpret_cast<char*>(&_impl_.oldplayerid_)) + sizeof(_impl_.newplayerid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerIdChangedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 oldPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_oldplayerid(&has_bits);
          _impl_.oldplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 newPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_newplayerid(&has_bits);
          _impl_.newplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerIdChangedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerIdChangedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 oldPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_oldplayerid(), target);
  }

  // required uint32 newPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_newplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerIdChangedMessage)
  return target;
}

size_t PlayerIdChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerIdChangedMessage)
  size_t total_size = 0;

  if (_internal_has_oldplayerid()) {
    // required uint32 oldPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldplayerid());
  }

  if (_internal_has_newplayerid()) {
    // required uint32 newPlayerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newplayerid());
  }

  return total_size;
}
size_t PlayerIdChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerIdChangedMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 oldPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldplayerid());

    // required uint32 newPlayerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerIdChangedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerIdChangedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerIdChangedMessage::GetClassData() const { return &_class_data_; }


void PlayerIdChangedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerIdChangedMessage*>(&to_msg);
  auto& from = static_cast<const PlayerIdChangedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerIdChangedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.oldplayerid_ = from._impl_.oldplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.newplayerid_ = from._impl_.newplayerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerIdChangedMessage::CopyFrom(const PlayerIdChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerIdChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerIdChangedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PlayerIdChangedMessage::InternalSwap(PlayerIdChangedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerIdChangedMessage, _impl_.newplayerid_)
      + sizeof(PlayerIdChangedMessage::_impl_.newplayerid_)
      - PROTOBUF_FIELD_OFFSET(PlayerIdChangedMessage, _impl_.oldplayerid_)>(
          reinterpret_cast<char*>(&_impl_.oldplayerid_),
          reinterpret_cast<char*>(&other->_impl_.oldplayerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerIdChangedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[67]);
}

// ===================================================================

class AskKickPlayerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AskKickPlayerMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AskKickPlayerMessage::AskKickPlayerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AskKickPlayerMessage)
}
AskKickPlayerMessage::AskKickPlayerMessage(const AskKickPlayerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AskKickPlayerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:AskKickPlayerMessage)
}

inline void AskKickPlayerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
  };
}

AskKickPlayerMessage::~AskKickPlayerMessage() {
  // @@protoc_insertion_point(destructor:AskKickPlayerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AskKickPlayerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AskKickPlayerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AskKickPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AskKickPlayerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AskKickPlayerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AskKickPlayerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AskKickPlayerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AskKickPlayerMessage)
  return target;
}

size_t AskKickPlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AskKickPlayerMessage)
  size_t total_size = 0;

  // required uint32 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AskKickPlayerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AskKickPlayerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AskKickPlayerMessage::GetClassData() const { return &_class_data_; }


void AskKickPlayerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AskKickPlayerMessage*>(&to_msg);
  auto& from = static_cast<const AskKickPlayerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AskKickPlayerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AskKickPlayerMessage::CopyFrom(const AskKickPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AskKickPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickPlayerMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AskKickPlayerMessage::InternalSwap(AskKickPlayerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AskKickPlayerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[68]);
}

// ===================================================================

class AskKickDeniedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AskKickDeniedMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kickdeniedreason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AskKickDeniedMessage::AskKickDeniedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AskKickDeniedMessage)
}
AskKickDeniedMessage::AskKickDeniedMessage(const AskKickDeniedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AskKickDeniedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.kickdeniedreason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kickdeniedreason_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.kickdeniedreason_));
  // @@protoc_insertion_point(copy_constructor:AskKickDeniedMessage)
}

inline void AskKickDeniedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.kickdeniedreason_){0}
  };
}

AskKickDeniedMessage::~AskKickDeniedMessage() {
  // @@protoc_insertion_point(destructor:AskKickDeniedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AskKickDeniedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AskKickDeniedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AskKickDeniedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AskKickDeniedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kickdeniedreason_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.kickdeniedreason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AskKickDeniedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AskKickDeniedMessage_KickDeniedReason_IsValid(val))) {
            _internal_set_kickdeniedreason(static_cast<::AskKickDeniedMessage_KickDeniedReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AskKickDeniedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AskKickDeniedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kickdeniedreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AskKickDeniedMessage)
  return target;
}

size_t AskKickDeniedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AskKickDeniedMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_kickdeniedreason()) {
    // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kickdeniedreason());
  }

  return total_size;
}
size_t AskKickDeniedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AskKickDeniedMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kickdeniedreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AskKickDeniedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AskKickDeniedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AskKickDeniedMessage::GetClassData() const { return &_class_data_; }


void AskKickDeniedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AskKickDeniedMessage*>(&to_msg);
  auto& from = static_cast<const AskKickDeniedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AskKickDeniedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kickdeniedreason_ = from._impl_.kickdeniedreason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AskKickDeniedMessage::CopyFrom(const AskKickDeniedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AskKickDeniedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickDeniedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AskKickDeniedMessage::InternalSwap(AskKickDeniedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AskKickDeniedMessage, _impl_.kickdeniedreason_)
      + sizeof(AskKickDeniedMessage::_impl_.kickdeniedreason_)
      - PROTOBUF_FIELD_OFFSET(AskKickDeniedMessage, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AskKickDeniedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[69]);
}

// ===================================================================

class StartKickPetitionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StartKickPetitionMessage>()._impl_._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proposingplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kickplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kicktimeoutsec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_numvotesneededtokick(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

StartKickPetitionMessage::StartKickPetitionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StartKickPetitionMessage)
}
StartKickPetitionMessage::StartKickPetitionMessage(const StartKickPetitionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartKickPetitionMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){}
    , decltype(_impl_.proposingplayerid_){}
    , decltype(_impl_.kickplayerid_){}
    , decltype(_impl_.kicktimeoutsec_){}
    , decltype(_impl_.numvotesneededtokick_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.petitionid_, &from._impl_.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numvotesneededtokick_) -
    reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.numvotesneededtokick_));
  // @@protoc_insertion_point(copy_constructor:StartKickPetitionMessage)
}

inline void StartKickPetitionMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){0u}
    , decltype(_impl_.proposingplayerid_){0u}
    , decltype(_impl_.kickplayerid_){0u}
    , decltype(_impl_.kicktimeoutsec_){0u}
    , decltype(_impl_.numvotesneededtokick_){0u}
  };
}

StartKickPetitionMessage::~StartKickPetitionMessage() {
  // @@protoc_insertion_point(destructor:StartKickPetitionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartKickPetitionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartKickPetitionMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartKickPetitionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartKickPetitionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numvotesneededtokick_) -
        reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.numvotesneededtokick_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartKickPetitionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          _impl_.petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 proposingPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_proposingplayerid(&has_bits);
          _impl_.proposingplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 kickPlayerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kickplayerid(&has_bits);
          _impl_.kickplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 kickTimeoutSec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kicktimeoutsec(&has_bits);
          _impl_.kicktimeoutsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 numVotesNeededToKick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_numvotesneededtokick(&has_bits);
          _impl_.numvotesneededtokick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartKickPetitionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartKickPetitionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required uint32 proposingPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_proposingplayerid(), target);
  }

  // required uint32 kickPlayerId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kickplayerid(), target);
  }

  // required uint32 kickTimeoutSec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kicktimeoutsec(), target);
  }

  // required uint32 numVotesNeededToKick = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_numvotesneededtokick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartKickPetitionMessage)
  return target;
}

size_t StartKickPetitionMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StartKickPetitionMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());
  }

  if (_internal_has_proposingplayerid()) {
    // required uint32 proposingPlayerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proposingplayerid());
  }

  if (_internal_has_kickplayerid()) {
    // required uint32 kickPlayerId = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kickplayerid());
  }

  if (_internal_has_kicktimeoutsec()) {
    // required uint32 kickTimeoutSec = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kicktimeoutsec());
  }

  if (_internal_has_numvotesneededtokick()) {
    // required uint32 numVotesNeededToKick = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesneededtokick());
  }

  return total_size;
}
size_t StartKickPetitionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartKickPetitionMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());

    // required uint32 proposingPlayerId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proposingplayerid());

    // required uint32 kickPlayerId = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kickplayerid());

    // required uint32 kickTimeoutSec = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kicktimeoutsec());

    // required uint32 numVotesNeededToKick = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesneededtokick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartKickPetitionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartKickPetitionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartKickPetitionMessage::GetClassData() const { return &_class_data_; }


void StartKickPetitionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartKickPetitionMessage*>(&to_msg);
  auto& from = static_cast<const StartKickPetitionMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StartKickPetitionMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.petitionid_ = from._impl_.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.proposingplayerid_ = from._impl_.proposingplayerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kickplayerid_ = from._impl_.kickplayerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kicktimeoutsec_ = from._impl_.kicktimeoutsec_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.numvotesneededtokick_ = from._impl_.numvotesneededtokick_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartKickPetitionMessage::CopyFrom(const StartKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartKickPetitionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartKickPetitionMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StartKickPetitionMessage::InternalSwap(StartKickPetitionMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartKickPetitionMessage, _impl_.numvotesneededtokick_)
      + sizeof(StartKickPetitionMessage::_impl_.numvotesneededtokick_)
      - PROTOBUF_FIELD_OFFSET(StartKickPetitionMessage, _impl_.petitionid_)>(
          reinterpret_cast<char*>(&_impl_.petitionid_),
          reinterpret_cast<char*>(&other->_impl_.petitionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartKickPetitionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[70]);
}

// ===================================================================

class VoteKickRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<VoteKickRequestMessage>()._impl_._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_votekick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VoteKickRequestMessage::VoteKickRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VoteKickRequestMessage)
}
VoteKickRequestMessage::VoteKickRequestMessage(const VoteKickRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteKickRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){}
    , decltype(_impl_.votekick_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.petitionid_, &from._impl_.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.votekick_) -
    reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.votekick_));
  // @@protoc_insertion_point(copy_constructor:VoteKickRequestMessage)
}

inline void VoteKickRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){0u}
    , decltype(_impl_.votekick_){false}
  };
}

VoteKickRequestMessage::~VoteKickRequestMessage() {
  // @@protoc_insertion_point(destructor:VoteKickRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteKickRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoteKickRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteKickRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VoteKickRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.votekick_) -
        reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.votekick_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteKickRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          _impl_.petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool voteKick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_votekick(&has_bits);
          _impl_.votekick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteKickRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoteKickRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required bool voteKick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_votekick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoteKickRequestMessage)
  return target;
}

size_t VoteKickRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VoteKickRequestMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());
  }

  if (_internal_has_votekick()) {
    // required bool voteKick = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t VoteKickRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoteKickRequestMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());

    // required bool voteKick = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteKickRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteKickRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteKickRequestMessage::GetClassData() const { return &_class_data_; }


void VoteKickRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteKickRequestMessage*>(&to_msg);
  auto& from = static_cast<const VoteKickRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VoteKickRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.petitionid_ = from._impl_.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.votekick_ = from._impl_.votekick_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteKickRequestMessage::CopyFrom(const VoteKickRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoteKickRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void VoteKickRequestMessage::InternalSwap(VoteKickRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteKickRequestMessage, _impl_.votekick_)
      + sizeof(VoteKickRequestMessage::_impl_.votekick_)
      - PROTOBUF_FIELD_OFFSET(VoteKickRequestMessage, _impl_.petitionid_)>(
          reinterpret_cast<char*>(&_impl_.petitionid_),
          reinterpret_cast<char*>(&other->_impl_.petitionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteKickRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[71]);
}

// ===================================================================

class VoteKickReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<VoteKickReplyMessage>()._impl_._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_votekickreplytype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VoteKickReplyMessage::VoteKickReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VoteKickReplyMessage)
}
VoteKickReplyMessage::VoteKickReplyMessage(const VoteKickReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteKickReplyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){}
    , decltype(_impl_.votekickreplytype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.petitionid_, &from._impl_.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.votekickreplytype_) -
    reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.votekickreplytype_));
  // @@protoc_insertion_point(copy_constructor:VoteKickReplyMessage)
}

inline void VoteKickReplyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){0u}
    , decltype(_impl_.votekickreplytype_){0}
  };
}

VoteKickReplyMessage::~VoteKickReplyMessage() {
  // @@protoc_insertion_point(destructor:VoteKickReplyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteKickReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoteKickReplyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteKickReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VoteKickReplyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.votekickreplytype_) -
        reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.votekickreplytype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteKickReplyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          _impl_.petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::VoteKickReplyMessage_VoteKickReplyType_IsValid(val))) {
            _internal_set_votekickreplytype(static_cast<::VoteKickReplyMessage_VoteKickReplyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteKickReplyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoteKickReplyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_votekickreplytype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoteKickReplyMessage)
  return target;
}

size_t VoteKickReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VoteKickReplyMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());
  }

  if (_internal_has_votekickreplytype()) {
    // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_votekickreplytype());
  }

  return total_size;
}
size_t VoteKickReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoteKickReplyMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());

    // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_votekickreplytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteKickReplyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteKickReplyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteKickReplyMessage::GetClassData() const { return &_class_data_; }


void VoteKickReplyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteKickReplyMessage*>(&to_msg);
  auto& from = static_cast<const VoteKickReplyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VoteKickReplyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.petitionid_ = from._impl_.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.votekickreplytype_ = from._impl_.votekickreplytype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteKickReplyMessage::CopyFrom(const VoteKickReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoteKickReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void VoteKickReplyMessage::InternalSwap(VoteKickReplyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteKickReplyMessage, _impl_.votekickreplytype_)
      + sizeof(VoteKickReplyMessage::_impl_.votekickreplytype_)
      - PROTOBUF_FIELD_OFFSET(VoteKickReplyMessage, _impl_.petitionid_)>(
          reinterpret_cast<char*>(&_impl_.petitionid_),
          reinterpret_cast<char*>(&other->_impl_.petitionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteKickReplyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[72]);
}

// ===================================================================

class KickPetitionUpdateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<KickPetitionUpdateMessage>()._impl_._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numvotesagainstkicking(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numvotesinfavourofkicking(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_numvotesneededtokick(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

KickPetitionUpdateMessage::KickPetitionUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KickPetitionUpdateMessage)
}
KickPetitionUpdateMessage::KickPetitionUpdateMessage(const KickPetitionUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KickPetitionUpdateMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){}
    , decltype(_impl_.numvotesagainstkicking_){}
    , decltype(_impl_.numvotesinfavourofkicking_){}
    , decltype(_impl_.numvotesneededtokick_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.petitionid_, &from._impl_.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numvotesneededtokick_) -
    reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.numvotesneededtokick_));
  // @@protoc_insertion_point(copy_constructor:KickPetitionUpdateMessage)
}

inline void KickPetitionUpdateMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){0u}
    , decltype(_impl_.numvotesagainstkicking_){0u}
    , decltype(_impl_.numvotesinfavourofkicking_){0u}
    , decltype(_impl_.numvotesneededtokick_){0u}
  };
}

KickPetitionUpdateMessage::~KickPetitionUpdateMessage() {
  // @@protoc_insertion_point(destructor:KickPetitionUpdateMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KickPetitionUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KickPetitionUpdateMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KickPetitionUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPetitionUpdateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numvotesneededtokick_) -
        reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.numvotesneededtokick_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickPetitionUpdateMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          _impl_.petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 numVotesAgainstKicking = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_numvotesagainstkicking(&has_bits);
          _impl_.numvotesagainstkicking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 numVotesInFavourOfKicking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_numvotesinfavourofkicking(&has_bits);
          _impl_.numvotesinfavourofkicking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 numVotesNeededToKick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_numvotesneededtokick(&has_bits);
          _impl_.numvotesneededtokick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KickPetitionUpdateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KickPetitionUpdateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required uint32 numVotesAgainstKicking = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numvotesagainstkicking(), target);
  }

  // required uint32 numVotesInFavourOfKicking = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numvotesinfavourofkicking(), target);
  }

  // required uint32 numVotesNeededToKick = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_numvotesneededtokick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KickPetitionUpdateMessage)
  return target;
}

size_t KickPetitionUpdateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KickPetitionUpdateMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());
  }

  if (_internal_has_numvotesagainstkicking()) {
    // required uint32 numVotesAgainstKicking = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesagainstkicking());
  }

  if (_internal_has_numvotesinfavourofkicking()) {
    // required uint32 numVotesInFavourOfKicking = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesinfavourofkicking());
  }

  if (_internal_has_numvotesneededtokick()) {
    // required uint32 numVotesNeededToKick = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesneededtokick());
  }

  return total_size;
}
size_t KickPetitionUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickPetitionUpdateMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());

    // required uint32 numVotesAgainstKicking = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesagainstkicking());

    // required uint32 numVotesInFavourOfKicking = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesinfavourofkicking());

    // required uint32 numVotesNeededToKick = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesneededtokick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KickPetitionUpdateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KickPetitionUpdateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KickPetitionUpdateMessage::GetClassData() const { return &_class_data_; }


void KickPetitionUpdateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KickPetitionUpdateMessage*>(&to_msg);
  auto& from = static_cast<const KickPetitionUpdateMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KickPetitionUpdateMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.petitionid_ = from._impl_.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.numvotesagainstkicking_ = from._impl_.numvotesagainstkicking_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.numvotesinfavourofkicking_ = from._impl_.numvotesinfavourofkicking_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.numvotesneededtokick_ = from._impl_.numvotesneededtokick_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KickPetitionUpdateMessage::CopyFrom(const KickPetitionUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPetitionUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPetitionUpdateMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void KickPetitionUpdateMessage::InternalSwap(KickPetitionUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KickPetitionUpdateMessage, _impl_.numvotesneededtokick_)
      + sizeof(KickPetitionUpdateMessage::_impl_.numvotesneededtokick_)
      - PROTOBUF_FIELD_OFFSET(KickPetitionUpdateMessage, _impl_.petitionid_)>(
          reinterpret_cast<char*>(&_impl_.petitionid_),
          reinterpret_cast<char*>(&other->_impl_.petitionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KickPetitionUpdateMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[73]);
}

// ===================================================================

class EndKickPetitionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<EndKickPetitionMessage>()._impl_._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numvotesagainstkicking(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numvotesinfavourofkicking(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_resultplayerkicked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_petitionendreason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

EndKickPetitionMessage::EndKickPetitionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EndKickPetitionMessage)
}
EndKickPetitionMessage::EndKickPetitionMessage(const EndKickPetitionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EndKickPetitionMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){}
    , decltype(_impl_.numvotesagainstkicking_){}
    , decltype(_impl_.numvotesinfavourofkicking_){}
    , decltype(_impl_.resultplayerkicked_){}
    , decltype(_impl_.petitionendreason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.petitionid_, &from._impl_.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.petitionendreason_) -
    reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.petitionendreason_));
  // @@protoc_insertion_point(copy_constructor:EndKickPetitionMessage)
}

inline void EndKickPetitionMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.petitionid_){0u}
    , decltype(_impl_.numvotesagainstkicking_){0u}
    , decltype(_impl_.numvotesinfavourofkicking_){0u}
    , decltype(_impl_.resultplayerkicked_){0u}
    , decltype(_impl_.petitionendreason_){0}
  };
}

EndKickPetitionMessage::~EndKickPetitionMessage() {
  // @@protoc_insertion_point(destructor:EndKickPetitionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndKickPetitionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EndKickPetitionMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndKickPetitionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndKickPetitionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.petitionendreason_) -
        reinterpret_cast<char*>(&_impl_.petitionid_)) + sizeof(_impl_.petitionendreason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndKickPetitionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          _impl_.petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 numVotesAgainstKicking = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_numvotesagainstkicking(&has_bits);
          _impl_.numvotesagainstkicking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 numVotesInFavourOfKicking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_numvotesinfavourofkicking(&has_bits);
          _impl_.numvotesinfavourofkicking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 resultPlayerKicked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_resultplayerkicked(&has_bits);
          _impl_.resultplayerkicked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EndKickPetitionMessage_PetitionEndReason_IsValid(val))) {
            _internal_set_petitionendreason(static_cast<::EndKickPetitionMessage_PetitionEndReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndKickPetitionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndKickPetitionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required uint32 numVotesAgainstKicking = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numvotesagainstkicking(), target);
  }

  // required uint32 numVotesInFavourOfKicking = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numvotesinfavourofkicking(), target);
  }

  // required uint32 resultPlayerKicked = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_resultplayerkicked(), target);
  }

  // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_petitionendreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndKickPetitionMessage)
  return target;
}

size_t EndKickPetitionMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndKickPetitionMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());
  }

  if (_internal_has_numvotesagainstkicking()) {
    // required uint32 numVotesAgainstKicking = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesagainstkicking());
  }

  if (_internal_has_numvotesinfavourofkicking()) {
    // required uint32 numVotesInFavourOfKicking = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesinfavourofkicking());
  }

  if (_internal_has_resultplayerkicked()) {
    // required uint32 resultPlayerKicked = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resultplayerkicked());
  }

  if (_internal_has_petitionendreason()) {
    // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_petitionendreason());
  }

  return total_size;
}
size_t EndKickPetitionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndKickPetitionMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_petitionid());

    // required uint32 numVotesAgainstKicking = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesagainstkicking());

    // required uint32 numVotesInFavourOfKicking = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numvotesinfavourofkicking());

    // required uint32 resultPlayerKicked = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resultplayerkicked());

    // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_petitionendreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndKickPetitionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EndKickPetitionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndKickPetitionMessage::GetClassData() const { return &_class_data_; }


void EndKickPetitionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EndKickPetitionMessage*>(&to_msg);
  auto& from = static_cast<const EndKickPetitionMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EndKickPetitionMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.petitionid_ = from._impl_.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.numvotesagainstkicking_ = from._impl_.numvotesagainstkicking_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.numvotesinfavourofkicking_ = from._impl_.numvotesinfavourofkicking_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.resultplayerkicked_ = from._impl_.resultplayerkicked_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.petitionendreason_ = from._impl_.petitionendreason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndKickPetitionMessage::CopyFrom(const EndKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndKickPetitionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndKickPetitionMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EndKickPetitionMessage::InternalSwap(EndKickPetitionMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndKickPetitionMessage, _impl_.petitionendreason_)
      + sizeof(EndKickPetitionMessage::_impl_.petitionendreason_)
      - PROTOBUF_FIELD_OFFSET(EndKickPetitionMessage, _impl_.petitionid_)>(
          reinterpret_cast<char*>(&_impl_.petitionid_),
          reinterpret_cast<char*>(&other->_impl_.petitionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndKickPetitionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[74]);
}

// ===================================================================

class StatisticsMessage_StatisticsData::_Internal {
 public:
  using HasBits = decltype(std::declval<StatisticsMessage_StatisticsData>()._impl_._has_bits_);
  static void set_has_statisticstype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_statisticsvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StatisticsMessage.StatisticsData)
}
StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData(const StatisticsMessage_StatisticsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatisticsMessage_StatisticsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statisticsvalue_){}
    , decltype(_impl_.statisticstype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.statisticsvalue_, &from._impl_.statisticsvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.statisticstype_) -
    reinterpret_cast<char*>(&_impl_.statisticsvalue_)) + sizeof(_impl_.statisticstype_));
  // @@protoc_insertion_point(copy_constructor:StatisticsMessage.StatisticsData)
}

inline void StatisticsMessage_StatisticsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statisticsvalue_){0u}
    , decltype(_impl_.statisticstype_){1}
  };
}

StatisticsMessage_StatisticsData::~StatisticsMessage_StatisticsData() {
  // @@protoc_insertion_point(destructor:StatisticsMessage.StatisticsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatisticsMessage_StatisticsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatisticsMessage_StatisticsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatisticsMessage_StatisticsData::Clear() {
// @@protoc_insertion_point(message_clear_start:StatisticsMessage.StatisticsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.statisticsvalue_ = 0u;
    _impl_.statisticstype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticsMessage_StatisticsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::StatisticsMessage_StatisticsData_StatisticsType_IsValid(val))) {
            _internal_set_statisticstype(static_cast<::StatisticsMessage_StatisticsData_StatisticsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 statisticsValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_statisticsvalue(&has_bits);
          _impl_.statisticsvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatisticsMessage_StatisticsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatisticsMessage.StatisticsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_statisticstype(), target);
  }

  // required uint32 statisticsValue = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_statisticsvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatisticsMessage.StatisticsData)
  return target;
}

size_t StatisticsMessage_StatisticsData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StatisticsMessage.StatisticsData)
  size_t total_size = 0;

  if (_internal_has_statisticsvalue()) {
    // required uint32 statisticsValue = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_statisticsvalue());
  }

  if (_internal_has_statisticstype()) {
    // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_statisticstype());
  }

  return total_size;
}
size_t StatisticsMessage_StatisticsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatisticsMessage.StatisticsData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 statisticsValue = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_statisticsvalue());

    // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_statisticstype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatisticsMessage_StatisticsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatisticsMessage_StatisticsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatisticsMessage_StatisticsData::GetClassData() const { return &_class_data_; }


void StatisticsMessage_StatisticsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatisticsMessage_StatisticsData*>(&to_msg);
  auto& from = static_cast<const StatisticsMessage_StatisticsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StatisticsMessage.StatisticsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.statisticsvalue_ = from._impl_.statisticsvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.statisticstype_ = from._impl_.statisticstype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatisticsMessage_StatisticsData::CopyFrom(const StatisticsMessage_StatisticsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatisticsMessage.StatisticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage_StatisticsData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StatisticsMessage_StatisticsData::InternalSwap(StatisticsMessage_StatisticsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.statisticsvalue_, other->_impl_.statisticsvalue_);
  swap(_impl_.statisticstype_, other->_impl_.statisticstype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticsMessage_StatisticsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[75]);
}

// ===================================================================

class StatisticsMessage::_Internal {
 public:
};

StatisticsMessage::StatisticsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StatisticsMessage)
}
StatisticsMessage::StatisticsMessage(const StatisticsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatisticsMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statisticsdata_){from._impl_.statisticsdata_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StatisticsMessage)
}

inline void StatisticsMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.statisticsdata_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatisticsMessage::~StatisticsMessage() {
  // @@protoc_insertion_point(destructor:StatisticsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatisticsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.statisticsdata_.~RepeatedPtrField();
}

void StatisticsMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatisticsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StatisticsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.statisticsdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statisticsdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatisticsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatisticsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statisticsdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_statisticsdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatisticsMessage)
  return target;
}

size_t StatisticsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatisticsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  total_size += 1UL * this->_internal_statisticsdata_size();
  for (const auto& msg : this->_impl_.statisticsdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatisticsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatisticsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatisticsMessage::GetClassData() const { return &_class_data_; }


void StatisticsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatisticsMessage*>(&to_msg);
  auto& from = static_cast<const StatisticsMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StatisticsMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.statisticsdata_.MergeFrom(from._impl_.statisticsdata_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatisticsMessage::CopyFrom(const StatisticsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatisticsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.statisticsdata_))
    return false;
  return true;
}

void StatisticsMessage::InternalSwap(StatisticsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.statisticsdata_.InternalSwap(&other->_impl_.statisticsdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[76]);
}

// ===================================================================

class ChatRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatRequestMessage>()._impl_._has_bits_);
  static void set_has_targetplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chattext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ChatRequestMessage::ChatRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatRequestMessage)
}
ChatRequestMessage::ChatRequestMessage(const ChatRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chattext_){}
    , decltype(_impl_.targetplayerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chattext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chattext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chattext()) {
    _this->_impl_.chattext_.Set(from._internal_chattext(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.targetplayerid_ = from._impl_.targetplayerid_;
  // @@protoc_insertion_point(copy_constructor:ChatRequestMessage)
}

inline void ChatRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chattext_){}
    , decltype(_impl_.targetplayerid_){0u}
  };
  _impl_.chattext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chattext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatRequestMessage::~ChatRequestMessage() {
  // @@protoc_insertion_point(destructor:ChatRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chattext_.Destroy();
}

void ChatRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chattext_.ClearNonDefaultToEmpty();
  }
  _impl_.targetplayerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 targetPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_targetplayerid(&has_bits);
          _impl_.targetplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string chatText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chattext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ChatRequestMessage.chatText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 targetPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_targetplayerid(), target);
  }

  // required string chatText = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chattext().data(), static_cast<int>(this->_internal_chattext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChatRequestMessage.chatText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chattext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRequestMessage)
  return target;
}

size_t ChatRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRequestMessage)
  size_t total_size = 0;

  // required string chatText = 3;
  if (_internal_has_chattext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chattext());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 targetPlayerId = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetplayerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatRequestMessage::GetClassData() const { return &_class_data_; }


void ChatRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatRequestMessage*>(&to_msg);
  auto& from = static_cast<const ChatRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chattext(from._internal_chattext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.targetplayerid_ = from._impl_.targetplayerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatRequestMessage::CopyFrom(const ChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ChatRequestMessage::InternalSwap(ChatRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chattext_, lhs_arena,
      &other->_impl_.chattext_, rhs_arena
  );
  swap(_impl_.targetplayerid_, other->_impl_.targetplayerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[77]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatMessage>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chattype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chattext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chattext_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.chattype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chattext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chattext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chattext()) {
    _this->_impl_.chattext_.Set(from._internal_chattext(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chattype_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.chattype_));
  // @@protoc_insertion_point(copy_constructor:ChatMessage)
}

inline void ChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chattext_){}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.chattype_){0}
  };
  _impl_.chattext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chattext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chattext_.Destroy();
}

void ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chattext_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chattype_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.chattype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ChatMessage.ChatType chatType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ChatMessage_ChatType_IsValid(val))) {
            _internal_set_chattype(static_cast<::ChatMessage_ChatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string chatText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chattext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ChatMessage.chatText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 playerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .ChatMessage.ChatType chatType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_chattype(), target);
  }

  // required string chatText = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chattext().data(), static_cast<int>(this->_internal_chattext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChatMessage.chatText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chattext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessage)
  return target;
}

size_t ChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChatMessage)
  size_t total_size = 0;

  if (_internal_has_chattext()) {
    // required string chatText = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chattext());
  }

  if (_internal_has_chattype()) {
    // required .ChatMessage.ChatType chatType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_chattype());
  }

  return total_size;
}
size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string chatText = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chattext());

    // required .ChatMessage.ChatType chatType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_chattype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 playerId = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }


void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chattext(from._internal_chattext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chattype_ = from._impl_.chattype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chattext_, lhs_arena,
      &other->_impl_.chattext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.chattype_)
      + sizeof(ChatMessage::_impl_.chattype_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[78]);
}

// ===================================================================

class ChatRejectMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatRejectMessage>()._impl_._has_bits_);
  static void set_has_chattext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ChatRejectMessage::ChatRejectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatRejectMessage)
}
ChatRejectMessage::ChatRejectMessage(const ChatRejectMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatRejectMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chattext_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chattext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chattext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chattext()) {
    _this->_impl_.chattext_.Set(from._internal_chattext(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatRejectMessage)
}

inline void ChatRejectMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chattext_){}
  };
  _impl_.chattext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chattext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatRejectMessage::~ChatRejectMessage() {
  // @@protoc_insertion_point(destructor:ChatRejectMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatRejectMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chattext_.Destroy();
}

void ChatRejectMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatRejectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRejectMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chattext_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatRejectMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string chatText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chattext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ChatRejectMessage.chatText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatRejectMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRejectMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string chatText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chattext().data(), static_cast<int>(this->_internal_chattext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChatRejectMessage.chatText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chattext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRejectMessage)
  return target;
}

size_t ChatRejectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRejectMessage)
  size_t total_size = 0;

  // required string chatText = 1;
  if (_internal_has_chattext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chattext());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatRejectMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatRejectMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatRejectMessage::GetClassData() const { return &_class_data_; }


void ChatRejectMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatRejectMessage*>(&to_msg);
  auto& from = static_cast<const ChatRejectMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatRejectMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chattext()) {
    _this->_internal_set_chattext(from._internal_chattext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatRejectMessage::CopyFrom(const ChatRejectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRejectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRejectMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ChatRejectMessage::InternalSwap(ChatRejectMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chattext_, lhs_arena,
      &other->_impl_.chattext_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRejectMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[79]);
}

// ===================================================================

class DialogMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DialogMessage>()._impl_._has_bits_);
  static void set_has_notificationtext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DialogMessage::DialogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DialogMessage)
}
DialogMessage::DialogMessage(const DialogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DialogMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notificationtext_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.notificationtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notificationtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notificationtext()) {
    _this->_impl_.notificationtext_.Set(from._internal_notificationtext(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DialogMessage)
}

inline void DialogMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notificationtext_){}
  };
  _impl_.notificationtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notificationtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DialogMessage::~DialogMessage() {
  // @@protoc_insertion_point(destructor:DialogMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DialogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notificationtext_.Destroy();
}

void DialogMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DialogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DialogMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.notificationtext_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DialogMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string notificationText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_notificationtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "DialogMessage.notificationText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DialogMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DialogMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string notificationText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notificationtext().data(), static_cast<int>(this->_internal_notificationtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DialogMessage.notificationText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notificationtext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DialogMessage)
  return target;
}

size_t DialogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DialogMessage)
  size_t total_size = 0;

  // required string notificationText = 1;
  if (_internal_has_notificationtext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notificationtext());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DialogMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DialogMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DialogMessage::GetClassData() const { return &_class_data_; }


void DialogMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DialogMessage*>(&to_msg);
  auto& from = static_cast<const DialogMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DialogMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_notificationtext()) {
    _this->_internal_set_notificationtext(from._internal_notificationtext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DialogMessage::CopyFrom(const DialogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DialogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DialogMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DialogMessage::InternalSwap(DialogMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notificationtext_, lhs_arena,
      &other->_impl_.notificationtext_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DialogMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[80]);
}

// ===================================================================

class TimeoutWarningMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeoutWarningMessage>()._impl_._has_bits_);
  static void set_has_timeoutreason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remainingseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TimeoutWarningMessage::TimeoutWarningMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TimeoutWarningMessage)
}
TimeoutWarningMessage::TimeoutWarningMessage(const TimeoutWarningMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeoutWarningMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timeoutreason_){}
    , decltype(_impl_.remainingseconds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timeoutreason_, &from._impl_.timeoutreason_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remainingseconds_) -
    reinterpret_cast<char*>(&_impl_.timeoutreason_)) + sizeof(_impl_.remainingseconds_));
  // @@protoc_insertion_point(copy_constructor:TimeoutWarningMessage)
}

inline void TimeoutWarningMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timeoutreason_){0}
    , decltype(_impl_.remainingseconds_){0u}
  };
}

TimeoutWarningMessage::~TimeoutWarningMessage() {
  // @@protoc_insertion_point(destructor:TimeoutWarningMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeoutWarningMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeoutWarningMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeoutWarningMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TimeoutWarningMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.timeoutreason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.remainingseconds_) -
        reinterpret_cast<char*>(&_impl_.timeoutreason_)) + sizeof(_impl_.remainingseconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeoutWarningMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TimeoutWarningMessage_TimeoutReason_IsValid(val))) {
            _internal_set_timeoutreason(static_cast<::TimeoutWarningMessage_TimeoutReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 remainingSeconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_remainingseconds(&has_bits);
          _impl_.remainingseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeoutWarningMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimeoutWarningMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_timeoutreason(), target);
  }

  // required uint32 remainingSeconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remainingseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimeoutWarningMessage)
  return target;
}

size_t TimeoutWarningMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TimeoutWarningMessage)
  size_t total_size = 0;

  if (_internal_has_timeoutreason()) {
    // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_timeoutreason());
  }

  if (_internal_has_remainingseconds()) {
    // required uint32 remainingSeconds = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remainingseconds());
  }

  return total_size;
}
size_t TimeoutWarningMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TimeoutWarningMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_timeoutreason());

    // required uint32 remainingSeconds = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remainingseconds());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeoutWarningMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeoutWarningMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeoutWarningMessage::GetClassData() const { return &_class_data_; }


void TimeoutWarningMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeoutWarningMessage*>(&to_msg);
  auto& from = static_cast<const TimeoutWarningMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TimeoutWarningMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timeoutreason_ = from._impl_.timeoutreason_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.remainingseconds_ = from._impl_.remainingseconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeoutWarningMessage::CopyFrom(const TimeoutWarningMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TimeoutWarningMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutWarningMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TimeoutWarningMessage::InternalSwap(TimeoutWarningMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeoutWarningMessage, _impl_.remainingseconds_)
      + sizeof(TimeoutWarningMessage::_impl_.remainingseconds_)
      - PROTOBUF_FIELD_OFFSET(TimeoutWarningMessage, _impl_.timeoutreason_)>(
          reinterpret_cast<char*>(&_impl_.timeoutreason_),
          reinterpret_cast<char*>(&other->_impl_.timeoutreason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeoutWarningMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[81]);
}

// ===================================================================

class ResetTimeoutMessage::_Internal {
 public:
};

ResetTimeoutMessage::ResetTimeoutMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ResetTimeoutMessage)
}
ResetTimeoutMessage::ResetTimeoutMessage(const ResetTimeoutMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResetTimeoutMessage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ResetTimeoutMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetTimeoutMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetTimeoutMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetTimeoutMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[82]);
}

// ===================================================================

class ReportAvatarMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportAvatarMessage>()._impl_._has_bits_);
  static void set_has_reportedplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reportedavatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ReportAvatarMessage::ReportAvatarMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ReportAvatarMessage)
}
ReportAvatarMessage::ReportAvatarMessage(const ReportAvatarMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportAvatarMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reportedavatarhash_){}
    , decltype(_impl_.reportedplayerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reportedavatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reportedavatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reportedavatarhash()) {
    _this->_impl_.reportedavatarhash_.Set(from._internal_reportedavatarhash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.reportedplayerid_ = from._impl_.reportedplayerid_;
  // @@protoc_insertion_point(copy_constructor:ReportAvatarMessage)
}

inline void ReportAvatarMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reportedavatarhash_){}
    , decltype(_impl_.reportedplayerid_){0u}
  };
  _impl_.reportedavatarhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reportedavatarhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReportAvatarMessage::~ReportAvatarMessage() {
  // @@protoc_insertion_point(destructor:ReportAvatarMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportAvatarMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reportedavatarhash_.Destroy();
}

void ReportAvatarMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportAvatarMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportAvatarMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reportedavatarhash_.ClearNonDefaultToEmpty();
  }
  _impl_.reportedplayerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportAvatarMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 reportedPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reportedplayerid(&has_bits);
          _impl_.reportedplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes reportedAvatarHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reportedavatarhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportAvatarMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportAvatarMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 reportedPlayerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reportedplayerid(), target);
  }

  // required bytes reportedAvatarHash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_reportedavatarhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportAvatarMessage)
  return target;
}

size_t ReportAvatarMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportAvatarMessage)
  size_t total_size = 0;

  if (_internal_has_reportedavatarhash()) {
    // required bytes reportedAvatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reportedavatarhash());
  }

  if (_internal_has_reportedplayerid()) {
    // required uint32 reportedPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reportedplayerid());
  }

  return total_size;
}
size_t ReportAvatarMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportAvatarMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes reportedAvatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reportedavatarhash());

    // required uint32 reportedPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reportedplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportAvatarMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportAvatarMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportAvatarMessage::GetClassData() const { return &_class_data_; }


void ReportAvatarMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportAvatarMessage*>(&to_msg);
  auto& from = static_cast<const ReportAvatarMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ReportAvatarMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reportedavatarhash(from._internal_reportedavatarhash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reportedplayerid_ = from._impl_.reportedplayerid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportAvatarMessage::CopyFrom(const ReportAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportAvatarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ReportAvatarMessage::InternalSwap(ReportAvatarMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reportedavatarhash_, lhs_arena,
      &other->_impl_.reportedavatarhash_, rhs_arena
  );
  swap(_impl_.reportedplayerid_, other->_impl_.reportedplayerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportAvatarMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[83]);
}

// ===================================================================

class ReportAvatarAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportAvatarAckMessage>()._impl_._has_bits_);
  static void set_has_reportedplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reportavatarresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ReportAvatarAckMessage::ReportAvatarAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ReportAvatarAckMessage)
}
ReportAvatarAckMessage::ReportAvatarAckMessage(const ReportAvatarAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportAvatarAckMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reportedplayerid_){}
    , decltype(_impl_.reportavatarresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.reportedplayerid_, &from._impl_.reportedplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reportavatarresult_) -
    reinterpret_cast<char*>(&_impl_.reportedplayerid_)) + sizeof(_impl_.reportavatarresult_));
  // @@protoc_insertion_point(copy_constructor:ReportAvatarAckMessage)
}

inline void ReportAvatarAckMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reportedplayerid_){0u}
    , decltype(_impl_.reportavatarresult_){0}
  };
}

ReportAvatarAckMessage::~ReportAvatarAckMessage() {
  // @@protoc_insertion_point(destructor:ReportAvatarAckMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportAvatarAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReportAvatarAckMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportAvatarAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportAvatarAckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.reportedplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reportavatarresult_) -
        reinterpret_cast<char*>(&_impl_.reportedplayerid_)) + sizeof(_impl_.reportavatarresult_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportAvatarAckMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 reportedPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reportedplayerid(&has_bits);
          _impl_.reportedplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ReportAvatarAckMessage_ReportAvatarResult_IsValid(val))) {
            _internal_set_reportavatarresult(static_cast<::ReportAvatarAckMessage_ReportAvatarResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportAvatarAckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportAvatarAckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 reportedPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reportedplayerid(), target);
  }

  // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reportavatarresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportAvatarAckMessage)
  return target;
}

size_t ReportAvatarAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportAvatarAckMessage)
  size_t total_size = 0;

  if (_internal_has_reportedplayerid()) {
    // required uint32 reportedPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reportedplayerid());
  }

  if (_internal_has_reportavatarresult()) {
    // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reportavatarresult());
  }

  return total_size;
}
size_t ReportAvatarAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportAvatarAckMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 reportedPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reportedplayerid());

    // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reportavatarresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportAvatarAckMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportAvatarAckMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportAvatarAckMessage::GetClassData() const { return &_class_data_; }


void ReportAvatarAckMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportAvatarAckMessage*>(&to_msg);
  auto& from = static_cast<const ReportAvatarAckMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ReportAvatarAckMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.reportedplayerid_ = from._impl_.reportedplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reportavatarresult_ = from._impl_.reportavatarresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportAvatarAckMessage::CopyFrom(const ReportAvatarAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportAvatarAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ReportAvatarAckMessage::InternalSwap(ReportAvatarAckMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportAvatarAckMessage, _impl_.reportavatarresult_)
      + sizeof(ReportAvatarAckMessage::_impl_.reportavatarresult_)
      - PROTOBUF_FIELD_OFFSET(ReportAvatarAckMessage, _impl_.reportedplayerid_)>(
          reinterpret_cast<char*>(&_impl_.reportedplayerid_),
          reinterpret_cast<char*>(&other->_impl_.reportedplayerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportAvatarAckMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[84]);
}

// ===================================================================

class ReportGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportGameMessage>()._impl_._has_bits_);
  static void set_has_reportedgameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ReportGameMessage::ReportGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ReportGameMessage)
}
ReportGameMessage::ReportGameMessage(const ReportGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportGameMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reportedgameid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reportedgameid_ = from._impl_.reportedgameid_;
  // @@protoc_insertion_point(copy_constructor:ReportGameMessage)
}

inline void ReportGameMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reportedgameid_){0u}
  };
}

ReportGameMessage::~ReportGameMessage() {
  // @@protoc_insertion_point(destructor:ReportGameMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReportGameMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportGameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reportedgameid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportGameMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 reportedGameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reportedgameid(&has_bits);
          _impl_.reportedgameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportGameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportGameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 reportedGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reportedgameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportGameMessage)
  return target;
}

size_t ReportGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportGameMessage)
  size_t total_size = 0;

  // required uint32 reportedGameId = 1;
  if (_internal_has_reportedgameid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reportedgameid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportGameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportGameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportGameMessage::GetClassData() const { return &_class_data_; }


void ReportGameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportGameMessage*>(&to_msg);
  auto& from = static_cast<const ReportGameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ReportGameMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reportedgameid()) {
    _this->_internal_set_reportedgameid(from._internal_reportedgameid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportGameMessage::CopyFrom(const ReportGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ReportGameMessage::InternalSwap(ReportGameMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.reportedgameid_, other->_impl_.reportedgameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportGameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[85]);
}

// ===================================================================

class ReportGameAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportGameAckMessage>()._impl_._has_bits_);
  static void set_has_reportedgameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reportgameresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ReportGameAckMessage::ReportGameAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ReportGameAckMessage)
}
ReportGameAckMessage::ReportGameAckMessage(const ReportGameAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportGameAckMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reportedgameid_){}
    , decltype(_impl_.reportgameresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.reportedgameid_, &from._impl_.reportedgameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reportgameresult_) -
    reinterpret_cast<char*>(&_impl_.reportedgameid_)) + sizeof(_impl_.reportgameresult_));
  // @@protoc_insertion_point(copy_constructor:ReportGameAckMessage)
}

inline void ReportGameAckMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reportedgameid_){0u}
    , decltype(_impl_.reportgameresult_){0}
  };
}

ReportGameAckMessage::~ReportGameAckMessage() {
  // @@protoc_insertion_point(destructor:ReportGameAckMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportGameAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReportGameAckMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportGameAckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.reportedgameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reportgameresult_) -
        reinterpret_cast<char*>(&_impl_.reportedgameid_)) + sizeof(_impl_.reportgameresult_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportGameAckMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 reportedGameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reportedgameid(&has_bits);
          _impl_.reportedgameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ReportGameAckMessage_ReportGameResult_IsValid(val))) {
            _internal_set_reportgameresult(static_cast<::ReportGameAckMessage_ReportGameResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportGameAckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportGameAckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 reportedGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reportedgameid(), target);
  }

  // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reportgameresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportGameAckMessage)
  return target;
}

size_t ReportGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportGameAckMessage)
  size_t total_size = 0;

  if (_internal_has_reportedgameid()) {
    // required uint32 reportedGameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reportedgameid());
  }

  if (_internal_has_reportgameresult()) {
    // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reportgameresult());
  }

  return total_size;
}
size_t ReportGameAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportGameAckMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 reportedGameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reportedgameid());

    // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reportgameresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportGameAckMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportGameAckMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportGameAckMessage::GetClassData() const { return &_class_data_; }


void ReportGameAckMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportGameAckMessage*>(&to_msg);
  auto& from = static_cast<const ReportGameAckMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ReportGameAckMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.reportedgameid_ = from._impl_.reportedgameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reportgameresult_ = from._impl_.reportgameresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportGameAckMessage::CopyFrom(const ReportGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ReportGameAckMessage::InternalSwap(ReportGameAckMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportGameAckMessage, _impl_.reportgameresult_)
      + sizeof(ReportGameAckMessage::_impl_.reportgameresult_)
      - PROTOBUF_FIELD_OFFSET(ReportGameAckMessage, _impl_.reportedgameid_)>(
          reinterpret_cast<char*>(&_impl_.reportedgameid_),
          reinterpret_cast<char*>(&other->_impl_.reportedgameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportGameAckMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[86]);
}

// ===================================================================

class ErrorMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorMessage>()._impl_._has_bits_);
  static void set_has_errorreason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ErrorMessage::ErrorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ErrorMessage)
}
ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errorreason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.errorreason_ = from._impl_.errorreason_;
  // @@protoc_insertion_point(copy_constructor:ErrorMessage)
}

inline void ErrorMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errorreason_){0}
  };
}

ErrorMessage::~ErrorMessage() {
  // @@protoc_insertion_point(destructor:ErrorMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ErrorMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ErrorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errorreason_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ErrorMessage.ErrorReason errorReason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorMessage_ErrorReason_IsValid(val))) {
            _internal_set_errorreason(static_cast<::ErrorMessage_ErrorReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ErrorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ErrorMessage)
  return target;
}

size_t ErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ErrorMessage)
  size_t total_size = 0;

  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (_internal_has_errorreason()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_errorreason());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorMessage::GetClassData() const { return &_class_data_; }


void ErrorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorMessage*>(&to_msg);
  auto& from = static_cast<const ErrorMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ErrorMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorreason()) {
    _this->_internal_set_errorreason(from._internal_errorreason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ErrorMessage::InternalSwap(ErrorMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.errorreason_, other->_impl_.errorreason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[87]);
}

// ===================================================================

class AdminRemoveGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AdminRemoveGameMessage>()._impl_._has_bits_);
  static void set_has_removegameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AdminRemoveGameMessage::AdminRemoveGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AdminRemoveGameMessage)
}
AdminRemoveGameMessage::AdminRemoveGameMessage(const AdminRemoveGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminRemoveGameMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removegameid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.removegameid_ = from._impl_.removegameid_;
  // @@protoc_insertion_point(copy_constructor:AdminRemoveGameMessage)
}

inline void AdminRemoveGameMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removegameid_){0u}
  };
}

AdminRemoveGameMessage::~AdminRemoveGameMessage() {
  // @@protoc_insertion_point(destructor:AdminRemoveGameMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminRemoveGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdminRemoveGameMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminRemoveGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminRemoveGameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.removegameid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminRemoveGameMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 removeGameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_removegameid(&has_bits);
          _impl_.removegameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminRemoveGameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminRemoveGameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 removeGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_removegameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminRemoveGameMessage)
  return target;
}

size_t AdminRemoveGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminRemoveGameMessage)
  size_t total_size = 0;

  // required uint32 removeGameId = 1;
  if (_internal_has_removegameid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_removegameid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminRemoveGameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminRemoveGameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminRemoveGameMessage::GetClassData() const { return &_class_data_; }


void AdminRemoveGameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminRemoveGameMessage*>(&to_msg);
  auto& from = static_cast<const AdminRemoveGameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AdminRemoveGameMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_removegameid()) {
    _this->_internal_set_removegameid(from._internal_removegameid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminRemoveGameMessage::CopyFrom(const AdminRemoveGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminRemoveGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRemoveGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AdminRemoveGameMessage::InternalSwap(AdminRemoveGameMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.removegameid_, other->_impl_.removegameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminRemoveGameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[88]);
}

// ===================================================================

class AdminRemoveGameAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AdminRemoveGameAckMessage>()._impl_._has_bits_);
  static void set_has_removegameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_removegameresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AdminRemoveGameAckMessage::AdminRemoveGameAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AdminRemoveGameAckMessage)
}
AdminRemoveGameAckMessage::AdminRemoveGameAckMessage(const AdminRemoveGameAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminRemoveGameAckMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removegameid_){}
    , decltype(_impl_.removegameresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.removegameid_, &from._impl_.removegameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.removegameresult_) -
    reinterpret_cast<char*>(&_impl_.removegameid_)) + sizeof(_impl_.removegameresult_));
  // @@protoc_insertion_point(copy_constructor:AdminRemoveGameAckMessage)
}

inline void AdminRemoveGameAckMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removegameid_){0u}
    , decltype(_impl_.removegameresult_){0}
  };
}

AdminRemoveGameAckMessage::~AdminRemoveGameAckMessage() {
  // @@protoc_insertion_point(destructor:AdminRemoveGameAckMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminRemoveGameAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdminRemoveGameAckMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminRemoveGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminRemoveGameAckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.removegameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.removegameresult_) -
        reinterpret_cast<char*>(&_impl_.removegameid_)) + sizeof(_impl_.removegameresult_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminRemoveGameAckMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 removeGameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_removegameid(&has_bits);
          _impl_.removegameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(val))) {
            _internal_set_removegameresult(static_cast<::AdminRemoveGameAckMessage_AdminRemoveGameResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminRemoveGameAckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminRemoveGameAckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 removeGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_removegameid(), target);
  }

  // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_removegameresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminRemoveGameAckMessage)
  return target;
}

size_t AdminRemoveGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AdminRemoveGameAckMessage)
  size_t total_size = 0;

  if (_internal_has_removegameid()) {
    // required uint32 removeGameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_removegameid());
  }

  if (_internal_has_removegameresult()) {
    // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_removegameresult());
  }

  return total_size;
}
size_t AdminRemoveGameAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminRemoveGameAckMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 removeGameId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_removegameid());

    // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_removegameresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminRemoveGameAckMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminRemoveGameAckMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminRemoveGameAckMessage::GetClassData() const { return &_class_data_; }


void AdminRemoveGameAckMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminRemoveGameAckMessage*>(&to_msg);
  auto& from = static_cast<const AdminRemoveGameAckMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AdminRemoveGameAckMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.removegameid_ = from._impl_.removegameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.removegameresult_ = from._impl_.removegameresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminRemoveGameAckMessage::CopyFrom(const AdminRemoveGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminRemoveGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRemoveGameAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AdminRemoveGameAckMessage::InternalSwap(AdminRemoveGameAckMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdminRemoveGameAckMessage, _impl_.removegameresult_)
      + sizeof(AdminRemoveGameAckMessage::_impl_.removegameresult_)
      - PROTOBUF_FIELD_OFFSET(AdminRemoveGameAckMessage, _impl_.removegameid_)>(
          reinterpret_cast<char*>(&_impl_.removegameid_),
          reinterpret_cast<char*>(&other->_impl_.removegameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminRemoveGameAckMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[89]);
}

// ===================================================================

class AdminBanPlayerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AdminBanPlayerMessage>()._impl_._has_bits_);
  static void set_has_banplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AdminBanPlayerMessage::AdminBanPlayerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AdminBanPlayerMessage)
}
AdminBanPlayerMessage::AdminBanPlayerMessage(const AdminBanPlayerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminBanPlayerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.banplayerid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.banplayerid_ = from._impl_.banplayerid_;
  // @@protoc_insertion_point(copy_constructor:AdminBanPlayerMessage)
}

inline void AdminBanPlayerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.banplayerid_){0u}
  };
}

AdminBanPlayerMessage::~AdminBanPlayerMessage() {
  // @@protoc_insertion_point(destructor:AdminBanPlayerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminBanPlayerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdminBanPlayerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminBanPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminBanPlayerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.banplayerid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminBanPlayerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 banPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_banplayerid(&has_bits);
          _impl_.banplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminBanPlayerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminBanPlayerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 banPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_banplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminBanPlayerMessage)
  return target;
}

size_t AdminBanPlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminBanPlayerMessage)
  size_t total_size = 0;

  // required uint32 banPlayerId = 1;
  if (_internal_has_banplayerid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_banplayerid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminBanPlayerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminBanPlayerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminBanPlayerMessage::GetClassData() const { return &_class_data_; }


void AdminBanPlayerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminBanPlayerMessage*>(&to_msg);
  auto& from = static_cast<const AdminBanPlayerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AdminBanPlayerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_banplayerid()) {
    _this->_internal_set_banplayerid(from._internal_banplayerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminBanPlayerMessage::CopyFrom(const AdminBanPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminBanPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminBanPlayerMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AdminBanPlayerMessage::InternalSwap(AdminBanPlayerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.banplayerid_, other->_impl_.banplayerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminBanPlayerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[90]);
}

// ===================================================================

class AdminBanPlayerAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AdminBanPlayerAckMessage>()._impl_._has_bits_);
  static void set_has_banplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_banplayerresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AdminBanPlayerAckMessage::AdminBanPlayerAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AdminBanPlayerAckMessage)
}
AdminBanPlayerAckMessage::AdminBanPlayerAckMessage(const AdminBanPlayerAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminBanPlayerAckMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.banplayerid_){}
    , decltype(_impl_.banplayerresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.banplayerid_, &from._impl_.banplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.banplayerresult_) -
    reinterpret_cast<char*>(&_impl_.banplayerid_)) + sizeof(_impl_.banplayerresult_));
  // @@protoc_insertion_point(copy_constructor:AdminBanPlayerAckMessage)
}

inline void AdminBanPlayerAckMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.banplayerid_){0u}
    , decltype(_impl_.banplayerresult_){0}
  };
}

AdminBanPlayerAckMessage::~AdminBanPlayerAckMessage() {
  // @@protoc_insertion_point(destructor:AdminBanPlayerAckMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminBanPlayerAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdminBanPlayerAckMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminBanPlayerAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminBanPlayerAckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.banplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.banplayerresult_) -
        reinterpret_cast<char*>(&_impl_.banplayerid_)) + sizeof(_impl_.banplayerresult_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminBanPlayerAckMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 banPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_banplayerid(&has_bits);
          _impl_.banplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(val))) {
            _internal_set_banplayerresult(static_cast<::AdminBanPlayerAckMessage_AdminBanPlayerResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminBanPlayerAckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminBanPlayerAckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 banPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_banplayerid(), target);
  }

  // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_banplayerresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminBanPlayerAckMessage)
  return target;
}

size_t AdminBanPlayerAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AdminBanPlayerAckMessage)
  size_t total_size = 0;

  if (_internal_has_banplayerid()) {
    // required uint32 banPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_banplayerid());
  }

  if (_internal_has_banplayerresult()) {
    // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_banplayerresult());
  }

  return total_size;
}
size_t AdminBanPlayerAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminBanPlayerAckMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 banPlayerId = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_banplayerid());

    // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_banplayerresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminBanPlayerAckMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminBanPlayerAckMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminBanPlayerAckMessage::GetClassData() const { return &_class_data_; }


void AdminBanPlayerAckMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminBanPlayerAckMessage*>(&to_msg);
  auto& from = static_cast<const AdminBanPlayerAckMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AdminBanPlayerAckMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.banplayerid_ = from._impl_.banplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.banplayerresult_ = from._impl_.banplayerresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminBanPlayerAckMessage::CopyFrom(const AdminBanPlayerAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminBanPlayerAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminBanPlayerAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AdminBanPlayerAckMessage::InternalSwap(AdminBanPlayerAckMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdminBanPlayerAckMessage, _impl_.banplayerresult_)
      + sizeof(AdminBanPlayerAckMessage::_impl_.banplayerresult_)
      - PROTOBUF_FIELD_OFFSET(AdminBanPlayerAckMessage, _impl_.banplayerid_)>(
          reinterpret_cast<char*>(&_impl_.banplayerid_),
          reinterpret_cast<char*>(&other->_impl_.banplayerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminBanPlayerAckMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[91]);
}

// ===================================================================

class AuthMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthMessage>()._impl_._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::AuthClientRequestMessage& authclientrequestmessage(const AuthMessage* msg);
  static void set_has_authclientrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AuthServerChallengeMessage& authserverchallengemessage(const AuthMessage* msg);
  static void set_has_authserverchallengemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::AuthClientResponseMessage& authclientresponsemessage(const AuthMessage* msg);
  static void set_has_authclientresponsemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::AuthServerVerificationMessage& authserververificationmessage(const AuthMessage* msg);
  static void set_has_authserververificationmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ErrorMessage& errormessage(const AuthMessage* msg);
  static void set_has_errormessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::AuthClientRequestMessage&
AuthMessage::_Internal::authclientrequestmessage(const AuthMessage* msg) {
  return *msg->_impl_.authclientrequestmessage_;
}
const ::AuthServerChallengeMessage&
AuthMessage::_Internal::authserverchallengemessage(const AuthMessage* msg) {
  return *msg->_impl_.authserverchallengemessage_;
}
const ::AuthClientResponseMessage&
AuthMessage::_Internal::authclientresponsemessage(const AuthMessage* msg) {
  return *msg->_impl_.authclientresponsemessage_;
}
const ::AuthServerVerificationMessage&
AuthMessage::_Internal::authserververificationmessage(const AuthMessage* msg) {
  return *msg->_impl_.authserververificationmessage_;
}
const ::ErrorMessage&
AuthMessage::_Internal::errormessage(const AuthMessage* msg) {
  return *msg->_impl_.errormessage_;
}
AuthMessage::AuthMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthMessage)
}
AuthMessage::AuthMessage(const AuthMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authclientrequestmessage_){nullptr}
    , decltype(_impl_.authserverchallengemessage_){nullptr}
    , decltype(_impl_.authclientresponsemessage_){nullptr}
    , decltype(_impl_.authserververificationmessage_){nullptr}
    , decltype(_impl_.errormessage_){nullptr}
    , decltype(_impl_.messagetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_authclientrequestmessage()) {
    _this->_impl_.authclientrequestmessage_ = new ::AuthClientRequestMessage(*from._impl_.authclientrequestmessage_);
  }
  if (from._internal_has_authserverchallengemessage()) {
    _this->_impl_.authserverchallengemessage_ = new ::AuthServerChallengeMessage(*from._impl_.authserverchallengemessage_);
  }
  if (from._internal_has_authclientresponsemessage()) {
    _this->_impl_.authclientresponsemessage_ = new ::AuthClientResponseMessage(*from._impl_.authclientresponsemessage_);
  }
  if (from._internal_has_authserververificationmessage()) {
    _this->_impl_.authserververificationmessage_ = new ::AuthServerVerificationMessage(*from._impl_.authserververificationmessage_);
  }
  if (from._internal_has_errormessage()) {
    _this->_impl_.errormessage_ = new ::ErrorMessage(*from._impl_.errormessage_);
  }
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:AuthMessage)
}

inline void AuthMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authclientrequestmessage_){nullptr}
    , decltype(_impl_.authserverchallengemessage_){nullptr}
    , decltype(_impl_.authclientresponsemessage_){nullptr}
    , decltype(_impl_.authserververificationmessage_){nullptr}
    , decltype(_impl_.errormessage_){nullptr}
    , decltype(_impl_.messagetype_){1}
  };
}

AuthMessage::~AuthMessage() {
  // @@protoc_insertion_point(destructor:AuthMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.authclientrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.authserverchallengemessage_;
  if (this != internal_default_instance()) delete _impl_.authclientresponsemessage_;
  if (this != internal_default_instance()) delete _impl_.authserververificationmessage_;
  if (this != internal_default_instance()) delete _impl_.errormessage_;
}

void AuthMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.authclientrequestmessage_ != nullptr);
      _impl_.authclientrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.authserverchallengemessage_ != nullptr);
      _impl_.authserverchallengemessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.authclientresponsemessage_ != nullptr);
      _impl_.authclientresponsemessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.authserververificationmessage_ != nullptr);
      _impl_.authserververificationmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.errormessage_ != nullptr);
      _impl_.errormessage_->Clear();
    }
    _impl_.messagetype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .AuthMessage.AuthMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AuthMessage_AuthMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::AuthMessage_AuthMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .AuthClientRequestMessage authClientRequestMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_authclientrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AuthServerChallengeMessage authServerChallengeMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_authserverchallengemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AuthClientResponseMessage authClientResponseMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_authclientresponsemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AuthServerVerificationMessage authServerVerificationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_authserververificationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ErrorMessage errorMessage = 1025;
      case 1025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errormessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .AuthMessage.AuthMessageType messageType = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .AuthClientRequestMessage authClientRequestMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::authclientrequestmessage(this),
        _Internal::authclientrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .AuthServerChallengeMessage authServerChallengeMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::authserverchallengemessage(this),
        _Internal::authserverchallengemessage(this).GetCachedSize(), target, stream);
  }

  // optional .AuthClientResponseMessage authClientResponseMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::authclientresponsemessage(this),
        _Internal::authclientresponsemessage(this).GetCachedSize(), target, stream);
  }

  // optional .AuthServerVerificationMessage authServerVerificationMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::authserververificationmessage(this),
        _Internal::authserververificationmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ErrorMessage errorMessage = 1025;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1025, _Internal::errormessage(this),
        _Internal::errormessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthMessage)
  return target;
}

size_t AuthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthMessage)
  size_t total_size = 0;

  // required .AuthMessage.AuthMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .AuthClientRequestMessage authClientRequestMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.authclientrequestmessage_);
    }

    // optional .AuthServerChallengeMessage authServerChallengeMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.authserverchallengemessage_);
    }

    // optional .AuthClientResponseMessage authClientResponseMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.authclientresponsemessage_);
    }

    // optional .AuthServerVerificationMessage authServerVerificationMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.authserververificationmessage_);
    }

    // optional .ErrorMessage errorMessage = 1025;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.errormessage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthMessage::GetClassData() const { return &_class_data_; }


void AuthMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthMessage*>(&to_msg);
  auto& from = static_cast<const AuthMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_authclientrequestmessage()->::AuthClientRequestMessage::MergeFrom(
          from._internal_authclientrequestmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_authserverchallengemessage()->::AuthServerChallengeMessage::MergeFrom(
          from._internal_authserverchallengemessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_authclientresponsemessage()->::AuthClientResponseMessage::MergeFrom(
          from._internal_authclientresponsemessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_authserververificationmessage()->::AuthServerVerificationMessage::MergeFrom(
          from._internal_authserververificationmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_errormessage()->::ErrorMessage::MergeFrom(
          from._internal_errormessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthMessage::CopyFrom(const AuthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_authclientrequestmessage()) {
    if (!_impl_.authclientrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_authserverchallengemessage()) {
    if (!_impl_.authserverchallengemessage_->IsInitialized()) return false;
  }
  if (_internal_has_authclientresponsemessage()) {
    if (!_impl_.authclientresponsemessage_->IsInitialized()) return false;
  }
  if (_internal_has_authserververificationmessage()) {
    if (!_impl_.authserververificationmessage_->IsInitialized()) return false;
  }
  if (_internal_has_errormessage()) {
    if (!_impl_.errormessage_->IsInitialized()) return false;
  }
  return true;
}

void AuthMessage::InternalSwap(AuthMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthMessage, _impl_.errormessage_)
      + sizeof(AuthMessage::_impl_.errormessage_)
      - PROTOBUF_FIELD_OFFSET(AuthMessage, _impl_.authclientrequestmessage_)>(
          reinterpret_cast<char*>(&_impl_.authclientrequestmessage_),
          reinterpret_cast<char*>(&other->_impl_.authclientrequestmessage_));
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[92]);
}

// ===================================================================

class LobbyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LobbyMessage>()._impl_._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::InitDoneMessage& initdonemessage(const LobbyMessage* msg);
  static void set_has_initdonemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AvatarRequestMessage& avatarrequestmessage(const LobbyMessage* msg);
  static void set_has_avatarrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::AvatarHeaderMessage& avatarheadermessage(const LobbyMessage* msg);
  static void set_has_avatarheadermessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::AvatarDataMessage& avatardatamessage(const LobbyMessage* msg);
  static void set_has_avatardatamessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::AvatarEndMessage& avatarendmessage(const LobbyMessage* msg);
  static void set_has_avatarendmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::UnknownAvatarMessage& unknownavatarmessage(const LobbyMessage* msg);
  static void set_has_unknownavatarmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PlayerListMessage& playerlistmessage(const LobbyMessage* msg);
  static void set_has_playerlistmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::GameListNewMessage& gamelistnewmessage(const LobbyMessage* msg);
  static void set_has_gamelistnewmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::GameListUpdateMessage& gamelistupdatemessage(const LobbyMessage* msg);
  static void set_has_gamelistupdatemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::GameListPlayerJoinedMessage& gamelistplayerjoinedmessage(const LobbyMessage* msg);
  static void set_has_gamelistplayerjoinedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::GameListPlayerLeftMessage& gamelistplayerleftmessage(const LobbyMessage* msg);
  static void set_has_gamelistplayerleftmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::GameListSpectatorJoinedMessage& gamelistspectatorjoinedmessage(const LobbyMessage* msg);
  static void set_has_gamelistspectatorjoinedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::GameListSpectatorLeftMessage& gamelistspectatorleftmessage(const LobbyMessage* msg);
  static void set_has_gamelistspectatorleftmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::GameListAdminChangedMessage& gamelistadminchangedmessage(const LobbyMessage* msg);
  static void set_has_gamelistadminchangedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::PlayerInfoRequestMessage& playerinforequestmessage(const LobbyMessage* msg);
  static void set_has_playerinforequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::PlayerInfoReplyMessage& playerinforeplymessage(const LobbyMessage* msg);
  static void set_has_playerinforeplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::SubscriptionRequestMessage& subscriptionrequestmessage(const LobbyMessage* msg);
  static void set_has_subscriptionrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::SubscriptionReplyMessage& subscriptionreplymessage(const LobbyMessage* msg);
  static void set_has_subscriptionreplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::CreateGameMessage& creategamemessage(const LobbyMessage* msg);
  static void set_has_creategamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::CreateGameFailedMessage& creategamefailedmessage(const LobbyMessage* msg);
  static void set_has_creategamefailedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::JoinGameMessage& joingamemessage(const LobbyMessage* msg);
  static void set_has_joingamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::RejoinGameMessage& rejoingamemessage(const LobbyMessage* msg);
  static void set_has_rejoingamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::JoinGameAckMessage& joingameackmessage(const LobbyMessage* msg);
  static void set_has_joingameackmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::JoinGameFailedMessage& joingamefailedmessage(const LobbyMessage* msg);
  static void set_has_joingamefailedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::InviteNotifyMessage& invitenotifymessage(const LobbyMessage* msg);
  static void set_has_invitenotifymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::RejectGameInvitationMessage& rejectgameinvitationmessage(const LobbyMessage* msg);
  static void set_has_rejectgameinvitationmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::RejectInvNotifyMessage& rejectinvnotifymessage(const LobbyMessage* msg);
  static void set_has_rejectinvnotifymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::StatisticsMessage& statisticsmessage(const LobbyMessage* msg);
  static void set_has_statisticsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::ChatRequestMessage& chatrequestmessage(const LobbyMessage* msg);
  static void set_has_chatrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::ChatMessage& chatmessage(const LobbyMessage* msg);
  static void set_has_chatmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::ChatRejectMessage& chatrejectmessage(const LobbyMessage* msg);
  static void set_has_chatrejectmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::DialogMessage& dialogmessage(const LobbyMessage* msg);
  static void set_has_dialogmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TimeoutWarningMessage& timeoutwarningmessage(const LobbyMessage* msg);
  static void set_has_timeoutwarningmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::ResetTimeoutMessage& resettimeoutmessage(const LobbyMessage* msg);
  static void set_has_resettimeoutmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::ReportAvatarMessage& reportavatarmessage(const LobbyMessage* msg);
  static void set_has_reportavatarmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::ReportAvatarAckMessage& reportavatarackmessage(const LobbyMessage* msg);
  static void set_has_reportavatarackmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::ReportGameMessage& reportgamemessage(const LobbyMessage* msg);
  static void set_has_reportgamemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::ReportGameAckMessage& reportgameackmessage(const LobbyMessage* msg);
  static void set_has_reportgameackmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::AdminRemoveGameMessage& adminremovegamemessage(const LobbyMessage* msg);
  static void set_has_adminremovegamemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::AdminRemoveGameAckMessage& adminremovegameackmessage(const LobbyMessage* msg);
  static void set_has_adminremovegameackmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::AdminBanPlayerMessage& adminbanplayermessage(const LobbyMessage* msg);
  static void set_has_adminbanplayermessage(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::AdminBanPlayerAckMessage& adminbanplayerackmessage(const LobbyMessage* msg);
  static void set_has_adminbanplayerackmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::ErrorMessage& errormessage(const LobbyMessage* msg);
  static void set_has_errormessage(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[1] & 0x00000800) ^ 0x00000800) != 0;
  }
};

const ::InitDoneMessage&
LobbyMessage::_Internal::initdonemessage(const LobbyMessage* msg) {
  return *msg->_impl_.initdonemessage_;
}
const ::AvatarRequestMessage&
LobbyMessage::_Internal::avatarrequestmessage(const LobbyMessage* msg) {
  return *msg->_impl_.avatarrequestmessage_;
}
const ::AvatarHeaderMessage&
LobbyMessage::_Internal::avatarheadermessage(const LobbyMessage* msg) {
  return *msg->_impl_.avatarheadermessage_;
}
const ::AvatarDataMessage&
LobbyMessage::_Internal::avatardatamessage(const LobbyMessage* msg) {
  return *msg->_impl_.avatardatamessage_;
}
const ::AvatarEndMessage&
LobbyMessage::_Internal::avatarendmessage(const LobbyMessage* msg) {
  return *msg->_impl_.avatarendmessage_;
}
const ::UnknownAvatarMessage&
LobbyMessage::_Internal::unknownavatarmessage(const LobbyMessage* msg) {
  return *msg->_impl_.unknownavatarmessage_;
}
const ::PlayerListMessage&
LobbyMessage::_Internal::playerlistmessage(const LobbyMessage* msg) {
  return *msg->_impl_.playerlistmessage_;
}
const ::GameListNewMessage&
LobbyMessage::_Internal::gamelistnewmessage(const LobbyMessage* msg) {
  return *msg->_impl_.gamelistnewmessage_;
}
const ::GameListUpdateMessage&
LobbyMessage::_Internal::gamelistupdatemessage(const LobbyMessage* msg) {
  return *msg->_impl_.gamelistupdatemessage_;
}
const ::GameListPlayerJoinedMessage&
LobbyMessage::_Internal::gamelistplayerjoinedmessage(const LobbyMessage* msg) {
  return *msg->_impl_.gamelistplayerjoinedmessage_;
}
const ::GameListPlayerLeftMessage&
LobbyMessage::_Internal::gamelistplayerleftmessage(const LobbyMessage* msg) {
  return *msg->_impl_.gamelistplayerleftmessage_;
}
const ::GameListSpectatorJoinedMessage&
LobbyMessage::_Internal::gamelistspectatorjoinedmessage(const LobbyMessage* msg) {
  return *msg->_impl_.gamelistspectatorjoinedmessage_;
}
const ::GameListSpectatorLeftMessage&
LobbyMessage::_Internal::gamelistspectatorleftmessage(const LobbyMessage* msg) {
  return *msg->_impl_.gamelistspectatorleftmessage_;
}
const ::GameListAdminChangedMessage&
LobbyMessage::_Internal::gamelistadminchangedmessage(const LobbyMessage* msg) {
  return *msg->_impl_.gamelistadminchangedmessage_;
}
const ::PlayerInfoRequestMessage&
LobbyMessage::_Internal::playerinforequestmessage(const LobbyMessage* msg) {
  return *msg->_impl_.playerinforequestmessage_;
}
const ::PlayerInfoReplyMessage&
LobbyMessage::_Internal::playerinforeplymessage(const LobbyMessage* msg) {
  return *msg->_impl_.playerinforeplymessage_;
}
const ::SubscriptionRequestMessage&
LobbyMessage::_Internal::subscriptionrequestmessage(const LobbyMessage* msg) {
  return *msg->_impl_.subscriptionrequestmessage_;
}
const ::SubscriptionReplyMessage&
LobbyMessage::_Internal::subscriptionreplymessage(const LobbyMessage* msg) {
  return *msg->_impl_.subscriptionreplymessage_;
}
const ::CreateGameMessage&
LobbyMessage::_Internal::creategamemessage(const LobbyMessage* msg) {
  return *msg->_impl_.creategamemessage_;
}
const ::CreateGameFailedMessage&
LobbyMessage::_Internal::creategamefailedmessage(const LobbyMessage* msg) {
  return *msg->_impl_.creategamefailedmessage_;
}
const ::JoinGameMessage&
LobbyMessage::_Internal::joingamemessage(const LobbyMessage* msg) {
  return *msg->_impl_.joingamemessage_;
}
const ::RejoinGameMessage&
LobbyMessage::_Internal::rejoingamemessage(const LobbyMessage* msg) {
  return *msg->_impl_.rejoingamemessage_;
}
const ::JoinGameAckMessage&
LobbyMessage::_Internal::joingameackmessage(const LobbyMessage* msg) {
  return *msg->_impl_.joingameackmessage_;
}
const ::JoinGameFailedMessage&
LobbyMessage::_Internal::joingamefailedmessage(const LobbyMessage* msg) {
  return *msg->_impl_.joingamefailedmessage_;
}
const ::InviteNotifyMessage&
LobbyMessage::_Internal::invitenotifymessage(const LobbyMessage* msg) {
  return *msg->_impl_.invitenotifymessage_;
}
const ::RejectGameInvitationMessage&
LobbyMessage::_Internal::rejectgameinvitationmessage(const LobbyMessage* msg) {
  return *msg->_impl_.rejectgameinvitationmessage_;
}
const ::RejectInvNotifyMessage&
LobbyMessage::_Internal::rejectinvnotifymessage(const LobbyMessage* msg) {
  return *msg->_impl_.rejectinvnotifymessage_;
}
const ::StatisticsMessage&
LobbyMessage::_Internal::statisticsmessage(const LobbyMessage* msg) {
  return *msg->_impl_.statisticsmessage_;
}
const ::ChatRequestMessage&
LobbyMessage::_Internal::chatrequestmessage(const LobbyMessage* msg) {
  return *msg->_impl_.chatrequestmessage_;
}
const ::ChatMessage&
LobbyMessage::_Internal::chatmessage(const LobbyMessage* msg) {
  return *msg->_impl_.chatmessage_;
}
const ::ChatRejectMessage&
LobbyMessage::_Internal::chatrejectmessage(const LobbyMessage* msg) {
  return *msg->_impl_.chatrejectmessage_;
}
const ::DialogMessage&
LobbyMessage::_Internal::dialogmessage(const LobbyMessage* msg) {
  return *msg->_impl_.dialogmessage_;
}
const ::TimeoutWarningMessage&
LobbyMessage::_Internal::timeoutwarningmessage(const LobbyMessage* msg) {
  return *msg->_impl_.timeoutwarningmessage_;
}
const ::ResetTimeoutMessage&
LobbyMessage::_Internal::resettimeoutmessage(const LobbyMessage* msg) {
  return *msg->_impl_.resettimeoutmessage_;
}
const ::ReportAvatarMessage&
LobbyMessage::_Internal::reportavatarmessage(const LobbyMessage* msg) {
  return *msg->_impl_.reportavatarmessage_;
}
const ::ReportAvatarAckMessage&
LobbyMessage::_Internal::reportavatarackmessage(const LobbyMessage* msg) {
  return *msg->_impl_.reportavatarackmessage_;
}
const ::ReportGameMessage&
LobbyMessage::_Internal::reportgamemessage(const LobbyMessage* msg) {
  return *msg->_impl_.reportgamemessage_;
}
const ::ReportGameAckMessage&
LobbyMessage::_Internal::reportgameackmessage(const LobbyMessage* msg) {
  return *msg->_impl_.reportgameackmessage_;
}
const ::AdminRemoveGameMessage&
LobbyMessage::_Internal::adminremovegamemessage(const LobbyMessage* msg) {
  return *msg->_impl_.adminremovegamemessage_;
}
const ::AdminRemoveGameAckMessage&
LobbyMessage::_Internal::adminremovegameackmessage(const LobbyMessage* msg) {
  return *msg->_impl_.adminremovegameackmessage_;
}
const ::AdminBanPlayerMessage&
LobbyMessage::_Internal::adminbanplayermessage(const LobbyMessage* msg) {
  return *msg->_impl_.adminbanplayermessage_;
}
const ::AdminBanPlayerAckMessage&
LobbyMessage::_Internal::adminbanplayerackmessage(const LobbyMessage* msg) {
  return *msg->_impl_.adminbanplayerackmessage_;
}
const ::ErrorMessage&
LobbyMessage::_Internal::errormessage(const LobbyMessage* msg) {
  return *msg->_impl_.errormessage_;
}
LobbyMessage::LobbyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LobbyMessage)
}
LobbyMessage::LobbyMessage(const LobbyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LobbyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initdonemessage_){nullptr}
    , decltype(_impl_.avatarrequestmessage_){nullptr}
    , decltype(_impl_.avatarheadermessage_){nullptr}
    , decltype(_impl_.avatardatamessage_){nullptr}
    , decltype(_impl_.avatarendmessage_){nullptr}
    , decltype(_impl_.unknownavatarmessage_){nullptr}
    , decltype(_impl_.playerlistmessage_){nullptr}
    , decltype(_impl_.gamelistnewmessage_){nullptr}
    , decltype(_impl_.gamelistupdatemessage_){nullptr}
    , decltype(_impl_.gamelistplayerjoinedmessage_){nullptr}
    , decltype(_impl_.gamelistplayerleftmessage_){nullptr}
    , decltype(_impl_.gamelistspectatorjoinedmessage_){nullptr}
    , decltype(_impl_.gamelistspectatorleftmessage_){nullptr}
    , decltype(_impl_.gamelistadminchangedmessage_){nullptr}
    , decltype(_impl_.playerinforequestmessage_){nullptr}
    , decltype(_impl_.playerinforeplymessage_){nullptr}
    , decltype(_impl_.subscriptionrequestmessage_){nullptr}
    , decltype(_impl_.subscriptionreplymessage_){nullptr}
    , decltype(_impl_.creategamemessage_){nullptr}
    , decltype(_impl_.creategamefailedmessage_){nullptr}
    , decltype(_impl_.joingamemessage_){nullptr}
    , decltype(_impl_.rejoingamemessage_){nullptr}
    , decltype(_impl_.joingameackmessage_){nullptr}
    , decltype(_impl_.joingamefailedmessage_){nullptr}
    , decltype(_impl_.invitenotifymessage_){nullptr}
    , decltype(_impl_.rejectgameinvitationmessage_){nullptr}
    , decltype(_impl_.rejectinvnotifymessage_){nullptr}
    , decltype(_impl_.statisticsmessage_){nullptr}
    , decltype(_impl_.chatrequestmessage_){nullptr}
    , decltype(_impl_.chatmessage_){nullptr}
    , decltype(_impl_.chatrejectmessage_){nullptr}
    , decltype(_impl_.dialogmessage_){nullptr}
    , decltype(_impl_.timeoutwarningmessage_){nullptr}
    , decltype(_impl_.resettimeoutmessage_){nullptr}
    , decltype(_impl_.reportavatarmessage_){nullptr}
    , decltype(_impl_.reportavatarackmessage_){nullptr}
    , decltype(_impl_.reportgamemessage_){nullptr}
    , decltype(_impl_.reportgameackmessage_){nullptr}
    , decltype(_impl_.adminremovegamemessage_){nullptr}
    , decltype(_impl_.adminremovegameackmessage_){nullptr}
    , decltype(_impl_.adminbanplayermessage_){nullptr}
    , decltype(_impl_.adminbanplayerackmessage_){nullptr}
    , decltype(_impl_.errormessage_){nullptr}
    , decltype(_impl_.messagetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initdonemessage()) {
    _this->_impl_.initdonemessage_ = new ::InitDoneMessage(*from._impl_.initdonemessage_);
  }
  if (from._internal_has_avatarrequestmessage()) {
    _this->_impl_.avatarrequestmessage_ = new ::AvatarRequestMessage(*from._impl_.avatarrequestmessage_);
  }
  if (from._internal_has_avatarheadermessage()) {
    _this->_impl_.avatarheadermessage_ = new ::AvatarHeaderMessage(*from._impl_.avatarheadermessage_);
  }
  if (from._internal_has_avatardatamessage()) {
    _this->_impl_.avatardatamessage_ = new ::AvatarDataMessage(*from._impl_.avatardatamessage_);
  }
  if (from._internal_has_avatarendmessage()) {
    _this->_impl_.avatarendmessage_ = new ::AvatarEndMessage(*from._impl_.avatarendmessage_);
  }
  if (from._internal_has_unknownavatarmessage()) {
    _this->_impl_.unknownavatarmessage_ = new ::UnknownAvatarMessage(*from._impl_.unknownavatarmessage_);
  }
  if (from._internal_has_playerlistmessage()) {
    _this->_impl_.playerlistmessage_ = new ::PlayerListMessage(*from._impl_.playerlistmessage_);
  }
  if (from._internal_has_gamelistnewmessage()) {
    _this->_impl_.gamelistnewmessage_ = new ::GameListNewMessage(*from._impl_.gamelistnewmessage_);
  }
  if (from._internal_has_gamelistupdatemessage()) {
    _this->_impl_.gamelistupdatemessage_ = new ::GameListUpdateMessage(*from._impl_.gamelistupdatemessage_);
  }
  if (from._internal_has_gamelistplayerjoinedmessage()) {
    _this->_impl_.gamelistplayerjoinedmessage_ = new ::GameListPlayerJoinedMessage(*from._impl_.gamelistplayerjoinedmessage_);
  }
  if (from._internal_has_gamelistplayerleftmessage()) {
    _this->_impl_.gamelistplayerleftmessage_ = new ::GameListPlayerLeftMessage(*from._impl_.gamelistplayerleftmessage_);
  }
  if (from._internal_has_gamelistspectatorjoinedmessage()) {
    _this->_impl_.gamelistspectatorjoinedmessage_ = new ::GameListSpectatorJoinedMessage(*from._impl_.gamelistspectatorjoinedmessage_);
  }
  if (from._internal_has_gamelistspectatorleftmessage()) {
    _this->_impl_.gamelistspectatorleftmessage_ = new ::GameListSpectatorLeftMessage(*from._impl_.gamelistspectatorleftmessage_);
  }
  if (from._internal_has_gamelistadminchangedmessage()) {
    _this->_impl_.gamelistadminchangedmessage_ = new ::GameListAdminChangedMessage(*from._impl_.gamelistadminchangedmessage_);
  }
  if (from._internal_has_playerinforequestmessage()) {
    _this->_impl_.playerinforequestmessage_ = new ::PlayerInfoRequestMessage(*from._impl_.playerinforequestmessage_);
  }
  if (from._internal_has_playerinforeplymessage()) {
    _this->_impl_.playerinforeplymessage_ = new ::PlayerInfoReplyMessage(*from._impl_.playerinforeplymessage_);
  }
  if (from._internal_has_subscriptionrequestmessage()) {
    _this->_impl_.subscriptionrequestmessage_ = new ::SubscriptionRequestMessage(*from._impl_.subscriptionrequestmessage_);
  }
  if (from._internal_has_subscriptionreplymessage()) {
    _this->_impl_.subscriptionreplymessage_ = new ::SubscriptionReplyMessage(*from._impl_.subscriptionreplymessage_);
  }
  if (from._internal_has_creategamemessage()) {
    _this->_impl_.creategamemessage_ = new ::CreateGameMessage(*from._impl_.creategamemessage_);
  }
  if (from._internal_has_creategamefailedmessage()) {
    _this->_impl_.creategamefailedmessage_ = new ::CreateGameFailedMessage(*from._impl_.creategamefailedmessage_);
  }
  if (from._internal_has_joingamemessage()) {
    _this->_impl_.joingamemessage_ = new ::JoinGameMessage(*from._impl_.joingamemessage_);
  }
  if (from._internal_has_rejoingamemessage()) {
    _this->_impl_.rejoingamemessage_ = new ::RejoinGameMessage(*from._impl_.rejoingamemessage_);
  }
  if (from._internal_has_joingameackmessage()) {
    _this->_impl_.joingameackmessage_ = new ::JoinGameAckMessage(*from._impl_.joingameackmessage_);
  }
  if (from._internal_has_joingamefailedmessage()) {
    _this->_impl_.joingamefailedmessage_ = new ::JoinGameFailedMessage(*from._impl_.joingamefailedmessage_);
  }
  if (from._internal_has_invitenotifymessage()) {
    _this->_impl_.invitenotifymessage_ = new ::InviteNotifyMessage(*from._impl_.invitenotifymessage_);
  }
  if (from._internal_has_rejectgameinvitationmessage()) {
    _this->_impl_.rejectgameinvitationmessage_ = new ::RejectGameInvitationMessage(*from._impl_.rejectgameinvitationmessage_);
  }
  if (from._internal_has_rejectinvnotifymessage()) {
    _this->_impl_.rejectinvnotifymessage_ = new ::RejectInvNotifyMessage(*from._impl_.rejectinvnotifymessage_);
  }
  if (from._internal_has_statisticsmessage()) {
    _this->_impl_.statisticsmessage_ = new ::StatisticsMessage(*from._impl_.statisticsmessage_);
  }
  if (from._internal_has_chatrequestmessage()) {
    _this->_impl_.chatrequestmessage_ = new ::ChatRequestMessage(*from._impl_.chatrequestmessage_);
  }
  if (from._internal_has_chatmessage()) {
    _this->_impl_.chatmessage_ = new ::ChatMessage(*from._impl_.chatmessage_);
  }
  if (from._internal_has_chatrejectmessage()) {
    _this->_impl_.chatrejectmessage_ = new ::ChatRejectMessage(*from._impl_.chatrejectmessage_);
  }
  if (from._internal_has_dialogmessage()) {
    _this->_impl_.dialogmessage_ = new ::DialogMessage(*from._impl_.dialogmessage_);
  }
  if (from._internal_has_timeoutwarningmessage()) {
    _this->_impl_.timeoutwarningmessage_ = new ::TimeoutWarningMessage(*from._impl_.timeoutwarningmessage_);
  }
  if (from._internal_has_resettimeoutmessage()) {
    _this->_impl_.resettimeoutmessage_ = new ::ResetTimeoutMessage(*from._impl_.resettimeoutmessage_);
  }
  if (from._internal_has_reportavatarmessage()) {
    _this->_impl_.reportavatarmessage_ = new ::ReportAvatarMessage(*from._impl_.reportavatarmessage_);
  }
  if (from._internal_has_reportavatarackmessage()) {
    _this->_impl_.reportavatarackmessage_ = new ::ReportAvatarAckMessage(*from._impl_.reportavatarackmessage_);
  }
  if (from._internal_has_reportgamemessage()) {
    _this->_impl_.reportgamemessage_ = new ::ReportGameMessage(*from._impl_.reportgamemessage_);
  }
  if (from._internal_has_reportgameackmessage()) {
    _this->_impl_.reportgameackmessage_ = new ::ReportGameAckMessage(*from._impl_.reportgameackmessage_);
  }
  if (from._internal_has_adminremovegamemessage()) {
    _this->_impl_.adminremovegamemessage_ = new ::AdminRemoveGameMessage(*from._impl_.adminremovegamemessage_);
  }
  if (from._internal_has_adminremovegameackmessage()) {
    _this->_impl_.adminremovegameackmessage_ = new ::AdminRemoveGameAckMessage(*from._impl_.adminremovegameackmessage_);
  }
  if (from._internal_has_adminbanplayermessage()) {
    _this->_impl_.adminbanplayermessage_ = new ::AdminBanPlayerMessage(*from._impl_.adminbanplayermessage_);
  }
  if (from._internal_has_adminbanplayerackmessage()) {
    _this->_impl_.adminbanplayerackmessage_ = new ::AdminBanPlayerAckMessage(*from._impl_.adminbanplayerackmessage_);
  }
  if (from._internal_has_errormessage()) {
    _this->_impl_.errormessage_ = new ::ErrorMessage(*from._impl_.errormessage_);
  }
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:LobbyMessage)
}

inline void LobbyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initdonemessage_){nullptr}
    , decltype(_impl_.avatarrequestmessage_){nullptr}
    , decltype(_impl_.avatarheadermessage_){nullptr}
    , decltype(_impl_.avatardatamessage_){nullptr}
    , decltype(_impl_.avatarendmessage_){nullptr}
    , decltype(_impl_.unknownavatarmessage_){nullptr}
    , decltype(_impl_.playerlistmessage_){nullptr}
    , decltype(_impl_.gamelistnewmessage_){nullptr}
    , decltype(_impl_.gamelistupdatemessage_){nullptr}
    , decltype(_impl_.gamelistplayerjoinedmessage_){nullptr}
    , decltype(_impl_.gamelistplayerleftmessage_){nullptr}
    , decltype(_impl_.gamelistspectatorjoinedmessage_){nullptr}
    , decltype(_impl_.gamelistspectatorleftmessage_){nullptr}
    , decltype(_impl_.gamelistadminchangedmessage_){nullptr}
    , decltype(_impl_.playerinforequestmessage_){nullptr}
    , decltype(_impl_.playerinforeplymessage_){nullptr}
    , decltype(_impl_.subscriptionrequestmessage_){nullptr}
    , decltype(_impl_.subscriptionreplymessage_){nullptr}
    , decltype(_impl_.creategamemessage_){nullptr}
    , decltype(_impl_.creategamefailedmessage_){nullptr}
    , decltype(_impl_.joingamemessage_){nullptr}
    , decltype(_impl_.rejoingamemessage_){nullptr}
    , decltype(_impl_.joingameackmessage_){nullptr}
    , decltype(_impl_.joingamefailedmessage_){nullptr}
    , decltype(_impl_.invitenotifymessage_){nullptr}
    , decltype(_impl_.rejectgameinvitationmessage_){nullptr}
    , decltype(_impl_.rejectinvnotifymessage_){nullptr}
    , decltype(_impl_.statisticsmessage_){nullptr}
    , decltype(_impl_.chatrequestmessage_){nullptr}
    , decltype(_impl_.chatmessage_){nullptr}
    , decltype(_impl_.chatrejectmessage_){nullptr}
    , decltype(_impl_.dialogmessage_){nullptr}
    , decltype(_impl_.timeoutwarningmessage_){nullptr}
    , decltype(_impl_.resettimeoutmessage_){nullptr}
    , decltype(_impl_.reportavatarmessage_){nullptr}
    , decltype(_impl_.reportavatarackmessage_){nullptr}
    , decltype(_impl_.reportgamemessage_){nullptr}
    , decltype(_impl_.reportgameackmessage_){nullptr}
    , decltype(_impl_.adminremovegamemessage_){nullptr}
    , decltype(_impl_.adminremovegameackmessage_){nullptr}
    , decltype(_impl_.adminbanplayermessage_){nullptr}
    , decltype(_impl_.adminbanplayerackmessage_){nullptr}
    , decltype(_impl_.errormessage_){nullptr}
    , decltype(_impl_.messagetype_){1}
  };
}

LobbyMessage::~LobbyMessage() {
  // @@protoc_insertion_point(destructor:LobbyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LobbyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.initdonemessage_;
  if (this != internal_default_instance()) delete _impl_.avatarrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.avatarheadermessage_;
  if (this != internal_default_instance()) delete _impl_.avatardatamessage_;
  if (this != internal_default_instance()) delete _impl_.avatarendmessage_;
  if (this != internal_default_instance()) delete _impl_.unknownavatarmessage_;
  if (this != internal_default_instance()) delete _impl_.playerlistmessage_;
  if (this != internal_default_instance()) delete _impl_.gamelistnewmessage_;
  if (this != internal_default_instance()) delete _impl_.gamelistupdatemessage_;
  if (this != internal_default_instance()) delete _impl_.gamelistplayerjoinedmessage_;
  if (this != internal_default_instance()) delete _impl_.gamelistplayerleftmessage_;
  if (this != internal_default_instance()) delete _impl_.gamelistspectatorjoinedmessage_;
  if (this != internal_default_instance()) delete _impl_.gamelistspectatorleftmessage_;
  if (this != internal_default_instance()) delete _impl_.gamelistadminchangedmessage_;
  if (this != internal_default_instance()) delete _impl_.playerinforequestmessage_;
  if (this != internal_default_instance()) delete _impl_.playerinforeplymessage_;
  if (this != internal_default_instance()) delete _impl_.subscriptionrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.subscriptionreplymessage_;
  if (this != internal_default_instance()) delete _impl_.creategamemessage_;
  if (this != internal_default_instance()) delete _impl_.creategamefailedmessage_;
  if (this != internal_default_instance()) delete _impl_.joingamemessage_;
  if (this != internal_default_instance()) delete _impl_.rejoingamemessage_;
  if (this != internal_default_instance()) delete _impl_.joingameackmessage_;
  if (this != internal_default_instance()) delete _impl_.joingamefailedmessage_;
  if (this != internal_default_instance()) delete _impl_.invitenotifymessage_;
  if (this != internal_default_instance()) delete _impl_.rejectgameinvitationmessage_;
  if (this != internal_default_instance()) delete _impl_.rejectinvnotifymessage_;
  if (this != internal_default_instance()) delete _impl_.statisticsmessage_;
  if (this != internal_default_instance()) delete _impl_.chatrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.chatmessage_;
  if (this != internal_default_instance()) delete _impl_.chatrejectmessage_;
  if (this != internal_default_instance()) delete _impl_.dialogmessage_;
  if (this != internal_default_instance()) delete _impl_.timeoutwarningmessage_;
  if (this != internal_default_instance()) delete _impl_.resettimeoutmessage_;
  if (this != internal_default_instance()) delete _impl_.reportavatarmessage_;
  if (this != internal_default_instance()) delete _impl_.reportavatarackmessage_;
  if (this != internal_default_instance()) delete _impl_.reportgamemessage_;
  if (this != internal_default_instance()) delete _impl_.reportgameackmessage_;
  if (this != internal_default_instance()) delete _impl_.adminremovegamemessage_;
  if (this != internal_default_instance()) delete _impl_.adminremovegameackmessage_;
  if (this != internal_default_instance()) delete _impl_.adminbanplayermessage_;
  if (this != internal_default_instance()) delete _impl_.adminbanplayerackmessage_;
  if (this != internal_default_instance()) delete _impl_.errormessage_;
}

void LobbyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LobbyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.initdonemessage_ != nullptr);
      _impl_.initdonemessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.avatarrequestmessage_ != nullptr);
      _impl_.avatarrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.avatarheadermessage_ != nullptr);
      _impl_.avatarheadermessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.avatardatamessage_ != nullptr);
      _impl_.avatardatamessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.avatarendmessage_ != nullptr);
      _impl_.avatarendmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.unknownavatarmessage_ != nullptr);
      _impl_.unknownavatarmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.playerlistmessage_ != nullptr);
      _impl_.playerlistmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.gamelistnewmessage_ != nullptr);
      _impl_.gamelistnewmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.gamelistupdatemessage_ != nullptr);
      _impl_.gamelistupdatemessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.gamelistplayerjoinedmessage_ != nullptr);
      _impl_.gamelistplayerjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.gamelistplayerleftmessage_ != nullptr);
      _impl_.gamelistplayerleftmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.gamelistspectatorjoinedmessage_ != nullptr);
      _impl_.gamelistspectatorjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.gamelistspectatorleftmessage_ != nullptr);
      _impl_.gamelistspectatorleftmessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.gamelistadminchangedmessage_ != nullptr);
      _impl_.gamelistadminchangedmessage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.playerinforequestmessage_ != nullptr);
      _impl_.playerinforequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.playerinforeplymessage_ != nullptr);
      _impl_.playerinforeplymessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.subscriptionrequestmessage_ != nullptr);
      _impl_.subscriptionrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.subscriptionreplymessage_ != nullptr);
      _impl_.subscriptionreplymessage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.creategamemessage_ != nullptr);
      _impl_.creategamemessage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.creategamefailedmessage_ != nullptr);
      _impl_.creategamefailedmessage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.joingamemessage_ != nullptr);
      _impl_.joingamemessage_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.rejoingamemessage_ != nullptr);
      _impl_.rejoingamemessage_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.joingameackmessage_ != nullptr);
      _impl_.joingameackmessage_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.joingamefailedmessage_ != nullptr);
      _impl_.joingamefailedmessage_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.invitenotifymessage_ != nullptr);
      _impl_.invitenotifymessage_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.rejectgameinvitationmessage_ != nullptr);
      _impl_.rejectgameinvitationmessage_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.rejectinvnotifymessage_ != nullptr);
      _impl_.rejectinvnotifymessage_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.statisticsmessage_ != nullptr);
      _impl_.statisticsmessage_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.chatrequestmessage_ != nullptr);
      _impl_.chatrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.chatmessage_ != nullptr);
      _impl_.chatmessage_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.chatrejectmessage_ != nullptr);
      _impl_.chatrejectmessage_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.dialogmessage_ != nullptr);
      _impl_.dialogmessage_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.timeoutwarningmessage_ != nullptr);
      _impl_.timeoutwarningmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.resettimeoutmessage_ != nullptr);
      _impl_.resettimeoutmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.reportavatarmessage_ != nullptr);
      _impl_.reportavatarmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.reportavatarackmessage_ != nullptr);
      _impl_.reportavatarackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.reportgamemessage_ != nullptr);
      _impl_.reportgamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.reportgameackmessage_ != nullptr);
      _impl_.reportgameackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.adminremovegamemessage_ != nullptr);
      _impl_.adminremovegamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.adminremovegameackmessage_ != nullptr);
      _impl_.adminremovegameackmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.adminbanplayermessage_ != nullptr);
      _impl_.adminbanplayermessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.adminbanplayerackmessage_ != nullptr);
      _impl_.adminbanplayerackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.errormessage_ != nullptr);
      _impl_.errormessage_->Clear();
    }
    _impl_.messagetype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .LobbyMessage.LobbyMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyMessage_LobbyMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::LobbyMessage_LobbyMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .InitDoneMessage initDoneMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_initdonemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AvatarRequestMessage avatarRequestMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatarrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AvatarHeaderMessage avatarHeaderMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatarheadermessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AvatarDataMessage avatarDataMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatardatamessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AvatarEndMessage avatarEndMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatarendmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .UnknownAvatarMessage unknownAvatarMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknownavatarmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerListMessage playerListMessage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerlistmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameListNewMessage gameListNewMessage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistnewmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameListUpdateMessage gameListUpdateMessage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistupdatemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistplayerjoinedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistplayerleftmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistspectatorjoinedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistspectatorleftmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistadminchangedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinforequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinforeplymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SubscriptionRequestMessage subscriptionRequestMessage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriptionrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SubscriptionReplyMessage subscriptionReplyMessage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriptionreplymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CreateGameMessage createGameMessage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_creategamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CreateGameFailedMessage createGameFailedMessage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_creategamefailedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .JoinGameMessage joinGameMessage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_joingamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RejoinGameMessage rejoinGameMessage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejoingamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .JoinGameAckMessage joinGameAckMessage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_joingameackmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .JoinGameFailedMessage joinGameFailedMessage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_joingamefailedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .InviteNotifyMessage inviteNotifyMessage = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitenotifymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectgameinvitationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectinvnotifymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StatisticsMessage statisticsMessage = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_statisticsmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ChatRequestMessage chatRequestMessage = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ChatMessage chatMessage = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ChatRejectMessage chatRejectMessage = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatrejectmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DialogMessage dialogMessage = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dialogmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TimeoutWarningMessage timeoutWarningMessage = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeoutwarningmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ResetTimeoutMessage resetTimeoutMessage = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resettimeoutmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ReportAvatarMessage reportAvatarMessage = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportavatarmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ReportAvatarAckMessage reportAvatarAckMessage = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportavatarackmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ReportGameMessage reportGameMessage = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportgamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ReportGameAckMessage reportGameAckMessage = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportgameackmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AdminRemoveGameMessage adminRemoveGameMessage = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminremovegamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminremovegameackmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AdminBanPlayerMessage adminBanPlayerMessage = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminbanplayermessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminbanplayerackmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ErrorMessage errorMessage = 1025;
      case 1025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errormessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[1];
  // required .LobbyMessage.LobbyMessageType messageType = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .InitDoneMessage initDoneMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::initdonemessage(this),
        _Internal::initdonemessage(this).GetCachedSize(), target, stream);
  }

  // optional .AvatarRequestMessage avatarRequestMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::avatarrequestmessage(this),
        _Internal::avatarrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .AvatarHeaderMessage avatarHeaderMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::avatarheadermessage(this),
        _Internal::avatarheadermessage(this).GetCachedSize(), target, stream);
  }

  // optional .AvatarDataMessage avatarDataMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::avatardatamessage(this),
        _Internal::avatardatamessage(this).GetCachedSize(), target, stream);
  }

  // optional .AvatarEndMessage avatarEndMessage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::avatarendmessage(this),
        _Internal::avatarendmessage(this).GetCachedSize(), target, stream);
  }

  // optional .UnknownAvatarMessage unknownAvatarMessage = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::unknownavatarmessage(this),
        _Internal::unknownavatarmessage(this).GetCachedSize(), target, stream);
  }

  // optional .PlayerListMessage playerListMessage = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::playerlistmessage(this),
        _Internal::playerlistmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameListNewMessage gameListNewMessage = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::gamelistnewmessage(this),
        _Internal::gamelistnewmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameListUpdateMessage gameListUpdateMessage = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::gamelistupdatemessage(this),
        _Internal::gamelistupdatemessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::gamelistplayerjoinedmessage(this),
        _Internal::gamelistplayerjoinedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::gamelistplayerleftmessage(this),
        _Internal::gamelistplayerleftmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::gamelistspectatorjoinedmessage(this),
        _Internal::gamelistspectatorjoinedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::gamelistspectatorleftmessage(this),
        _Internal::gamelistspectatorleftmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::gamelistadminchangedmessage(this),
        _Internal::gamelistadminchangedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::playerinforequestmessage(this),
        _Internal::playerinforequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::playerinforeplymessage(this),
        _Internal::playerinforeplymessage(this).GetCachedSize(), target, stream);
  }

  // optional .SubscriptionRequestMessage subscriptionRequestMessage = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::subscriptionrequestmessage(this),
        _Internal::subscriptionrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .SubscriptionReplyMessage subscriptionReplyMessage = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::subscriptionreplymessage(this),
        _Internal::subscriptionreplymessage(this).GetCachedSize(), target, stream);
  }

  // optional .CreateGameMessage createGameMessage = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::creategamemessage(this),
        _Internal::creategamemessage(this).GetCachedSize(), target, stream);
  }

  // optional .CreateGameFailedMessage createGameFailedMessage = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::creategamefailedmessage(this),
        _Internal::creategamefailedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .JoinGameMessage joinGameMessage = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::joingamemessage(this),
        _Internal::joingamemessage(this).GetCachedSize(), target, stream);
  }

  // optional .RejoinGameMessage rejoinGameMessage = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::rejoingamemessage(this),
        _Internal::rejoingamemessage(this).GetCachedSize(), target, stream);
  }

  // optional .JoinGameAckMessage joinGameAckMessage = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::joingameackmessage(this),
        _Internal::joingameackmessage(this).GetCachedSize(), target, stream);
  }

  // optional .JoinGameFailedMessage joinGameFailedMessage = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::joingamefailedmessage(this),
        _Internal::joingamefailedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .InviteNotifyMessage inviteNotifyMessage = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::invitenotifymessage(this),
        _Internal::invitenotifymessage(this).GetCachedSize(), target, stream);
  }

  // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::rejectgameinvitationmessage(this),
        _Internal::rejectgameinvitationmessage(this).GetCachedSize(), target, stream);
  }

  // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::rejectinvnotifymessage(this),
        _Internal::rejectinvnotifymessage(this).GetCachedSize(), target, stream);
  }

  // optional .StatisticsMessage statisticsMessage = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::statisticsmessage(this),
        _Internal::statisticsmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ChatRequestMessage chatRequestMessage = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::chatrequestmessage(this),
        _Internal::chatrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ChatMessage chatMessage = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::chatmessage(this),
        _Internal::chatmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ChatRejectMessage chatRejectMessage = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::chatrejectmessage(this),
        _Internal::chatrejectmessage(this).GetCachedSize(), target, stream);
  }

  // optional .DialogMessage dialogMessage = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::dialogmessage(this),
        _Internal::dialogmessage(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TimeoutWarningMessage timeoutWarningMessage = 34;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::timeoutwarningmessage(this),
        _Internal::timeoutwarningmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ResetTimeoutMessage resetTimeoutMessage = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::resettimeoutmessage(this),
        _Internal::resettimeoutmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ReportAvatarMessage reportAvatarMessage = 36;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::reportavatarmessage(this),
        _Internal::reportavatarmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ReportAvatarAckMessage reportAvatarAckMessage = 37;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::reportavatarackmessage(this),
        _Internal::reportavatarackmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ReportGameMessage reportGameMessage = 38;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::reportgamemessage(this),
        _Internal::reportgamemessage(this).GetCachedSize(), target, stream);
  }

  // optional .ReportGameAckMessage reportGameAckMessage = 39;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::reportgameackmessage(this),
        _Internal::reportgameackmessage(this).GetCachedSize(), target, stream);
  }

  // optional .AdminRemoveGameMessage adminRemoveGameMessage = 40;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::adminremovegamemessage(this),
        _Internal::adminremovegamemessage(this).GetCachedSize(), target, stream);
  }

  // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 41;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::adminremovegameackmessage(this),
        _Internal::adminremovegameackmessage(this).GetCachedSize(), target, stream);
  }

  // optional .AdminBanPlayerMessage adminBanPlayerMessage = 42;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::adminbanplayermessage(this),
        _Internal::adminbanplayermessage(this).GetCachedSize(), target, stream);
  }

  // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 43;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::adminbanplayerackmessage(this),
        _Internal::adminbanplayerackmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ErrorMessage errorMessage = 1025;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1025, _Internal::errormessage(this),
        _Internal::errormessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMessage)
  return target;
}

size_t LobbyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMessage)
  size_t total_size = 0;

  // required .LobbyMessage.LobbyMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .InitDoneMessage initDoneMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.initdonemessage_);
    }

    // optional .AvatarRequestMessage avatarRequestMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.avatarrequestmessage_);
    }

    // optional .AvatarHeaderMessage avatarHeaderMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.avatarheadermessage_);
    }

    // optional .AvatarDataMessage avatarDataMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.avatardatamessage_);
    }

    // optional .AvatarEndMessage avatarEndMessage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.avatarendmessage_);
    }

    // optional .UnknownAvatarMessage unknownAvatarMessage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unknownavatarmessage_);
    }

    // optional .PlayerListMessage playerListMessage = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playerlistmessage_);
    }

    // optional .GameListNewMessage gameListNewMessage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamelistnewmessage_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .GameListUpdateMessage gameListUpdateMessage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamelistupdatemessage_);
    }

    // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamelistplayerjoinedmessage_);
    }

    // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamelistplayerleftmessage_);
    }

    // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamelistspectatorjoinedmessage_);
    }

    // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamelistspectatorleftmessage_);
    }

    // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamelistadminchangedmessage_);
    }

    // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playerinforequestmessage_);
    }

    // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playerinforeplymessage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .SubscriptionRequestMessage subscriptionRequestMessage = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subscriptionrequestmessage_);
    }

    // optional .SubscriptionReplyMessage subscriptionReplyMessage = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subscriptionreplymessage_);
    }

    // optional .CreateGameMessage createGameMessage = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.creategamemessage_);
    }

    // optional .CreateGameFailedMessage createGameFailedMessage = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.creategamefailedmessage_);
    }

    // optional .JoinGameMessage joinGameMessage = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.joingamemessage_);
    }

    // optional .RejoinGameMessage rejoinGameMessage = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rejoingamemessage_);
    }

    // optional .JoinGameAckMessage joinGameAckMessage = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.joingameackmessage_);
    }

    // optional .JoinGameFailedMessage joinGameFailedMessage = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.joingamefailedmessage_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .InviteNotifyMessage inviteNotifyMessage = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.invitenotifymessage_);
    }

    // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rejectgameinvitationmessage_);
    }

    // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rejectinvnotifymessage_);
    }

    // optional .StatisticsMessage statisticsMessage = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.statisticsmessage_);
    }

    // optional .ChatRequestMessage chatRequestMessage = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chatrequestmessage_);
    }

    // optional .ChatMessage chatMessage = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chatmessage_);
    }

    // optional .ChatRejectMessage chatRejectMessage = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chatrejectmessage_);
    }

    // optional .DialogMessage dialogMessage = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dialogmessage_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TimeoutWarningMessage timeoutWarningMessage = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timeoutwarningmessage_);
    }

    // optional .ResetTimeoutMessage resetTimeoutMessage = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resettimeoutmessage_);
    }

    // optional .ReportAvatarMessage reportAvatarMessage = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reportavatarmessage_);
    }

    // optional .ReportAvatarAckMessage reportAvatarAckMessage = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reportavatarackmessage_);
    }

    // optional .ReportGameMessage reportGameMessage = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reportgamemessage_);
    }

    // optional .ReportGameAckMessage reportGameAckMessage = 39;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reportgameackmessage_);
    }

    // optional .AdminRemoveGameMessage adminRemoveGameMessage = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adminremovegamemessage_);
    }

    // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adminremovegameackmessage_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .AdminBanPlayerMessage adminBanPlayerMessage = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adminbanplayermessage_);
    }

    // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 43;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adminbanplayerackmessage_);
    }

    // optional .ErrorMessage errorMessage = 1025;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.errormessage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LobbyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyMessage::GetClassData() const { return &_class_data_; }


void LobbyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LobbyMessage*>(&to_msg);
  auto& from = static_cast<const LobbyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LobbyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_initdonemessage()->::InitDoneMessage::MergeFrom(
          from._internal_initdonemessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_avatarrequestmessage()->::AvatarRequestMessage::MergeFrom(
          from._internal_avatarrequestmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_avatarheadermessage()->::AvatarHeaderMessage::MergeFrom(
          from._internal_avatarheadermessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_avatardatamessage()->::AvatarDataMessage::MergeFrom(
          from._internal_avatardatamessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_avatarendmessage()->::AvatarEndMessage::MergeFrom(
          from._internal_avatarendmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_unknownavatarmessage()->::UnknownAvatarMessage::MergeFrom(
          from._internal_unknownavatarmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_playerlistmessage()->::PlayerListMessage::MergeFrom(
          from._internal_playerlistmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_gamelistnewmessage()->::GameListNewMessage::MergeFrom(
          from._internal_gamelistnewmessage());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_gamelistupdatemessage()->::GameListUpdateMessage::MergeFrom(
          from._internal_gamelistupdatemessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_gamelistplayerjoinedmessage()->::GameListPlayerJoinedMessage::MergeFrom(
          from._internal_gamelistplayerjoinedmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_gamelistplayerleftmessage()->::GameListPlayerLeftMessage::MergeFrom(
          from._internal_gamelistplayerleftmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_gamelistspectatorjoinedmessage()->::GameListSpectatorJoinedMessage::MergeFrom(
          from._internal_gamelistspectatorjoinedmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_gamelistspectatorleftmessage()->::GameListSpectatorLeftMessage::MergeFrom(
          from._internal_gamelistspectatorleftmessage());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_gamelistadminchangedmessage()->::GameListAdminChangedMessage::MergeFrom(
          from._internal_gamelistadminchangedmessage());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_playerinforequestmessage()->::PlayerInfoRequestMessage::MergeFrom(
          from._internal_playerinforequestmessage());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_playerinforeplymessage()->::PlayerInfoReplyMessage::MergeFrom(
          from._internal_playerinforeplymessage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_subscriptionrequestmessage()->::SubscriptionRequestMessage::MergeFrom(
          from._internal_subscriptionrequestmessage());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_subscriptionreplymessage()->::SubscriptionReplyMessage::MergeFrom(
          from._internal_subscriptionreplymessage());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_creategamemessage()->::CreateGameMessage::MergeFrom(
          from._internal_creategamemessage());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_creategamefailedmessage()->::CreateGameFailedMessage::MergeFrom(
          from._internal_creategamefailedmessage());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_joingamemessage()->::JoinGameMessage::MergeFrom(
          from._internal_joingamemessage());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_rejoingamemessage()->::RejoinGameMessage::MergeFrom(
          from._internal_rejoingamemessage());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_joingameackmessage()->::JoinGameAckMessage::MergeFrom(
          from._internal_joingameackmessage());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_joingamefailedmessage()->::JoinGameFailedMessage::MergeFrom(
          from._internal_joingamefailedmessage());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_invitenotifymessage()->::InviteNotifyMessage::MergeFrom(
          from._internal_invitenotifymessage());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_rejectgameinvitationmessage()->::RejectGameInvitationMessage::MergeFrom(
          from._internal_rejectgameinvitationmessage());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_rejectinvnotifymessage()->::RejectInvNotifyMessage::MergeFrom(
          from._internal_rejectinvnotifymessage());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_statisticsmessage()->::StatisticsMessage::MergeFrom(
          from._internal_statisticsmessage());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_chatrequestmessage()->::ChatRequestMessage::MergeFrom(
          from._internal_chatrequestmessage());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_chatmessage()->::ChatMessage::MergeFrom(
          from._internal_chatmessage());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_chatrejectmessage()->::ChatRejectMessage::MergeFrom(
          from._internal_chatrejectmessage());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_dialogmessage()->::DialogMessage::MergeFrom(
          from._internal_dialogmessage());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timeoutwarningmessage()->::TimeoutWarningMessage::MergeFrom(
          from._internal_timeoutwarningmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_resettimeoutmessage()->::ResetTimeoutMessage::MergeFrom(
          from._internal_resettimeoutmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_reportavatarmessage()->::ReportAvatarMessage::MergeFrom(
          from._internal_reportavatarmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_reportavatarackmessage()->::ReportAvatarAckMessage::MergeFrom(
          from._internal_reportavatarackmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_reportgamemessage()->::ReportGameMessage::MergeFrom(
          from._internal_reportgamemessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_reportgameackmessage()->::ReportGameAckMessage::MergeFrom(
          from._internal_reportgameackmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_adminremovegamemessage()->::AdminRemoveGameMessage::MergeFrom(
          from._internal_adminremovegamemessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_adminremovegameackmessage()->::AdminRemoveGameAckMessage::MergeFrom(
          from._internal_adminremovegameackmessage());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_adminbanplayermessage()->::AdminBanPlayerMessage::MergeFrom(
          from._internal_adminbanplayermessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_adminbanplayerackmessage()->::AdminBanPlayerAckMessage::MergeFrom(
          from._internal_adminbanplayerackmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_errormessage()->::ErrorMessage::MergeFrom(
          from._internal_errormessage());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyMessage::CopyFrom(const LobbyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_initdonemessage()) {
    if (!_impl_.initdonemessage_->IsInitialized()) return false;
  }
  if (_internal_has_avatarrequestmessage()) {
    if (!_impl_.avatarrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_avatarheadermessage()) {
    if (!_impl_.avatarheadermessage_->IsInitialized()) return false;
  }
  if (_internal_has_avatardatamessage()) {
    if (!_impl_.avatardatamessage_->IsInitialized()) return false;
  }
  if (_internal_has_avatarendmessage()) {
    if (!_impl_.avatarendmessage_->IsInitialized()) return false;
  }
  if (_internal_has_unknownavatarmessage()) {
    if (!_impl_.unknownavatarmessage_->IsInitialized()) return false;
  }
  if (_internal_has_playerlistmessage()) {
    if (!_impl_.playerlistmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistnewmessage()) {
    if (!_impl_.gamelistnewmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistupdatemessage()) {
    if (!_impl_.gamelistupdatemessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistplayerjoinedmessage()) {
    if (!_impl_.gamelistplayerjoinedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistplayerleftmessage()) {
    if (!_impl_.gamelistplayerleftmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistspectatorjoinedmessage()) {
    if (!_impl_.gamelistspectatorjoinedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistspectatorleftmessage()) {
    if (!_impl_.gamelistspectatorleftmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistadminchangedmessage()) {
    if (!_impl_.gamelistadminchangedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_playerinforeplymessage()) {
    if (!_impl_.playerinforeplymessage_->IsInitialized()) return false;
  }
  if (_internal_has_subscriptionrequestmessage()) {
    if (!_impl_.subscriptionrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_subscriptionreplymessage()) {
    if (!_impl_.subscriptionreplymessage_->IsInitialized()) return false;
  }
  if (_internal_has_creategamemessage()) {
    if (!_impl_.creategamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_creategamefailedmessage()) {
    if (!_impl_.creategamefailedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_joingamemessage()) {
    if (!_impl_.joingamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_rejoingamemessage()) {
    if (!_impl_.rejoingamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_joingameackmessage()) {
    if (!_impl_.joingameackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_joingamefailedmessage()) {
    if (!_impl_.joingamefailedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_invitenotifymessage()) {
    if (!_impl_.invitenotifymessage_->IsInitialized()) return false;
  }
  if (_internal_has_rejectgameinvitationmessage()) {
    if (!_impl_.rejectgameinvitationmessage_->IsInitialized()) return false;
  }
  if (_internal_has_rejectinvnotifymessage()) {
    if (!_impl_.rejectinvnotifymessage_->IsInitialized()) return false;
  }
  if (_internal_has_statisticsmessage()) {
    if (!_impl_.statisticsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatrequestmessage()) {
    if (!_impl_.chatrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatmessage()) {
    if (!_impl_.chatmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatrejectmessage()) {
    if (!_impl_.chatrejectmessage_->IsInitialized()) return false;
  }
  if (_internal_has_dialogmessage()) {
    if (!_impl_.dialogmessage_->IsInitialized()) return false;
  }
  if (_internal_has_timeoutwarningmessage()) {
    if (!_impl_.timeoutwarningmessage_->IsInitialized()) return false;
  }
  if (_internal_has_reportavatarmessage()) {
    if (!_impl_.reportavatarmessage_->IsInitialized()) return false;
  }
  if (_internal_has_reportavatarackmessage()) {
    if (!_impl_.reportavatarackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_reportgamemessage()) {
    if (!_impl_.reportgamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_reportgameackmessage()) {
    if (!_impl_.reportgameackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_adminremovegamemessage()) {
    if (!_impl_.adminremovegamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_adminremovegameackmessage()) {
    if (!_impl_.adminremovegameackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_adminbanplayermessage()) {
    if (!_impl_.adminbanplayermessage_->IsInitialized()) return false;
  }
  if (_internal_has_adminbanplayerackmessage()) {
    if (!_impl_.adminbanplayerackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_errormessage()) {
    if (!_impl_.errormessage_->IsInitialized()) return false;
  }
  return true;
}

void LobbyMessage::InternalSwap(LobbyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobbyMessage, _impl_.errormessage_)
      + sizeof(LobbyMessage::_impl_.errormessage_)
      - PROTOBUF_FIELD_OFFSET(LobbyMessage, _impl_.initdonemessage_)>(
          reinterpret_cast<char*>(&_impl_.initdonemessage_),
          reinterpret_cast<char*>(&other->_impl_.initdonemessage_));
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[93]);
}

// ===================================================================

class GameManagementMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameManagementMessage>()._impl_._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::GamePlayerJoinedMessage& gameplayerjoinedmessage(const GameManagementMessage* msg);
  static void set_has_gameplayerjoinedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GamePlayerLeftMessage& gameplayerleftmessage(const GameManagementMessage* msg);
  static void set_has_gameplayerleftmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GameSpectatorJoinedMessage& gamespectatorjoinedmessage(const GameManagementMessage* msg);
  static void set_has_gamespectatorjoinedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GameSpectatorLeftMessage& gamespectatorleftmessage(const GameManagementMessage* msg);
  static void set_has_gamespectatorleftmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::GameAdminChangedMessage& gameadminchangedmessage(const GameManagementMessage* msg);
  static void set_has_gameadminchangedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RemovedFromGameMessage& removedfromgamemessage(const GameManagementMessage* msg);
  static void set_has_removedfromgamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KickPlayerRequestMessage& kickplayerrequestmessage(const GameManagementMessage* msg);
  static void set_has_kickplayerrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::LeaveGameRequestMessage& leavegamerequestmessage(const GameManagementMessage* msg);
  static void set_has_leavegamerequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::InvitePlayerToGameMessage& inviteplayertogamemessage(const GameManagementMessage* msg);
  static void set_has_inviteplayertogamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::StartEventMessage& starteventmessage(const GameManagementMessage* msg);
  static void set_has_starteventmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::StartEventAckMessage& starteventackmessage(const GameManagementMessage* msg);
  static void set_has_starteventackmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::GameStartInitialMessage& gamestartinitialmessage(const GameManagementMessage* msg);
  static void set_has_gamestartinitialmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::GameStartRejoinMessage& gamestartrejoinmessage(const GameManagementMessage* msg);
  static void set_has_gamestartrejoinmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::EndOfGameMessage& endofgamemessage(const GameManagementMessage* msg);
  static void set_has_endofgamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::PlayerIdChangedMessage& playeridchangedmessage(const GameManagementMessage* msg);
  static void set_has_playeridchangedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::AskKickPlayerMessage& askkickplayermessage(const GameManagementMessage* msg);
  static void set_has_askkickplayermessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::AskKickDeniedMessage& askkickdeniedmessage(const GameManagementMessage* msg);
  static void set_has_askkickdeniedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::StartKickPetitionMessage& startkickpetitionmessage(const GameManagementMessage* msg);
  static void set_has_startkickpetitionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::VoteKickRequestMessage& votekickrequestmessage(const GameManagementMessage* msg);
  static void set_has_votekickrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::VoteKickReplyMessage& votekickreplymessage(const GameManagementMessage* msg);
  static void set_has_votekickreplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::KickPetitionUpdateMessage& kickpetitionupdatemessage(const GameManagementMessage* msg);
  static void set_has_kickpetitionupdatemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::EndKickPetitionMessage& endkickpetitionmessage(const GameManagementMessage* msg);
  static void set_has_endkickpetitionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::ChatRequestMessage& chatrequestmessage(const GameManagementMessage* msg);
  static void set_has_chatrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::ChatMessage& chatmessage(const GameManagementMessage* msg);
  static void set_has_chatmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::ChatRejectMessage& chatrejectmessage(const GameManagementMessage* msg);
  static void set_has_chatrejectmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TimeoutWarningMessage& timeoutwarningmessage(const GameManagementMessage* msg);
  static void set_has_timeoutwarningmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::ResetTimeoutMessage& resettimeoutmessage(const GameManagementMessage* msg);
  static void set_has_resettimeoutmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::ErrorMessage& errormessage(const GameManagementMessage* msg);
  static void set_has_errormessage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x10000000) ^ 0x10000000) != 0;
  }
};

const ::GamePlayerJoinedMessage&
GameManagementMessage::_Internal::gameplayerjoinedmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.gameplayerjoinedmessage_;
}
const ::GamePlayerLeftMessage&
GameManagementMessage::_Internal::gameplayerleftmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.gameplayerleftmessage_;
}
const ::GameSpectatorJoinedMessage&
GameManagementMessage::_Internal::gamespectatorjoinedmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.gamespectatorjoinedmessage_;
}
const ::GameSpectatorLeftMessage&
GameManagementMessage::_Internal::gamespectatorleftmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.gamespectatorleftmessage_;
}
const ::GameAdminChangedMessage&
GameManagementMessage::_Internal::gameadminchangedmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.gameadminchangedmessage_;
}
const ::RemovedFromGameMessage&
GameManagementMessage::_Internal::removedfromgamemessage(const GameManagementMessage* msg) {
  return *msg->_impl_.removedfromgamemessage_;
}
const ::KickPlayerRequestMessage&
GameManagementMessage::_Internal::kickplayerrequestmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.kickplayerrequestmessage_;
}
const ::LeaveGameRequestMessage&
GameManagementMessage::_Internal::leavegamerequestmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.leavegamerequestmessage_;
}
const ::InvitePlayerToGameMessage&
GameManagementMessage::_Internal::inviteplayertogamemessage(const GameManagementMessage* msg) {
  return *msg->_impl_.inviteplayertogamemessage_;
}
const ::StartEventMessage&
GameManagementMessage::_Internal::starteventmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.starteventmessage_;
}
const ::StartEventAckMessage&
GameManagementMessage::_Internal::starteventackmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.starteventackmessage_;
}
const ::GameStartInitialMessage&
GameManagementMessage::_Internal::gamestartinitialmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.gamestartinitialmessage_;
}
const ::GameStartRejoinMessage&
GameManagementMessage::_Internal::gamestartrejoinmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.gamestartrejoinmessage_;
}
const ::EndOfGameMessage&
GameManagementMessage::_Internal::endofgamemessage(const GameManagementMessage* msg) {
  return *msg->_impl_.endofgamemessage_;
}
const ::PlayerIdChangedMessage&
GameManagementMessage::_Internal::playeridchangedmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.playeridchangedmessage_;
}
const ::AskKickPlayerMessage&
GameManagementMessage::_Internal::askkickplayermessage(const GameManagementMessage* msg) {
  return *msg->_impl_.askkickplayermessage_;
}
const ::AskKickDeniedMessage&
GameManagementMessage::_Internal::askkickdeniedmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.askkickdeniedmessage_;
}
const ::StartKickPetitionMessage&
GameManagementMessage::_Internal::startkickpetitionmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.startkickpetitionmessage_;
}
const ::VoteKickRequestMessage&
GameManagementMessage::_Internal::votekickrequestmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.votekickrequestmessage_;
}
const ::VoteKickReplyMessage&
GameManagementMessage::_Internal::votekickreplymessage(const GameManagementMessage* msg) {
  return *msg->_impl_.votekickreplymessage_;
}
const ::KickPetitionUpdateMessage&
GameManagementMessage::_Internal::kickpetitionupdatemessage(const GameManagementMessage* msg) {
  return *msg->_impl_.kickpetitionupdatemessage_;
}
const ::EndKickPetitionMessage&
GameManagementMessage::_Internal::endkickpetitionmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.endkickpetitionmessage_;
}
const ::ChatRequestMessage&
GameManagementMessage::_Internal::chatrequestmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.chatrequestmessage_;
}
const ::ChatMessage&
GameManagementMessage::_Internal::chatmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.chatmessage_;
}
const ::ChatRejectMessage&
GameManagementMessage::_Internal::chatrejectmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.chatrejectmessage_;
}
const ::TimeoutWarningMessage&
GameManagementMessage::_Internal::timeoutwarningmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.timeoutwarningmessage_;
}
const ::ResetTimeoutMessage&
GameManagementMessage::_Internal::resettimeoutmessage(const GameManagementMessage* msg) {
  return *msg->_impl_.resettimeoutmessage_;
}
const ::ErrorMessage&
GameManagementMessage::_Internal::errormessage(const GameManagementMessage* msg) {
  return *msg->_impl_.errormessage_;
}
GameManagementMessage::GameManagementMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameManagementMessage)
}
GameManagementMessage::GameManagementMessage(const GameManagementMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameManagementMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameplayerjoinedmessage_){nullptr}
    , decltype(_impl_.gameplayerleftmessage_){nullptr}
    , decltype(_impl_.gamespectatorjoinedmessage_){nullptr}
    , decltype(_impl_.gamespectatorleftmessage_){nullptr}
    , decltype(_impl_.gameadminchangedmessage_){nullptr}
    , decltype(_impl_.removedfromgamemessage_){nullptr}
    , decltype(_impl_.kickplayerrequestmessage_){nullptr}
    , decltype(_impl_.leavegamerequestmessage_){nullptr}
    , decltype(_impl_.inviteplayertogamemessage_){nullptr}
    , decltype(_impl_.starteventmessage_){nullptr}
    , decltype(_impl_.starteventackmessage_){nullptr}
    , decltype(_impl_.gamestartinitialmessage_){nullptr}
    , decltype(_impl_.gamestartrejoinmessage_){nullptr}
    , decltype(_impl_.endofgamemessage_){nullptr}
    , decltype(_impl_.playeridchangedmessage_){nullptr}
    , decltype(_impl_.askkickplayermessage_){nullptr}
    , decltype(_impl_.askkickdeniedmessage_){nullptr}
    , decltype(_impl_.startkickpetitionmessage_){nullptr}
    , decltype(_impl_.votekickrequestmessage_){nullptr}
    , decltype(_impl_.votekickreplymessage_){nullptr}
    , decltype(_impl_.kickpetitionupdatemessage_){nullptr}
    , decltype(_impl_.endkickpetitionmessage_){nullptr}
    , decltype(_impl_.chatrequestmessage_){nullptr}
    , decltype(_impl_.chatmessage_){nullptr}
    , decltype(_impl_.chatrejectmessage_){nullptr}
    , decltype(_impl_.timeoutwarningmessage_){nullptr}
    , decltype(_impl_.resettimeoutmessage_){nullptr}
    , decltype(_impl_.errormessage_){nullptr}
    , decltype(_impl_.messagetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameplayerjoinedmessage()) {
    _this->_impl_.gameplayerjoinedmessage_ = new ::GamePlayerJoinedMessage(*from._impl_.gameplayerjoinedmessage_);
  }
  if (from._internal_has_gameplayerleftmessage()) {
    _this->_impl_.gameplayerleftmessage_ = new ::GamePlayerLeftMessage(*from._impl_.gameplayerleftmessage_);
  }
  if (from._internal_has_gamespectatorjoinedmessage()) {
    _this->_impl_.gamespectatorjoinedmessage_ = new ::GameSpectatorJoinedMessage(*from._impl_.gamespectatorjoinedmessage_);
  }
  if (from._internal_has_gamespectatorleftmessage()) {
    _this->_impl_.gamespectatorleftmessage_ = new ::GameSpectatorLeftMessage(*from._impl_.gamespectatorleftmessage_);
  }
  if (from._internal_has_gameadminchangedmessage()) {
    _this->_impl_.gameadminchangedmessage_ = new ::GameAdminChangedMessage(*from._impl_.gameadminchangedmessage_);
  }
  if (from._internal_has_removedfromgamemessage()) {
    _this->_impl_.removedfromgamemessage_ = new ::RemovedFromGameMessage(*from._impl_.removedfromgamemessage_);
  }
  if (from._internal_has_kickplayerrequestmessage()) {
    _this->_impl_.kickplayerrequestmessage_ = new ::KickPlayerRequestMessage(*from._impl_.kickplayerrequestmessage_);
  }
  if (from._internal_has_leavegamerequestmessage()) {
    _this->_impl_.leavegamerequestmessage_ = new ::LeaveGameRequestMessage(*from._impl_.leavegamerequestmessage_);
  }
  if (from._internal_has_inviteplayertogamemessage()) {
    _this->_impl_.inviteplayertogamemessage_ = new ::InvitePlayerToGameMessage(*from._impl_.inviteplayertogamemessage_);
  }
  if (from._internal_has_starteventmessage()) {
    _this->_impl_.starteventmessage_ = new ::StartEventMessage(*from._impl_.starteventmessage_);
  }
  if (from._internal_has_starteventackmessage()) {
    _this->_impl_.starteventackmessage_ = new ::StartEventAckMessage(*from._impl_.starteventackmessage_);
  }
  if (from._internal_has_gamestartinitialmessage()) {
    _this->_impl_.gamestartinitialmessage_ = new ::GameStartInitialMessage(*from._impl_.gamestartinitialmessage_);
  }
  if (from._internal_has_gamestartrejoinmessage()) {
    _this->_impl_.gamestartrejoinmessage_ = new ::GameStartRejoinMessage(*from._impl_.gamestartrejoinmessage_);
  }
  if (from._internal_has_endofgamemessage()) {
    _this->_impl_.endofgamemessage_ = new ::EndOfGameMessage(*from._impl_.endofgamemessage_);
  }
  if (from._internal_has_playeridchangedmessage()) {
    _this->_impl_.playeridchangedmessage_ = new ::PlayerIdChangedMessage(*from._impl_.playeridchangedmessage_);
  }
  if (from._internal_has_askkickplayermessage()) {
    _this->_impl_.askkickplayermessage_ = new ::AskKickPlayerMessage(*from._impl_.askkickplayermessage_);
  }
  if (from._internal_has_askkickdeniedmessage()) {
    _this->_impl_.askkickdeniedmessage_ = new ::AskKickDeniedMessage(*from._impl_.askkickdeniedmessage_);
  }
  if (from._internal_has_startkickpetitionmessage()) {
    _this->_impl_.startkickpetitionmessage_ = new ::StartKickPetitionMessage(*from._impl_.startkickpetitionmessage_);
  }
  if (from._internal_has_votekickrequestmessage()) {
    _this->_impl_.votekickrequestmessage_ = new ::VoteKickRequestMessage(*from._impl_.votekickrequestmessage_);
  }
  if (from._internal_has_votekickreplymessage()) {
    _this->_impl_.votekickreplymessage_ = new ::VoteKickReplyMessage(*from._impl_.votekickreplymessage_);
  }
  if (from._internal_has_kickpetitionupdatemessage()) {
    _this->_impl_.kickpetitionupdatemessage_ = new ::KickPetitionUpdateMessage(*from._impl_.kickpetitionupdatemessage_);
  }
  if (from._internal_has_endkickpetitionmessage()) {
    _this->_impl_.endkickpetitionmessage_ = new ::EndKickPetitionMessage(*from._impl_.endkickpetitionmessage_);
  }
  if (from._internal_has_chatrequestmessage()) {
    _this->_impl_.chatrequestmessage_ = new ::ChatRequestMessage(*from._impl_.chatrequestmessage_);
  }
  if (from._internal_has_chatmessage()) {
    _this->_impl_.chatmessage_ = new ::ChatMessage(*from._impl_.chatmessage_);
  }
  if (from._internal_has_chatrejectmessage()) {
    _this->_impl_.chatrejectmessage_ = new ::ChatRejectMessage(*from._impl_.chatrejectmessage_);
  }
  if (from._internal_has_timeoutwarningmessage()) {
    _this->_impl_.timeoutwarningmessage_ = new ::TimeoutWarningMessage(*from._impl_.timeoutwarningmessage_);
  }
  if (from._internal_has_resettimeoutmessage()) {
    _this->_impl_.resettimeoutmessage_ = new ::ResetTimeoutMessage(*from._impl_.resettimeoutmessage_);
  }
  if (from._internal_has_errormessage()) {
    _this->_impl_.errormessage_ = new ::ErrorMessage(*from._impl_.errormessage_);
  }
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:GameManagementMessage)
}

inline void GameManagementMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameplayerjoinedmessage_){nullptr}
    , decltype(_impl_.gameplayerleftmessage_){nullptr}
    , decltype(_impl_.gamespectatorjoinedmessage_){nullptr}
    , decltype(_impl_.gamespectatorleftmessage_){nullptr}
    , decltype(_impl_.gameadminchangedmessage_){nullptr}
    , decltype(_impl_.removedfromgamemessage_){nullptr}
    , decltype(_impl_.kickplayerrequestmessage_){nullptr}
    , decltype(_impl_.leavegamerequestmessage_){nullptr}
    , decltype(_impl_.inviteplayertogamemessage_){nullptr}
    , decltype(_impl_.starteventmessage_){nullptr}
    , decltype(_impl_.starteventackmessage_){nullptr}
    , decltype(_impl_.gamestartinitialmessage_){nullptr}
    , decltype(_impl_.gamestartrejoinmessage_){nullptr}
    , decltype(_impl_.endofgamemessage_){nullptr}
    , decltype(_impl_.playeridchangedmessage_){nullptr}
    , decltype(_impl_.askkickplayermessage_){nullptr}
    , decltype(_impl_.askkickdeniedmessage_){nullptr}
    , decltype(_impl_.startkickpetitionmessage_){nullptr}
    , decltype(_impl_.votekickrequestmessage_){nullptr}
    , decltype(_impl_.votekickreplymessage_){nullptr}
    , decltype(_impl_.kickpetitionupdatemessage_){nullptr}
    , decltype(_impl_.endkickpetitionmessage_){nullptr}
    , decltype(_impl_.chatrequestmessage_){nullptr}
    , decltype(_impl_.chatmessage_){nullptr}
    , decltype(_impl_.chatrejectmessage_){nullptr}
    , decltype(_impl_.timeoutwarningmessage_){nullptr}
    , decltype(_impl_.resettimeoutmessage_){nullptr}
    , decltype(_impl_.errormessage_){nullptr}
    , decltype(_impl_.messagetype_){1}
  };
}

GameManagementMessage::~GameManagementMessage() {
  // @@protoc_insertion_point(destructor:GameManagementMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameManagementMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gameplayerjoinedmessage_;
  if (this != internal_default_instance()) delete _impl_.gameplayerleftmessage_;
  if (this != internal_default_instance()) delete _impl_.gamespectatorjoinedmessage_;
  if (this != internal_default_instance()) delete _impl_.gamespectatorleftmessage_;
  if (this != internal_default_instance()) delete _impl_.gameadminchangedmessage_;
  if (this != internal_default_instance()) delete _impl_.removedfromgamemessage_;
  if (this != internal_default_instance()) delete _impl_.kickplayerrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.leavegamerequestmessage_;
  if (this != internal_default_instance()) delete _impl_.inviteplayertogamemessage_;
  if (this != internal_default_instance()) delete _impl_.starteventmessage_;
  if (this != internal_default_instance()) delete _impl_.starteventackmessage_;
  if (this != internal_default_instance()) delete _impl_.gamestartinitialmessage_;
  if (this != internal_default_instance()) delete _impl_.gamestartrejoinmessage_;
  if (this != internal_default_instance()) delete _impl_.endofgamemessage_;
  if (this != internal_default_instance()) delete _impl_.playeridchangedmessage_;
  if (this != internal_default_instance()) delete _impl_.askkickplayermessage_;
  if (this != internal_default_instance()) delete _impl_.askkickdeniedmessage_;
  if (this != internal_default_instance()) delete _impl_.startkickpetitionmessage_;
  if (this != internal_default_instance()) delete _impl_.votekickrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.votekickreplymessage_;
  if (this != internal_default_instance()) delete _impl_.kickpetitionupdatemessage_;
  if (this != internal_default_instance()) delete _impl_.endkickpetitionmessage_;
  if (this != internal_default_instance()) delete _impl_.chatrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.chatmessage_;
  if (this != internal_default_instance()) delete _impl_.chatrejectmessage_;
  if (this != internal_default_instance()) delete _impl_.timeoutwarningmessage_;
  if (this != internal_default_instance()) delete _impl_.resettimeoutmessage_;
  if (this != internal_default_instance()) delete _impl_.errormessage_;
}

void GameManagementMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameManagementMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameManagementMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.gameplayerjoinedmessage_ != nullptr);
      _impl_.gameplayerjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gameplayerleftmessage_ != nullptr);
      _impl_.gameplayerleftmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.gamespectatorjoinedmessage_ != nullptr);
      _impl_.gamespectatorjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.gamespectatorleftmessage_ != nullptr);
      _impl_.gamespectatorleftmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.gameadminchangedmessage_ != nullptr);
      _impl_.gameadminchangedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.removedfromgamemessage_ != nullptr);
      _impl_.removedfromgamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.kickplayerrequestmessage_ != nullptr);
      _impl_.kickplayerrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.leavegamerequestmessage_ != nullptr);
      _impl_.leavegamerequestmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.inviteplayertogamemessage_ != nullptr);
      _impl_.inviteplayertogamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.starteventmessage_ != nullptr);
      _impl_.starteventmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.starteventackmessage_ != nullptr);
      _impl_.starteventackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.gamestartinitialmessage_ != nullptr);
      _impl_.gamestartinitialmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.gamestartrejoinmessage_ != nullptr);
      _impl_.gamestartrejoinmessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.endofgamemessage_ != nullptr);
      _impl_.endofgamemessage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.playeridchangedmessage_ != nullptr);
      _impl_.playeridchangedmessage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.askkickplayermessage_ != nullptr);
      _impl_.askkickplayermessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.askkickdeniedmessage_ != nullptr);
      _impl_.askkickdeniedmessage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.startkickpetitionmessage_ != nullptr);
      _impl_.startkickpetitionmessage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.votekickrequestmessage_ != nullptr);
      _impl_.votekickrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.votekickreplymessage_ != nullptr);
      _impl_.votekickreplymessage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.kickpetitionupdatemessage_ != nullptr);
      _impl_.kickpetitionupdatemessage_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.endkickpetitionmessage_ != nullptr);
      _impl_.endkickpetitionmessage_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.chatrequestmessage_ != nullptr);
      _impl_.chatrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.chatmessage_ != nullptr);
      _impl_.chatmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.chatrejectmessage_ != nullptr);
      _impl_.chatrejectmessage_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.timeoutwarningmessage_ != nullptr);
      _impl_.timeoutwarningmessage_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.resettimeoutmessage_ != nullptr);
      _impl_.resettimeoutmessage_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.errormessage_ != nullptr);
      _impl_.errormessage_->Clear();
    }
    _impl_.messagetype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameManagementMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .GameManagementMessage.GameManagementMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GameManagementMessage_GameManagementMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::GameManagementMessage_GameManagementMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplayerjoinedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplayerleftmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamespectatorjoinedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamespectatorleftmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameAdminChangedMessage gameAdminChangedMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameadminchangedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RemovedFromGameMessage removedFromGameMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_removedfromgamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kickplayerrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .LeaveGameRequestMessage leaveGameRequestMessage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_leavegamerequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviteplayertogamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StartEventMessage startEventMessage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_starteventmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StartEventAckMessage startEventAckMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_starteventackmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameStartInitialMessage gameStartInitialMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestartinitialmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameStartRejoinMessage gameStartRejoinMessage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestartrejoinmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EndOfGameMessage endOfGameMessage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_endofgamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerIdChangedMessage playerIdChangedMessage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_playeridchangedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AskKickPlayerMessage askKickPlayerMessage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_askkickplayermessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AskKickDeniedMessage askKickDeniedMessage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_askkickdeniedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StartKickPetitionMessage startKickPetitionMessage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_startkickpetitionmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .VoteKickRequestMessage voteKickRequestMessage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_votekickrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .VoteKickReplyMessage voteKickReplyMessage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_votekickreplymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_kickpetitionupdatemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EndKickPetitionMessage endKickPetitionMessage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_endkickpetitionmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ChatRequestMessage chatRequestMessage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ChatMessage chatMessage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ChatRejectMessage chatRejectMessage = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatrejectmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TimeoutWarningMessage timeoutWarningMessage = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeoutwarningmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ResetTimeoutMessage resetTimeoutMessage = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_resettimeoutmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ErrorMessage errorMessage = 1025;
      case 1025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errormessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameManagementMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameManagementMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .GameManagementMessage.GameManagementMessageType messageType = 1;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gameplayerjoinedmessage(this),
        _Internal::gameplayerjoinedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gameplayerleftmessage(this),
        _Internal::gameplayerleftmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gamespectatorjoinedmessage(this),
        _Internal::gamespectatorjoinedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::gamespectatorleftmessage(this),
        _Internal::gamespectatorleftmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameAdminChangedMessage gameAdminChangedMessage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gameadminchangedmessage(this),
        _Internal::gameadminchangedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .RemovedFromGameMessage removedFromGameMessage = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::removedfromgamemessage(this),
        _Internal::removedfromgamemessage(this).GetCachedSize(), target, stream);
  }

  // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::kickplayerrequestmessage(this),
        _Internal::kickplayerrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .LeaveGameRequestMessage leaveGameRequestMessage = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::leavegamerequestmessage(this),
        _Internal::leavegamerequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::inviteplayertogamemessage(this),
        _Internal::inviteplayertogamemessage(this).GetCachedSize(), target, stream);
  }

  // optional .StartEventMessage startEventMessage = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::starteventmessage(this),
        _Internal::starteventmessage(this).GetCachedSize(), target, stream);
  }

  // optional .StartEventAckMessage startEventAckMessage = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::starteventackmessage(this),
        _Internal::starteventackmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameStartInitialMessage gameStartInitialMessage = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::gamestartinitialmessage(this),
        _Internal::gamestartinitialmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameStartRejoinMessage gameStartRejoinMessage = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::gamestartrejoinmessage(this),
        _Internal::gamestartrejoinmessage(this).GetCachedSize(), target, stream);
  }

  // optional .EndOfGameMessage endOfGameMessage = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::endofgamemessage(this),
        _Internal::endofgamemessage(this).GetCachedSize(), target, stream);
  }

  // optional .PlayerIdChangedMessage playerIdChangedMessage = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::playeridchangedmessage(this),
        _Internal::playeridchangedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .AskKickPlayerMessage askKickPlayerMessage = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::askkickplayermessage(this),
        _Internal::askkickplayermessage(this).GetCachedSize(), target, stream);
  }

  // optional .AskKickDeniedMessage askKickDeniedMessage = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::askkickdeniedmessage(this),
        _Internal::askkickdeniedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .StartKickPetitionMessage startKickPetitionMessage = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::startkickpetitionmessage(this),
        _Internal::startkickpetitionmessage(this).GetCachedSize(), target, stream);
  }

  // optional .VoteKickRequestMessage voteKickRequestMessage = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::votekickrequestmessage(this),
        _Internal::votekickrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .VoteKickReplyMessage voteKickReplyMessage = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::votekickreplymessage(this),
        _Internal::votekickreplymessage(this).GetCachedSize(), target, stream);
  }

  // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::kickpetitionupdatemessage(this),
        _Internal::kickpetitionupdatemessage(this).GetCachedSize(), target, stream);
  }

  // optional .EndKickPetitionMessage endKickPetitionMessage = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::endkickpetitionmessage(this),
        _Internal::endkickpetitionmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ChatRequestMessage chatRequestMessage = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::chatrequestmessage(this),
        _Internal::chatrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ChatMessage chatMessage = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::chatmessage(this),
        _Internal::chatmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ChatRejectMessage chatRejectMessage = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::chatrejectmessage(this),
        _Internal::chatrejectmessage(this).GetCachedSize(), target, stream);
  }

  // optional .TimeoutWarningMessage timeoutWarningMessage = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::timeoutwarningmessage(this),
        _Internal::timeoutwarningmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ResetTimeoutMessage resetTimeoutMessage = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::resettimeoutmessage(this),
        _Internal::resettimeoutmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ErrorMessage errorMessage = 1025;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1025, _Internal::errormessage(this),
        _Internal::errormessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameManagementMessage)
  return target;
}

size_t GameManagementMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameManagementMessage)
  size_t total_size = 0;

  // required .GameManagementMessage.GameManagementMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gameplayerjoinedmessage_);
    }

    // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gameplayerleftmessage_);
    }

    // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamespectatorjoinedmessage_);
    }

    // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamespectatorleftmessage_);
    }

    // optional .GameAdminChangedMessage gameAdminChangedMessage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gameadminchangedmessage_);
    }

    // optional .RemovedFromGameMessage removedFromGameMessage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.removedfromgamemessage_);
    }

    // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kickplayerrequestmessage_);
    }

    // optional .LeaveGameRequestMessage leaveGameRequestMessage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.leavegamerequestmessage_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inviteplayertogamemessage_);
    }

    // optional .StartEventMessage startEventMessage = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.starteventmessage_);
    }

    // optional .StartEventAckMessage startEventAckMessage = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.starteventackmessage_);
    }

    // optional .GameStartInitialMessage gameStartInitialMessage = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamestartinitialmessage_);
    }

    // optional .GameStartRejoinMessage gameStartRejoinMessage = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamestartrejoinmessage_);
    }

    // optional .EndOfGameMessage endOfGameMessage = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.endofgamemessage_);
    }

    // optional .PlayerIdChangedMessage playerIdChangedMessage = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playeridchangedmessage_);
    }

    // optional .AskKickPlayerMessage askKickPlayerMessage = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.askkickplayermessage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .AskKickDeniedMessage askKickDeniedMessage = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.askkickdeniedmessage_);
    }

    // optional .StartKickPetitionMessage startKickPetitionMessage = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.startkickpetitionmessage_);
    }

    // optional .VoteKickRequestMessage voteKickRequestMessage = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.votekickrequestmessage_);
    }

    // optional .VoteKickReplyMessage voteKickReplyMessage = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.votekickreplymessage_);
    }

    // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kickpetitionupdatemessage_);
    }

    // optional .EndKickPetitionMessage endKickPetitionMessage = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.endkickpetitionmessage_);
    }

    // optional .ChatRequestMessage chatRequestMessage = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chatrequestmessage_);
    }

    // optional .ChatMessage chatMessage = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chatmessage_);
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional .ChatRejectMessage chatRejectMessage = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chatrejectmessage_);
    }

    // optional .TimeoutWarningMessage timeoutWarningMessage = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timeoutwarningmessage_);
    }

    // optional .ResetTimeoutMessage resetTimeoutMessage = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resettimeoutmessage_);
    }

    // optional .ErrorMessage errorMessage = 1025;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.errormessage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameManagementMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameManagementMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameManagementMessage::GetClassData() const { return &_class_data_; }


void GameManagementMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameManagementMessage*>(&to_msg);
  auto& from = static_cast<const GameManagementMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameManagementMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_gameplayerjoinedmessage()->::GamePlayerJoinedMessage::MergeFrom(
          from._internal_gameplayerjoinedmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gameplayerleftmessage()->::GamePlayerLeftMessage::MergeFrom(
          from._internal_gameplayerleftmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_gamespectatorjoinedmessage()->::GameSpectatorJoinedMessage::MergeFrom(
          from._internal_gamespectatorjoinedmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_gamespectatorleftmessage()->::GameSpectatorLeftMessage::MergeFrom(
          from._internal_gamespectatorleftmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_gameadminchangedmessage()->::GameAdminChangedMessage::MergeFrom(
          from._internal_gameadminchangedmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_removedfromgamemessage()->::RemovedFromGameMessage::MergeFrom(
          from._internal_removedfromgamemessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_kickplayerrequestmessage()->::KickPlayerRequestMessage::MergeFrom(
          from._internal_kickplayerrequestmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_leavegamerequestmessage()->::LeaveGameRequestMessage::MergeFrom(
          from._internal_leavegamerequestmessage());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_inviteplayertogamemessage()->::InvitePlayerToGameMessage::MergeFrom(
          from._internal_inviteplayertogamemessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_starteventmessage()->::StartEventMessage::MergeFrom(
          from._internal_starteventmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_starteventackmessage()->::StartEventAckMessage::MergeFrom(
          from._internal_starteventackmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_gamestartinitialmessage()->::GameStartInitialMessage::MergeFrom(
          from._internal_gamestartinitialmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_gamestartrejoinmessage()->::GameStartRejoinMessage::MergeFrom(
          from._internal_gamestartrejoinmessage());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_endofgamemessage()->::EndOfGameMessage::MergeFrom(
          from._internal_endofgamemessage());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_playeridchangedmessage()->::PlayerIdChangedMessage::MergeFrom(
          from._internal_playeridchangedmessage());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_askkickplayermessage()->::AskKickPlayerMessage::MergeFrom(
          from._internal_askkickplayermessage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_askkickdeniedmessage()->::AskKickDeniedMessage::MergeFrom(
          from._internal_askkickdeniedmessage());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_startkickpetitionmessage()->::StartKickPetitionMessage::MergeFrom(
          from._internal_startkickpetitionmessage());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_votekickrequestmessage()->::VoteKickRequestMessage::MergeFrom(
          from._internal_votekickrequestmessage());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_votekickreplymessage()->::VoteKickReplyMessage::MergeFrom(
          from._internal_votekickreplymessage());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_kickpetitionupdatemessage()->::KickPetitionUpdateMessage::MergeFrom(
          from._internal_kickpetitionupdatemessage());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_endkickpetitionmessage()->::EndKickPetitionMessage::MergeFrom(
          from._internal_endkickpetitionmessage());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_chatrequestmessage()->::ChatRequestMessage::MergeFrom(
          from._internal_chatrequestmessage());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_chatmessage()->::ChatMessage::MergeFrom(
          from._internal_chatmessage());
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_chatrejectmessage()->::ChatRejectMessage::MergeFrom(
          from._internal_chatrejectmessage());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_timeoutwarningmessage()->::TimeoutWarningMessage::MergeFrom(
          from._internal_timeoutwarningmessage());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_resettimeoutmessage()->::ResetTimeoutMessage::MergeFrom(
          from._internal_resettimeoutmessage());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_errormessage()->::ErrorMessage::MergeFrom(
          from._internal_errormessage());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameManagementMessage::CopyFrom(const GameManagementMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameManagementMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameManagementMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_gameplayerjoinedmessage()) {
    if (!_impl_.gameplayerjoinedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gameplayerleftmessage()) {
    if (!_impl_.gameplayerleftmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamespectatorjoinedmessage()) {
    if (!_impl_.gamespectatorjoinedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamespectatorleftmessage()) {
    if (!_impl_.gamespectatorleftmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gameadminchangedmessage()) {
    if (!_impl_.gameadminchangedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_removedfromgamemessage()) {
    if (!_impl_.removedfromgamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_kickplayerrequestmessage()) {
    if (!_impl_.kickplayerrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_inviteplayertogamemessage()) {
    if (!_impl_.inviteplayertogamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_starteventmessage()) {
    if (!_impl_.starteventmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamestartinitialmessage()) {
    if (!_impl_.gamestartinitialmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamestartrejoinmessage()) {
    if (!_impl_.gamestartrejoinmessage_->IsInitialized()) return false;
  }
  if (_internal_has_endofgamemessage()) {
    if (!_impl_.endofgamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_playeridchangedmessage()) {
    if (!_impl_.playeridchangedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_askkickplayermessage()) {
    if (!_impl_.askkickplayermessage_->IsInitialized()) return false;
  }
  if (_internal_has_askkickdeniedmessage()) {
    if (!_impl_.askkickdeniedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_startkickpetitionmessage()) {
    if (!_impl_.startkickpetitionmessage_->IsInitialized()) return false;
  }
  if (_internal_has_votekickrequestmessage()) {
    if (!_impl_.votekickrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_votekickreplymessage()) {
    if (!_impl_.votekickreplymessage_->IsInitialized()) return false;
  }
  if (_internal_has_kickpetitionupdatemessage()) {
    if (!_impl_.kickpetitionupdatemessage_->IsInitialized()) return false;
  }
  if (_internal_has_endkickpetitionmessage()) {
    if (!_impl_.endkickpetitionmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatrequestmessage()) {
    if (!_impl_.chatrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatmessage()) {
    if (!_impl_.chatmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatrejectmessage()) {
    if (!_impl_.chatrejectmessage_->IsInitialized()) return false;
  }
  if (_internal_has_timeoutwarningmessage()) {
    if (!_impl_.timeoutwarningmessage_->IsInitialized()) return false;
  }
  if (_internal_has_errormessage()) {
    if (!_impl_.errormessage_->IsInitialized()) return false;
  }
  return true;
}

void GameManagementMessage::InternalSwap(GameManagementMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameManagementMessage, _impl_.errormessage_)
      + sizeof(GameManagementMessage::_impl_.errormessage_)
      - PROTOBUF_FIELD_OFFSET(GameManagementMessage, _impl_.gameplayerjoinedmessage_)>(
          reinterpret_cast<char*>(&_impl_.gameplayerjoinedmessage_),
          reinterpret_cast<char*>(&other->_impl_.gameplayerjoinedmessage_));
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameManagementMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[94]);
}

// ===================================================================

class GameEngineMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEngineMessage>()._impl_._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::HandStartMessage& handstartmessage(const GameEngineMessage* msg);
  static void set_has_handstartmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PlayersTurnMessage& playersturnmessage(const GameEngineMessage* msg);
  static void set_has_playersturnmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::MyActionRequestMessage& myactionrequestmessage(const GameEngineMessage* msg);
  static void set_has_myactionrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::YourActionRejectedMessage& youractionrejectedmessage(const GameEngineMessage* msg);
  static void set_has_youractionrejectedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PlayersActionDoneMessage& playersactiondonemessage(const GameEngineMessage* msg);
  static void set_has_playersactiondonemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::DealFlopCardsMessage& dealflopcardsmessage(const GameEngineMessage* msg);
  static void set_has_dealflopcardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::DealTurnCardMessage& dealturncardmessage(const GameEngineMessage* msg);
  static void set_has_dealturncardmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::DealRiverCardMessage& dealrivercardmessage(const GameEngineMessage* msg);
  static void set_has_dealrivercardmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::AllInShowCardsMessage& allinshowcardsmessage(const GameEngineMessage* msg);
  static void set_has_allinshowcardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::EndOfHandShowCardsMessage& endofhandshowcardsmessage(const GameEngineMessage* msg);
  static void set_has_endofhandshowcardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::EndOfHandHideCardsMessage& endofhandhidecardsmessage(const GameEngineMessage* msg);
  static void set_has_endofhandhidecardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ShowMyCardsRequestMessage& showmycardsrequestmessage(const GameEngineMessage* msg);
  static void set_has_showmycardsrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::AfterHandShowCardsMessage& afterhandshowcardsmessage(const GameEngineMessage* msg);
  static void set_has_afterhandshowcardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00002000) ^ 0x00002000) != 0;
  }
};

const ::HandStartMessage&
GameEngineMessage::_Internal::handstartmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.handstartmessage_;
}
const ::PlayersTurnMessage&
GameEngineMessage::_Internal::playersturnmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.playersturnmessage_;
}
const ::MyActionRequestMessage&
GameEngineMessage::_Internal::myactionrequestmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.myactionrequestmessage_;
}
const ::YourActionRejectedMessage&
GameEngineMessage::_Internal::youractionrejectedmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.youractionrejectedmessage_;
}
const ::PlayersActionDoneMessage&
GameEngineMessage::_Internal::playersactiondonemessage(const GameEngineMessage* msg) {
  return *msg->_impl_.playersactiondonemessage_;
}
const ::DealFlopCardsMessage&
GameEngineMessage::_Internal::dealflopcardsmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.dealflopcardsmessage_;
}
const ::DealTurnCardMessage&
GameEngineMessage::_Internal::dealturncardmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.dealturncardmessage_;
}
const ::DealRiverCardMessage&
GameEngineMessage::_Internal::dealrivercardmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.dealrivercardmessage_;
}
const ::AllInShowCardsMessage&
GameEngineMessage::_Internal::allinshowcardsmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.allinshowcardsmessage_;
}
const ::EndOfHandShowCardsMessage&
GameEngineMessage::_Internal::endofhandshowcardsmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.endofhandshowcardsmessage_;
}
const ::EndOfHandHideCardsMessage&
GameEngineMessage::_Internal::endofhandhidecardsmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.endofhandhidecardsmessage_;
}
const ::ShowMyCardsRequestMessage&
GameEngineMessage::_Internal::showmycardsrequestmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.showmycardsrequestmessage_;
}
const ::AfterHandShowCardsMessage&
GameEngineMessage::_Internal::afterhandshowcardsmessage(const GameEngineMessage* msg) {
  return *msg->_impl_.afterhandshowcardsmessage_;
}
GameEngineMessage::GameEngineMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEngineMessage)
}
GameEngineMessage::GameEngineMessage(const GameEngineMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEngineMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handstartmessage_){nullptr}
    , decltype(_impl_.playersturnmessage_){nullptr}
    , decltype(_impl_.myactionrequestmessage_){nullptr}
    , decltype(_impl_.youractionrejectedmessage_){nullptr}
    , decltype(_impl_.playersactiondonemessage_){nullptr}
    , decltype(_impl_.dealflopcardsmessage_){nullptr}
    , decltype(_impl_.dealturncardmessage_){nullptr}
    , decltype(_impl_.dealrivercardmessage_){nullptr}
    , decltype(_impl_.allinshowcardsmessage_){nullptr}
    , decltype(_impl_.endofhandshowcardsmessage_){nullptr}
    , decltype(_impl_.endofhandhidecardsmessage_){nullptr}
    , decltype(_impl_.showmycardsrequestmessage_){nullptr}
    , decltype(_impl_.afterhandshowcardsmessage_){nullptr}
    , decltype(_impl_.messagetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handstartmessage()) {
    _this->_impl_.handstartmessage_ = new ::HandStartMessage(*from._impl_.handstartmessage_);
  }
  if (from._internal_has_playersturnmessage()) {
    _this->_impl_.playersturnmessage_ = new ::PlayersTurnMessage(*from._impl_.playersturnmessage_);
  }
  if (from._internal_has_myactionrequestmessage()) {
    _this->_impl_.myactionrequestmessage_ = new ::MyActionRequestMessage(*from._impl_.myactionrequestmessage_);
  }
  if (from._internal_has_youractionrejectedmessage()) {
    _this->_impl_.youractionrejectedmessage_ = new ::YourActionRejectedMessage(*from._impl_.youractionrejectedmessage_);
  }
  if (from._internal_has_playersactiondonemessage()) {
    _this->_impl_.playersactiondonemessage_ = new ::PlayersActionDoneMessage(*from._impl_.playersactiondonemessage_);
  }
  if (from._internal_has_dealflopcardsmessage()) {
    _this->_impl_.dealflopcardsmessage_ = new ::DealFlopCardsMessage(*from._impl_.dealflopcardsmessage_);
  }
  if (from._internal_has_dealturncardmessage()) {
    _this->_impl_.dealturncardmessage_ = new ::DealTurnCardMessage(*from._impl_.dealturncardmessage_);
  }
  if (from._internal_has_dealrivercardmessage()) {
    _this->_impl_.dealrivercardmessage_ = new ::DealRiverCardMessage(*from._impl_.dealrivercardmessage_);
  }
  if (from._internal_has_allinshowcardsmessage()) {
    _this->_impl_.allinshowcardsmessage_ = new ::AllInShowCardsMessage(*from._impl_.allinshowcardsmessage_);
  }
  if (from._internal_has_endofhandshowcardsmessage()) {
    _this->_impl_.endofhandshowcardsmessage_ = new ::EndOfHandShowCardsMessage(*from._impl_.endofhandshowcardsmessage_);
  }
  if (from._internal_has_endofhandhidecardsmessage()) {
    _this->_impl_.endofhandhidecardsmessage_ = new ::EndOfHandHideCardsMessage(*from._impl_.endofhandhidecardsmessage_);
  }
  if (from._internal_has_showmycardsrequestmessage()) {
    _this->_impl_.showmycardsrequestmessage_ = new ::ShowMyCardsRequestMessage(*from._impl_.showmycardsrequestmessage_);
  }
  if (from._internal_has_afterhandshowcardsmessage()) {
    _this->_impl_.afterhandshowcardsmessage_ = new ::AfterHandShowCardsMessage(*from._impl_.afterhandshowcardsmessage_);
  }
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:GameEngineMessage)
}

inline void GameEngineMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handstartmessage_){nullptr}
    , decltype(_impl_.playersturnmessage_){nullptr}
    , decltype(_impl_.myactionrequestmessage_){nullptr}
    , decltype(_impl_.youractionrejectedmessage_){nullptr}
    , decltype(_impl_.playersactiondonemessage_){nullptr}
    , decltype(_impl_.dealflopcardsmessage_){nullptr}
    , decltype(_impl_.dealturncardmessage_){nullptr}
    , decltype(_impl_.dealrivercardmessage_){nullptr}
    , decltype(_impl_.allinshowcardsmessage_){nullptr}
    , decltype(_impl_.endofhandshowcardsmessage_){nullptr}
    , decltype(_impl_.endofhandhidecardsmessage_){nullptr}
    , decltype(_impl_.showmycardsrequestmessage_){nullptr}
    , decltype(_impl_.afterhandshowcardsmessage_){nullptr}
    , decltype(_impl_.messagetype_){1}
  };
}

GameEngineMessage::~GameEngineMessage() {
  // @@protoc_insertion_point(destructor:GameEngineMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEngineMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.handstartmessage_;
  if (this != internal_default_instance()) delete _impl_.playersturnmessage_;
  if (this != internal_default_instance()) delete _impl_.myactionrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.youractionrejectedmessage_;
  if (this != internal_default_instance()) delete _impl_.playersactiondonemessage_;
  if (this != internal_default_instance()) delete _impl_.dealflopcardsmessage_;
  if (this != internal_default_instance()) delete _impl_.dealturncardmessage_;
  if (this != internal_default_instance()) delete _impl_.dealrivercardmessage_;
  if (this != internal_default_instance()) delete _impl_.allinshowcardsmessage_;
  if (this != internal_default_instance()) delete _impl_.endofhandshowcardsmessage_;
  if (this != internal_default_instance()) delete _impl_.endofhandhidecardsmessage_;
  if (this != internal_default_instance()) delete _impl_.showmycardsrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.afterhandshowcardsmessage_;
}

void GameEngineMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEngineMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEngineMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.handstartmessage_ != nullptr);
      _impl_.handstartmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.playersturnmessage_ != nullptr);
      _impl_.playersturnmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.myactionrequestmessage_ != nullptr);
      _impl_.myactionrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.youractionrejectedmessage_ != nullptr);
      _impl_.youractionrejectedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.playersactiondonemessage_ != nullptr);
      _impl_.playersactiondonemessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.dealflopcardsmessage_ != nullptr);
      _impl_.dealflopcardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.dealturncardmessage_ != nullptr);
      _impl_.dealturncardmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.dealrivercardmessage_ != nullptr);
      _impl_.dealrivercardmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.allinshowcardsmessage_ != nullptr);
      _impl_.allinshowcardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.endofhandshowcardsmessage_ != nullptr);
      _impl_.endofhandshowcardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.endofhandhidecardsmessage_ != nullptr);
      _impl_.endofhandhidecardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.showmycardsrequestmessage_ != nullptr);
      _impl_.showmycardsrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.afterhandshowcardsmessage_ != nullptr);
      _impl_.afterhandshowcardsmessage_->Clear();
    }
    _impl_.messagetype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEngineMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .GameEngineMessage.GameEngineMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GameEngineMessage_GameEngineMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::GameEngineMessage_GameEngineMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .HandStartMessage handStartMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_handstartmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayersTurnMessage playersTurnMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_playersturnmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MyActionRequestMessage myActionRequestMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_myactionrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .YourActionRejectedMessage yourActionRejectedMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_youractionrejectedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayersActionDoneMessage playersActionDoneMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_playersactiondonemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DealFlopCardsMessage dealFlopCardsMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dealflopcardsmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DealTurnCardMessage dealTurnCardMessage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dealturncardmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DealRiverCardMessage dealRiverCardMessage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dealrivercardmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AllInShowCardsMessage allInShowCardsMessage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_allinshowcardsmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_endofhandshowcardsmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_endofhandhidecardsmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_showmycardsrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_afterhandshowcardsmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEngineMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEngineMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .GameEngineMessage.GameEngineMessageType messageType = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .HandStartMessage handStartMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::handstartmessage(this),
        _Internal::handstartmessage(this).GetCachedSize(), target, stream);
  }

  // optional .PlayersTurnMessage playersTurnMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::playersturnmessage(this),
        _Internal::playersturnmessage(this).GetCachedSize(), target, stream);
  }

  // optional .MyActionRequestMessage myActionRequestMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::myactionrequestmessage(this),
        _Internal::myactionrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .YourActionRejectedMessage yourActionRejectedMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::youractionrejectedmessage(this),
        _Internal::youractionrejectedmessage(this).GetCachedSize(), target, stream);
  }

  // optional .PlayersActionDoneMessage playersActionDoneMessage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::playersactiondonemessage(this),
        _Internal::playersactiondonemessage(this).GetCachedSize(), target, stream);
  }

  // optional .DealFlopCardsMessage dealFlopCardsMessage = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::dealflopcardsmessage(this),
        _Internal::dealflopcardsmessage(this).GetCachedSize(), target, stream);
  }

  // optional .DealTurnCardMessage dealTurnCardMessage = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::dealturncardmessage(this),
        _Internal::dealturncardmessage(this).GetCachedSize(), target, stream);
  }

  // optional .DealRiverCardMessage dealRiverCardMessage = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dealrivercardmessage(this),
        _Internal::dealrivercardmessage(this).GetCachedSize(), target, stream);
  }

  // optional .AllInShowCardsMessage allInShowCardsMessage = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::allinshowcardsmessage(this),
        _Internal::allinshowcardsmessage(this).GetCachedSize(), target, stream);
  }

  // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::endofhandshowcardsmessage(this),
        _Internal::endofhandshowcardsmessage(this).GetCachedSize(), target, stream);
  }

  // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::endofhandhidecardsmessage(this),
        _Internal::endofhandhidecardsmessage(this).GetCachedSize(), target, stream);
  }

  // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::showmycardsrequestmessage(this),
        _Internal::showmycardsrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::afterhandshowcardsmessage(this),
        _Internal::afterhandshowcardsmessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEngineMessage)
  return target;
}

size_t GameEngineMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEngineMessage)
  size_t total_size = 0;

  // required .GameEngineMessage.GameEngineMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .HandStartMessage handStartMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.handstartmessage_);
    }

    // optional .PlayersTurnMessage playersTurnMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playersturnmessage_);
    }

    // optional .MyActionRequestMessage myActionRequestMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.myactionrequestmessage_);
    }

    // optional .YourActionRejectedMessage yourActionRejectedMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.youractionrejectedmessage_);
    }

    // optional .PlayersActionDoneMessage playersActionDoneMessage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playersactiondonemessage_);
    }

    // optional .DealFlopCardsMessage dealFlopCardsMessage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dealflopcardsmessage_);
    }

    // optional .DealTurnCardMessage dealTurnCardMessage = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dealturncardmessage_);
    }

    // optional .DealRiverCardMessage dealRiverCardMessage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dealrivercardmessage_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .AllInShowCardsMessage allInShowCardsMessage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.allinshowcardsmessage_);
    }

    // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.endofhandshowcardsmessage_);
    }

    // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.endofhandhidecardsmessage_);
    }

    // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.showmycardsrequestmessage_);
    }

    // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.afterhandshowcardsmessage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEngineMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEngineMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEngineMessage::GetClassData() const { return &_class_data_; }


void GameEngineMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEngineMessage*>(&to_msg);
  auto& from = static_cast<const GameEngineMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEngineMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_handstartmessage()->::HandStartMessage::MergeFrom(
          from._internal_handstartmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_playersturnmessage()->::PlayersTurnMessage::MergeFrom(
          from._internal_playersturnmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_myactionrequestmessage()->::MyActionRequestMessage::MergeFrom(
          from._internal_myactionrequestmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_youractionrejectedmessage()->::YourActionRejectedMessage::MergeFrom(
          from._internal_youractionrejectedmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_playersactiondonemessage()->::PlayersActionDoneMessage::MergeFrom(
          from._internal_playersactiondonemessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dealflopcardsmessage()->::DealFlopCardsMessage::MergeFrom(
          from._internal_dealflopcardsmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_dealturncardmessage()->::DealTurnCardMessage::MergeFrom(
          from._internal_dealturncardmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_dealrivercardmessage()->::DealRiverCardMessage::MergeFrom(
          from._internal_dealrivercardmessage());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_allinshowcardsmessage()->::AllInShowCardsMessage::MergeFrom(
          from._internal_allinshowcardsmessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_endofhandshowcardsmessage()->::EndOfHandShowCardsMessage::MergeFrom(
          from._internal_endofhandshowcardsmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_endofhandhidecardsmessage()->::EndOfHandHideCardsMessage::MergeFrom(
          from._internal_endofhandhidecardsmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_showmycardsrequestmessage()->::ShowMyCardsRequestMessage::MergeFrom(
          from._internal_showmycardsrequestmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_afterhandshowcardsmessage()->::AfterHandShowCardsMessage::MergeFrom(
          from._internal_afterhandshowcardsmessage());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEngineMessage::CopyFrom(const GameEngineMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEngineMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEngineMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_handstartmessage()) {
    if (!_impl_.handstartmessage_->IsInitialized()) return false;
  }
  if (_internal_has_playersturnmessage()) {
    if (!_impl_.playersturnmessage_->IsInitialized()) return false;
  }
  if (_internal_has_myactionrequestmessage()) {
    if (!_impl_.myactionrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_youractionrejectedmessage()) {
    if (!_impl_.youractionrejectedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_playersactiondonemessage()) {
    if (!_impl_.playersactiondonemessage_->IsInitialized()) return false;
  }
  if (_internal_has_dealflopcardsmessage()) {
    if (!_impl_.dealflopcardsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_dealturncardmessage()) {
    if (!_impl_.dealturncardmessage_->IsInitialized()) return false;
  }
  if (_internal_has_dealrivercardmessage()) {
    if (!_impl_.dealrivercardmessage_->IsInitialized()) return false;
  }
  if (_internal_has_allinshowcardsmessage()) {
    if (!_impl_.allinshowcardsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_endofhandshowcardsmessage()) {
    if (!_impl_.endofhandshowcardsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_endofhandhidecardsmessage()) {
    if (!_impl_.endofhandhidecardsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_afterhandshowcardsmessage()) {
    if (!_impl_.afterhandshowcardsmessage_->IsInitialized()) return false;
  }
  return true;
}

void GameEngineMessage::InternalSwap(GameEngineMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEngineMessage, _impl_.afterhandshowcardsmessage_)
      + sizeof(GameEngineMessage::_impl_.afterhandshowcardsmessage_)
      - PROTOBUF_FIELD_OFFSET(GameEngineMessage, _impl_.handstartmessage_)>(
          reinterpret_cast<char*>(&_impl_.handstartmessage_),
          reinterpret_cast<char*>(&other->_impl_.handstartmessage_));
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEngineMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[95]);
}

// ===================================================================

class GameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMessage>()._impl_._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GameManagementMessage& gamemanagementmessage(const GameMessage* msg);
  static void set_has_gamemanagementmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GameEngineMessage& gameenginemessage(const GameMessage* msg);
  static void set_has_gameenginemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::GameManagementMessage&
GameMessage::_Internal::gamemanagementmessage(const GameMessage* msg) {
  return *msg->_impl_.gamemanagementmessage_;
}
const ::GameEngineMessage&
GameMessage::_Internal::gameenginemessage(const GameMessage* msg) {
  return *msg->_impl_.gameenginemessage_;
}
GameMessage::GameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameMessage)
}
GameMessage::GameMessage(const GameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gamemanagementmessage_){nullptr}
    , decltype(_impl_.gameenginemessage_){nullptr}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.messagetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gamemanagementmessage()) {
    _this->_impl_.gamemanagementmessage_ = new ::GameManagementMessage(*from._impl_.gamemanagementmessage_);
  }
  if (from._internal_has_gameenginemessage()) {
    _this->_impl_.gameenginemessage_ = new ::GameEngineMessage(*from._impl_.gameenginemessage_);
  }
  ::memcpy(&_impl_.gameid_, &from._impl_.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.messagetype_) -
    reinterpret_cast<char*>(&_impl_.gameid_)) + sizeof(_impl_.messagetype_));
  // @@protoc_insertion_point(copy_constructor:GameMessage)
}

inline void GameMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gamemanagementmessage_){nullptr}
    , decltype(_impl_.gameenginemessage_){nullptr}
    , decltype(_impl_.gameid_){0u}
    , decltype(_impl_.messagetype_){1}
  };
}

GameMessage::~GameMessage() {
  // @@protoc_insertion_point(destructor:GameMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gamemanagementmessage_;
  if (this != internal_default_instance()) delete _impl_.gameenginemessage_;
}

void GameMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.gamemanagementmessage_ != nullptr);
      _impl_.gamemanagementmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gameenginemessage_ != nullptr);
      _impl_.gameenginemessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    _impl_.gameid_ = 0u;
    _impl_.messagetype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .GameMessage.GameMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GameMessage_GameMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::GameMessage_GameMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 gameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gameid(&has_bits);
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameManagementMessage gameManagementMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamemanagementmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameEngineMessage gameEngineMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameenginemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .GameMessage.GameMessageType messageType = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // required uint32 gameId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameid(), target);
  }

  // optional .GameManagementMessage gameManagementMessage = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gamemanagementmessage(this),
        _Internal::gamemanagementmessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameEngineMessage gameEngineMessage = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gameenginemessage(this),
        _Internal::gameenginemessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage)
  return target;
}

size_t GameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (_internal_has_messagetype()) {
    // required .GameMessage.GameMessageType messageType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return total_size;
}
size_t GameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 gameId = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());

    // required .GameMessage.GameMessageType messageType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .GameManagementMessage gameManagementMessage = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamemanagementmessage_);
    }

    // optional .GameEngineMessage gameEngineMessage = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gameenginemessage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameMessage::GetClassData() const { return &_class_data_; }


void GameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameMessage*>(&to_msg);
  auto& from = static_cast<const GameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_gamemanagementmessage()->::GameManagementMessage::MergeFrom(
          from._internal_gamemanagementmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gameenginemessage()->::GameEngineMessage::MergeFrom(
          from._internal_gameenginemessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameMessage::CopyFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_gamemanagementmessage()) {
    if (!_impl_.gamemanagementmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gameenginemessage()) {
    if (!_impl_.gameenginemessage_->IsInitialized()) return false;
  }
  return true;
}

void GameMessage::InternalSwap(GameMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.gameid_)
      + sizeof(GameMessage::_impl_.gameid_)
      - PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.gamemanagementmessage_)>(
          reinterpret_cast<char*>(&_impl_.gamemanagementmessage_),
          reinterpret_cast<char*>(&other->_impl_.gamemanagementmessage_));
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[96]);
}

// ===================================================================

class PokerTHMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PokerTHMessage>()._impl_._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::AnnounceMessage& announcemessage(const PokerTHMessage* msg);
  static void set_has_announcemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AuthMessage& authmessage(const PokerTHMessage* msg);
  static void set_has_authmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::LobbyMessage& lobbymessage(const PokerTHMessage* msg);
  static void set_has_lobbymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GameMessage& gamemessage(const PokerTHMessage* msg);
  static void set_has_gamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::AnnounceMessage&
PokerTHMessage::_Internal::announcemessage(const PokerTHMessage* msg) {
  return *msg->_impl_.announcemessage_;
}
const ::AuthMessage&
PokerTHMessage::_Internal::authmessage(const PokerTHMessage* msg) {
  return *msg->_impl_.authmessage_;
}
const ::LobbyMessage&
PokerTHMessage::_Internal::lobbymessage(const PokerTHMessage* msg) {
  return *msg->_impl_.lobbymessage_;
}
const ::GameMessage&
PokerTHMessage::_Internal::gamemessage(const PokerTHMessage* msg) {
  return *msg->_impl_.gamemessage_;
}
PokerTHMessage::PokerTHMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PokerTHMessage)
}
PokerTHMessage::PokerTHMessage(const PokerTHMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PokerTHMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.announcemessage_){nullptr}
    , decltype(_impl_.authmessage_){nullptr}
    , decltype(_impl_.lobbymessage_){nullptr}
    , decltype(_impl_.gamemessage_){nullptr}
    , decltype(_impl_.messagetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_announcemessage()) {
    _this->_impl_.announcemessage_ = new ::AnnounceMessage(*from._impl_.announcemessage_);
  }
  if (from._internal_has_authmessage()) {
    _this->_impl_.authmessage_ = new ::AuthMessage(*from._impl_.authmessage_);
  }
  if (from._internal_has_lobbymessage()) {
    _this->_impl_.lobbymessage_ = new ::LobbyMessage(*from._impl_.lobbymessage_);
  }
  if (from._internal_has_gamemessage()) {
    _this->_impl_.gamemessage_ = new ::GameMessage(*from._impl_.gamemessage_);
  }
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:PokerTHMessage)
}

inline void PokerTHMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.announcemessage_){nullptr}
    , decltype(_impl_.authmessage_){nullptr}
    , decltype(_impl_.lobbymessage_){nullptr}
    , decltype(_impl_.gamemessage_){nullptr}
    , decltype(_impl_.messagetype_){1}
  };
}

PokerTHMessage::~PokerTHMessage() {
  // @@protoc_insertion_point(destructor:PokerTHMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PokerTHMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.announcemessage_;
  if (this != internal_default_instance()) delete _impl_.authmessage_;
  if (this != internal_default_instance()) delete _impl_.lobbymessage_;
  if (this != internal_default_instance()) delete _impl_.gamemessage_;
}

void PokerTHMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PokerTHMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PokerTHMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.announcemessage_ != nullptr);
      _impl_.announcemessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.authmessage_ != nullptr);
      _impl_.authmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.lobbymessage_ != nullptr);
      _impl_.lobbymessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.gamemessage_ != nullptr);
      _impl_.gamemessage_->Clear();
    }
    _impl_.messagetype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PokerTHMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PokerTHMessage.PokerTHMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PokerTHMessage_PokerTHMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::PokerTHMessage_PokerTHMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .AnnounceMessage announceMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_announcemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AuthMessage authMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_authmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .LobbyMessage lobbyMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobbymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameMessage gameMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PokerTHMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PokerTHMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .AnnounceMessage announceMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::announcemessage(this),
        _Internal::announcemessage(this).GetCachedSize(), target, stream);
  }

  // optional .AuthMessage authMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::authmessage(this),
        _Internal::authmessage(this).GetCachedSize(), target, stream);
  }

  // optional .LobbyMessage lobbyMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lobbymessage(this),
        _Internal::lobbymessage(this).GetCachedSize(), target, stream);
  }

  // optional .GameMessage gameMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::gamemessage(this),
        _Internal::gamemessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PokerTHMessage)
  return target;
}

size_t PokerTHMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PokerTHMessage)
  size_t total_size = 0;

  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .AnnounceMessage announceMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.announcemessage_);
    }

    // optional .AuthMessage authMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.authmessage_);
    }

    // optional .LobbyMessage lobbyMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lobbymessage_);
    }

    // optional .GameMessage gameMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamemessage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PokerTHMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PokerTHMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PokerTHMessage::GetClassData() const { return &_class_data_; }


void PokerTHMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PokerTHMessage*>(&to_msg);
  auto& from = static_cast<const PokerTHMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PokerTHMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_announcemessage()->::AnnounceMessage::MergeFrom(
          from._internal_announcemessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_authmessage()->::AuthMessage::MergeFrom(
          from._internal_authmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_lobbymessage()->::LobbyMessage::MergeFrom(
          from._internal_lobbymessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_gamemessage()->::GameMessage::MergeFrom(
          from._internal_gamemessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PokerTHMessage::CopyFrom(const PokerTHMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PokerTHMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerTHMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_announcemessage()) {
    if (!_impl_.announcemessage_->IsInitialized()) return false;
  }
  if (_internal_has_authmessage()) {
    if (!_impl_.authmessage_->IsInitialized()) return false;
  }
  if (_internal_has_lobbymessage()) {
    if (!_impl_.lobbymessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamemessage()) {
    if (!_impl_.gamemessage_->IsInitialized()) return false;
  }
  return true;
}

void PokerTHMessage::InternalSwap(PokerTHMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PokerTHMessage, _impl_.gamemessage_)
      + sizeof(PokerTHMessage::_impl_.gamemessage_)
      - PROTOBUF_FIELD_OFFSET(PokerTHMessage, _impl_.announcemessage_)>(
          reinterpret_cast<char*>(&_impl_.announcemessage_),
          reinterpret_cast<char*>(&other->_impl_.announcemessage_));
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PokerTHMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pokerth_2eproto_getter, &descriptor_table_pokerth_2eproto_once,
      file_level_metadata_pokerth_2eproto[97]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetGameInfo*
Arena::CreateMaybeMessage< ::NetGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerResult*
Arena::CreateMaybeMessage< ::PlayerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::AnnounceMessage_Version*
Arena::CreateMaybeMessage< ::AnnounceMessage_Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnnounceMessage_Version >(arena);
}
template<> PROTOBUF_NOINLINE ::AnnounceMessage*
Arena::CreateMaybeMessage< ::AnnounceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnnounceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthClientRequestMessage*
Arena::CreateMaybeMessage< ::AuthClientRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthClientRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthServerChallengeMessage*
Arena::CreateMaybeMessage< ::AuthServerChallengeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthServerChallengeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthClientResponseMessage*
Arena::CreateMaybeMessage< ::AuthClientResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthClientResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthServerVerificationMessage*
Arena::CreateMaybeMessage< ::AuthServerVerificationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthServerVerificationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InitDoneMessage*
Arena::CreateMaybeMessage< ::InitDoneMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InitDoneMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarRequestMessage*
Arena::CreateMaybeMessage< ::AvatarRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AvatarRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarHeaderMessage*
Arena::CreateMaybeMessage< ::AvatarHeaderMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AvatarHeaderMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarDataMessage*
Arena::CreateMaybeMessage< ::AvatarDataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AvatarDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarEndMessage*
Arena::CreateMaybeMessage< ::AvatarEndMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AvatarEndMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::UnknownAvatarMessage*
Arena::CreateMaybeMessage< ::UnknownAvatarMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnknownAvatarMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerListMessage*
Arena::CreateMaybeMessage< ::PlayerListMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerListMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListNewMessage*
Arena::CreateMaybeMessage< ::GameListNewMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListNewMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListUpdateMessage*
Arena::CreateMaybeMessage< ::GameListUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListPlayerJoinedMessage*
Arena::CreateMaybeMessage< ::GameListPlayerJoinedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListPlayerJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListPlayerLeftMessage*
Arena::CreateMaybeMessage< ::GameListPlayerLeftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListPlayerLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListSpectatorJoinedMessage*
Arena::CreateMaybeMessage< ::GameListSpectatorJoinedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListSpectatorJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListSpectatorLeftMessage*
Arena::CreateMaybeMessage< ::GameListSpectatorLeftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListSpectatorLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListAdminChangedMessage*
Arena::CreateMaybeMessage< ::GameListAdminChangedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListAdminChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoRequestMessage*
Arena::CreateMaybeMessage< ::PlayerInfoRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfoRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData*
Arena::CreateMaybeMessage< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoReplyMessage_PlayerInfoData*
Arena::CreateMaybeMessage< ::PlayerInfoReplyMessage_PlayerInfoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfoReplyMessage_PlayerInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoReplyMessage*
Arena::CreateMaybeMessage< ::PlayerInfoReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfoReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SubscriptionRequestMessage*
Arena::CreateMaybeMessage< ::SubscriptionRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubscriptionRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SubscriptionReplyMessage*
Arena::CreateMaybeMessage< ::SubscriptionReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubscriptionReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateGameMessage*
Arena::CreateMaybeMessage< ::CreateGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateGameFailedMessage*
Arena::CreateMaybeMessage< ::CreateGameFailedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateGameFailedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinGameMessage*
Arena::CreateMaybeMessage< ::JoinGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JoinGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RejoinGameMessage*
Arena::CreateMaybeMessage< ::RejoinGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RejoinGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinGameAckMessage*
Arena::CreateMaybeMessage< ::JoinGameAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JoinGameAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinGameFailedMessage*
Arena::CreateMaybeMessage< ::JoinGameFailedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JoinGameFailedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerJoinedMessage*
Arena::CreateMaybeMessage< ::GamePlayerJoinedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerLeftMessage*
Arena::CreateMaybeMessage< ::GamePlayerLeftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameSpectatorJoinedMessage*
Arena::CreateMaybeMessage< ::GameSpectatorJoinedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameSpectatorJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameSpectatorLeftMessage*
Arena::CreateMaybeMessage< ::GameSpectatorLeftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameSpectatorLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameAdminChangedMessage*
Arena::CreateMaybeMessage< ::GameAdminChangedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameAdminChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RemovedFromGameMessage*
Arena::CreateMaybeMessage< ::RemovedFromGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemovedFromGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::KickPlayerRequestMessage*
Arena::CreateMaybeMessage< ::KickPlayerRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KickPlayerRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::LeaveGameRequestMessage*
Arena::CreateMaybeMessage< ::LeaveGameRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LeaveGameRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InvitePlayerToGameMessage*
Arena::CreateMaybeMessage< ::InvitePlayerToGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InvitePlayerToGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InviteNotifyMessage*
Arena::CreateMaybeMessage< ::InviteNotifyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InviteNotifyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RejectGameInvitationMessage*
Arena::CreateMaybeMessage< ::RejectGameInvitationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RejectGameInvitationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RejectInvNotifyMessage*
Arena::CreateMaybeMessage< ::RejectInvNotifyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RejectInvNotifyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StartEventMessage*
Arena::CreateMaybeMessage< ::StartEventMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartEventMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StartEventAckMessage*
Arena::CreateMaybeMessage< ::StartEventAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartEventAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartInitialMessage*
Arena::CreateMaybeMessage< ::GameStartInitialMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameStartInitialMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartRejoinMessage_RejoinPlayerData*
Arena::CreateMaybeMessage< ::GameStartRejoinMessage_RejoinPlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameStartRejoinMessage_RejoinPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartRejoinMessage*
Arena::CreateMaybeMessage< ::GameStartRejoinMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameStartRejoinMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::HandStartMessage_PlainCards*
Arena::CreateMaybeMessage< ::HandStartMessage_PlainCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HandStartMessage_PlainCards >(arena);
}
template<> PROTOBUF_NOINLINE ::HandStartMessage*
Arena::CreateMaybeMessage< ::HandStartMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HandStartMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayersTurnMessage*
Arena::CreateMaybeMessage< ::PlayersTurnMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayersTurnMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MyActionRequestMessage*
Arena::CreateMaybeMessage< ::MyActionRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyActionRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::YourActionRejectedMessage*
Arena::CreateMaybeMessage< ::YourActionRejectedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YourActionRejectedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayersActionDoneMessage*
Arena::CreateMaybeMessage< ::PlayersActionDoneMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayersActionDoneMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DealFlopCardsMessage*
Arena::CreateMaybeMessage< ::DealFlopCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DealFlopCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DealTurnCardMessage*
Arena::CreateMaybeMessage< ::DealTurnCardMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DealTurnCardMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DealRiverCardMessage*
Arena::CreateMaybeMessage< ::DealRiverCardMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DealRiverCardMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AllInShowCardsMessage_PlayerAllIn*
Arena::CreateMaybeMessage< ::AllInShowCardsMessage_PlayerAllIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AllInShowCardsMessage_PlayerAllIn >(arena);
}
template<> PROTOBUF_NOINLINE ::AllInShowCardsMessage*
Arena::CreateMaybeMessage< ::AllInShowCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AllInShowCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndOfHandShowCardsMessage*
Arena::CreateMaybeMessage< ::EndOfHandShowCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EndOfHandShowCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndOfHandHideCardsMessage*
Arena::CreateMaybeMessage< ::EndOfHandHideCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EndOfHandHideCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ShowMyCardsRequestMessage*
Arena::CreateMaybeMessage< ::ShowMyCardsRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShowMyCardsRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AfterHandShowCardsMessage*
Arena::CreateMaybeMessage< ::AfterHandShowCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AfterHandShowCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndOfGameMessage*
Arena::CreateMaybeMessage< ::EndOfGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EndOfGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerIdChangedMessage*
Arena::CreateMaybeMessage< ::PlayerIdChangedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerIdChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AskKickPlayerMessage*
Arena::CreateMaybeMessage< ::AskKickPlayerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AskKickPlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AskKickDeniedMessage*
Arena::CreateMaybeMessage< ::AskKickDeniedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AskKickDeniedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StartKickPetitionMessage*
Arena::CreateMaybeMessage< ::StartKickPetitionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartKickPetitionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::VoteKickRequestMessage*
Arena::CreateMaybeMessage< ::VoteKickRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VoteKickRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::VoteKickReplyMessage*
Arena::CreateMaybeMessage< ::VoteKickReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VoteKickReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::KickPetitionUpdateMessage*
Arena::CreateMaybeMessage< ::KickPetitionUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KickPetitionUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndKickPetitionMessage*
Arena::CreateMaybeMessage< ::EndKickPetitionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EndKickPetitionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StatisticsMessage_StatisticsData*
Arena::CreateMaybeMessage< ::StatisticsMessage_StatisticsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatisticsMessage_StatisticsData >(arena);
}
template<> PROTOBUF_NOINLINE ::StatisticsMessage*
Arena::CreateMaybeMessage< ::StatisticsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatisticsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRequestMessage*
Arena::CreateMaybeMessage< ::ChatRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessage*
Arena::CreateMaybeMessage< ::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRejectMessage*
Arena::CreateMaybeMessage< ::ChatRejectMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRejectMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DialogMessage*
Arena::CreateMaybeMessage< ::DialogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DialogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TimeoutWarningMessage*
Arena::CreateMaybeMessage< ::TimeoutWarningMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TimeoutWarningMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ResetTimeoutMessage*
Arena::CreateMaybeMessage< ::ResetTimeoutMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResetTimeoutMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportAvatarMessage*
Arena::CreateMaybeMessage< ::ReportAvatarMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportAvatarMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportAvatarAckMessage*
Arena::CreateMaybeMessage< ::ReportAvatarAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportAvatarAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportGameMessage*
Arena::CreateMaybeMessage< ::ReportGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportGameAckMessage*
Arena::CreateMaybeMessage< ::ReportGameAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportGameAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ErrorMessage*
Arena::CreateMaybeMessage< ::ErrorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ErrorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminRemoveGameMessage*
Arena::CreateMaybeMessage< ::AdminRemoveGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminRemoveGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminRemoveGameAckMessage*
Arena::CreateMaybeMessage< ::AdminRemoveGameAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminRemoveGameAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminBanPlayerMessage*
Arena::CreateMaybeMessage< ::AdminBanPlayerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminBanPlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminBanPlayerAckMessage*
Arena::CreateMaybeMessage< ::AdminBanPlayerAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminBanPlayerAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthMessage*
Arena::CreateMaybeMessage< ::AuthMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMessage*
Arena::CreateMaybeMessage< ::LobbyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LobbyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameManagementMessage*
Arena::CreateMaybeMessage< ::GameManagementMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameManagementMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEngineMessage*
Arena::CreateMaybeMessage< ::GameEngineMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEngineMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMessage*
Arena::CreateMaybeMessage< ::GameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PokerTHMessage*
Arena::CreateMaybeMessage< ::PokerTHMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PokerTHMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
