// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pokerth.proto

#include "pokerth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminBanPlayerAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminBanPlayerMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminRemoveGameAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminRemoveGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfterHandShowCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllInShowCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnnounceMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnnounceMessage_Version_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AskKickDeniedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AskKickPlayerMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthClientRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthClientResponseMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AuthMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthServerChallengeMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthServerVerificationMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarDataMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarEndMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarHeaderMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatRejectMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateGameFailedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealFlopCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealRiverCardMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealTurnCardMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DialogMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndKickPetitionMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndOfGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndOfHandHideCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndOfHandShowCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAdminChangedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_GameEngineMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListAdminChangedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameListNewMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListPlayerJoinedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListPlayerLeftMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListSpectatorJoinedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListSpectatorLeftMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListUpdateMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_GameManagementMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlayerJoinedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlayerLeftMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameSpectatorJoinedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameSpectatorLeftMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStartInitialMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStartRejoinMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HandStartMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HandStartMessage_PlainCards_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitDoneMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InviteNotifyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvitePlayerToGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinGameAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinGameFailedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KickPetitionUpdateMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KickPlayerRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveGameRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<43> scc_info_LobbyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyActionRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetGameInfo_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerIdChangedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInfoReplyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfoRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerListMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerResult_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayersActionDoneMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayersTurnMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RejectGameInvitationMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RejectInvNotifyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RejoinGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovedFromGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportAvatarAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportAvatarMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportGameAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetTimeoutMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowMyCardsRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartEventAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartEventMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartKickPetitionMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatisticsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatisticsMessage_StatisticsData_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionReplyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeoutWarningMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownAvatarMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteKickReplyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteKickRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YourActionRejectedMessage_pokerth_2eproto;
class NetGameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetGameInfo> _instance;
} _NetGameInfo_default_instance_;
class PlayerResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerResult> _instance;
} _PlayerResult_default_instance_;
class AnnounceMessage_VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnnounceMessage_Version> _instance;
} _AnnounceMessage_Version_default_instance_;
class AnnounceMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnnounceMessage> _instance;
} _AnnounceMessage_default_instance_;
class AuthClientRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthClientRequestMessage> _instance;
} _AuthClientRequestMessage_default_instance_;
class AuthServerChallengeMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthServerChallengeMessage> _instance;
} _AuthServerChallengeMessage_default_instance_;
class AuthClientResponseMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthClientResponseMessage> _instance;
} _AuthClientResponseMessage_default_instance_;
class AuthServerVerificationMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthServerVerificationMessage> _instance;
} _AuthServerVerificationMessage_default_instance_;
class InitDoneMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitDoneMessage> _instance;
} _InitDoneMessage_default_instance_;
class AvatarRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvatarRequestMessage> _instance;
} _AvatarRequestMessage_default_instance_;
class AvatarHeaderMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvatarHeaderMessage> _instance;
} _AvatarHeaderMessage_default_instance_;
class AvatarDataMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvatarDataMessage> _instance;
} _AvatarDataMessage_default_instance_;
class AvatarEndMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvatarEndMessage> _instance;
} _AvatarEndMessage_default_instance_;
class UnknownAvatarMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnknownAvatarMessage> _instance;
} _UnknownAvatarMessage_default_instance_;
class PlayerListMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerListMessage> _instance;
} _PlayerListMessage_default_instance_;
class GameListNewMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameListNewMessage> _instance;
} _GameListNewMessage_default_instance_;
class GameListUpdateMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameListUpdateMessage> _instance;
} _GameListUpdateMessage_default_instance_;
class GameListPlayerJoinedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameListPlayerJoinedMessage> _instance;
} _GameListPlayerJoinedMessage_default_instance_;
class GameListPlayerLeftMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameListPlayerLeftMessage> _instance;
} _GameListPlayerLeftMessage_default_instance_;
class GameListSpectatorJoinedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameListSpectatorJoinedMessage> _instance;
} _GameListSpectatorJoinedMessage_default_instance_;
class GameListSpectatorLeftMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameListSpectatorLeftMessage> _instance;
} _GameListSpectatorLeftMessage_default_instance_;
class GameListAdminChangedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameListAdminChangedMessage> _instance;
} _GameListAdminChangedMessage_default_instance_;
class PlayerInfoRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfoRequestMessage> _instance;
} _PlayerInfoRequestMessage_default_instance_;
class PlayerInfoReplyMessage_PlayerInfoData_AvatarDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfoReplyMessage_PlayerInfoData_AvatarData> _instance;
} _PlayerInfoReplyMessage_PlayerInfoData_AvatarData_default_instance_;
class PlayerInfoReplyMessage_PlayerInfoDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfoReplyMessage_PlayerInfoData> _instance;
} _PlayerInfoReplyMessage_PlayerInfoData_default_instance_;
class PlayerInfoReplyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfoReplyMessage> _instance;
} _PlayerInfoReplyMessage_default_instance_;
class SubscriptionRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionRequestMessage> _instance;
} _SubscriptionRequestMessage_default_instance_;
class SubscriptionReplyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionReplyMessage> _instance;
} _SubscriptionReplyMessage_default_instance_;
class CreateGameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateGameMessage> _instance;
} _CreateGameMessage_default_instance_;
class CreateGameFailedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateGameFailedMessage> _instance;
} _CreateGameFailedMessage_default_instance_;
class JoinGameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinGameMessage> _instance;
} _JoinGameMessage_default_instance_;
class RejoinGameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RejoinGameMessage> _instance;
} _RejoinGameMessage_default_instance_;
class JoinGameAckMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinGameAckMessage> _instance;
} _JoinGameAckMessage_default_instance_;
class JoinGameFailedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinGameFailedMessage> _instance;
} _JoinGameFailedMessage_default_instance_;
class GamePlayerJoinedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePlayerJoinedMessage> _instance;
} _GamePlayerJoinedMessage_default_instance_;
class GamePlayerLeftMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePlayerLeftMessage> _instance;
} _GamePlayerLeftMessage_default_instance_;
class GameSpectatorJoinedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSpectatorJoinedMessage> _instance;
} _GameSpectatorJoinedMessage_default_instance_;
class GameSpectatorLeftMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSpectatorLeftMessage> _instance;
} _GameSpectatorLeftMessage_default_instance_;
class GameAdminChangedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAdminChangedMessage> _instance;
} _GameAdminChangedMessage_default_instance_;
class RemovedFromGameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovedFromGameMessage> _instance;
} _RemovedFromGameMessage_default_instance_;
class KickPlayerRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickPlayerRequestMessage> _instance;
} _KickPlayerRequestMessage_default_instance_;
class LeaveGameRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveGameRequestMessage> _instance;
} _LeaveGameRequestMessage_default_instance_;
class InvitePlayerToGameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvitePlayerToGameMessage> _instance;
} _InvitePlayerToGameMessage_default_instance_;
class InviteNotifyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InviteNotifyMessage> _instance;
} _InviteNotifyMessage_default_instance_;
class RejectGameInvitationMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RejectGameInvitationMessage> _instance;
} _RejectGameInvitationMessage_default_instance_;
class RejectInvNotifyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RejectInvNotifyMessage> _instance;
} _RejectInvNotifyMessage_default_instance_;
class StartEventMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartEventMessage> _instance;
} _StartEventMessage_default_instance_;
class StartEventAckMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartEventAckMessage> _instance;
} _StartEventAckMessage_default_instance_;
class GameStartInitialMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStartInitialMessage> _instance;
} _GameStartInitialMessage_default_instance_;
class GameStartRejoinMessage_RejoinPlayerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStartRejoinMessage_RejoinPlayerData> _instance;
} _GameStartRejoinMessage_RejoinPlayerData_default_instance_;
class GameStartRejoinMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStartRejoinMessage> _instance;
} _GameStartRejoinMessage_default_instance_;
class HandStartMessage_PlainCardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandStartMessage_PlainCards> _instance;
} _HandStartMessage_PlainCards_default_instance_;
class HandStartMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandStartMessage> _instance;
} _HandStartMessage_default_instance_;
class PlayersTurnMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayersTurnMessage> _instance;
} _PlayersTurnMessage_default_instance_;
class MyActionRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyActionRequestMessage> _instance;
} _MyActionRequestMessage_default_instance_;
class YourActionRejectedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<YourActionRejectedMessage> _instance;
} _YourActionRejectedMessage_default_instance_;
class PlayersActionDoneMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayersActionDoneMessage> _instance;
} _PlayersActionDoneMessage_default_instance_;
class DealFlopCardsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DealFlopCardsMessage> _instance;
} _DealFlopCardsMessage_default_instance_;
class DealTurnCardMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DealTurnCardMessage> _instance;
} _DealTurnCardMessage_default_instance_;
class DealRiverCardMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DealRiverCardMessage> _instance;
} _DealRiverCardMessage_default_instance_;
class AllInShowCardsMessage_PlayerAllInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllInShowCardsMessage_PlayerAllIn> _instance;
} _AllInShowCardsMessage_PlayerAllIn_default_instance_;
class AllInShowCardsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllInShowCardsMessage> _instance;
} _AllInShowCardsMessage_default_instance_;
class EndOfHandShowCardsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndOfHandShowCardsMessage> _instance;
} _EndOfHandShowCardsMessage_default_instance_;
class EndOfHandHideCardsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndOfHandHideCardsMessage> _instance;
} _EndOfHandHideCardsMessage_default_instance_;
class ShowMyCardsRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowMyCardsRequestMessage> _instance;
} _ShowMyCardsRequestMessage_default_instance_;
class AfterHandShowCardsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AfterHandShowCardsMessage> _instance;
} _AfterHandShowCardsMessage_default_instance_;
class EndOfGameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndOfGameMessage> _instance;
} _EndOfGameMessage_default_instance_;
class PlayerIdChangedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerIdChangedMessage> _instance;
} _PlayerIdChangedMessage_default_instance_;
class AskKickPlayerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AskKickPlayerMessage> _instance;
} _AskKickPlayerMessage_default_instance_;
class AskKickDeniedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AskKickDeniedMessage> _instance;
} _AskKickDeniedMessage_default_instance_;
class StartKickPetitionMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartKickPetitionMessage> _instance;
} _StartKickPetitionMessage_default_instance_;
class VoteKickRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteKickRequestMessage> _instance;
} _VoteKickRequestMessage_default_instance_;
class VoteKickReplyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteKickReplyMessage> _instance;
} _VoteKickReplyMessage_default_instance_;
class KickPetitionUpdateMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickPetitionUpdateMessage> _instance;
} _KickPetitionUpdateMessage_default_instance_;
class EndKickPetitionMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndKickPetitionMessage> _instance;
} _EndKickPetitionMessage_default_instance_;
class StatisticsMessage_StatisticsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatisticsMessage_StatisticsData> _instance;
} _StatisticsMessage_StatisticsData_default_instance_;
class StatisticsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatisticsMessage> _instance;
} _StatisticsMessage_default_instance_;
class ChatRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatRequestMessage> _instance;
} _ChatRequestMessage_default_instance_;
class ChatMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMessage> _instance;
} _ChatMessage_default_instance_;
class ChatRejectMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatRejectMessage> _instance;
} _ChatRejectMessage_default_instance_;
class DialogMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DialogMessage> _instance;
} _DialogMessage_default_instance_;
class TimeoutWarningMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeoutWarningMessage> _instance;
} _TimeoutWarningMessage_default_instance_;
class ResetTimeoutMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetTimeoutMessage> _instance;
} _ResetTimeoutMessage_default_instance_;
class ReportAvatarMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportAvatarMessage> _instance;
} _ReportAvatarMessage_default_instance_;
class ReportAvatarAckMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportAvatarAckMessage> _instance;
} _ReportAvatarAckMessage_default_instance_;
class ReportGameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportGameMessage> _instance;
} _ReportGameMessage_default_instance_;
class ReportGameAckMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportGameAckMessage> _instance;
} _ReportGameAckMessage_default_instance_;
class ErrorMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorMessage> _instance;
} _ErrorMessage_default_instance_;
class AdminRemoveGameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminRemoveGameMessage> _instance;
} _AdminRemoveGameMessage_default_instance_;
class AdminRemoveGameAckMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminRemoveGameAckMessage> _instance;
} _AdminRemoveGameAckMessage_default_instance_;
class AdminBanPlayerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminBanPlayerMessage> _instance;
} _AdminBanPlayerMessage_default_instance_;
class AdminBanPlayerAckMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminBanPlayerAckMessage> _instance;
} _AdminBanPlayerAckMessage_default_instance_;
class AuthMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthMessage> _instance;
} _AuthMessage_default_instance_;
class LobbyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LobbyMessage> _instance;
} _LobbyMessage_default_instance_;
class GameManagementMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameManagementMessage> _instance;
} _GameManagementMessage_default_instance_;
class GameEngineMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEngineMessage> _instance;
} _GameEngineMessage_default_instance_;
class GameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage> _instance;
} _GameMessage_default_instance_;
class PokerTHMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PokerTHMessage> _instance;
} _PokerTHMessage_default_instance_;
static void InitDefaultsscc_info_AdminBanPlayerAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdminBanPlayerAckMessage_default_instance_;
    new (ptr) ::AdminBanPlayerAckMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdminBanPlayerAckMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminBanPlayerAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminBanPlayerAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AdminBanPlayerMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdminBanPlayerMessage_default_instance_;
    new (ptr) ::AdminBanPlayerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdminBanPlayerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminBanPlayerMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminBanPlayerMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AdminRemoveGameAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdminRemoveGameAckMessage_default_instance_;
    new (ptr) ::AdminRemoveGameAckMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdminRemoveGameAckMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminRemoveGameAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminRemoveGameAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AdminRemoveGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdminRemoveGameMessage_default_instance_;
    new (ptr) ::AdminRemoveGameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdminRemoveGameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminRemoveGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminRemoveGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AfterHandShowCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AfterHandShowCardsMessage_default_instance_;
    new (ptr) ::AfterHandShowCardsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AfterHandShowCardsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfterHandShowCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AfterHandShowCardsMessage_pokerth_2eproto}, {
      &scc_info_PlayerResult_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_AllInShowCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AllInShowCardsMessage_default_instance_;
    new (ptr) ::AllInShowCardsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AllInShowCardsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllInShowCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllInShowCardsMessage_pokerth_2eproto}, {
      &scc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AllInShowCardsMessage_PlayerAllIn_default_instance_;
    new (ptr) ::AllInShowCardsMessage_PlayerAllIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AllInShowCardsMessage_PlayerAllIn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AnnounceMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnnounceMessage_default_instance_;
    new (ptr) ::AnnounceMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnnounceMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnnounceMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnnounceMessage_pokerth_2eproto}, {
      &scc_info_AnnounceMessage_Version_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_AnnounceMessage_Version_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnnounceMessage_Version_default_instance_;
    new (ptr) ::AnnounceMessage_Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnnounceMessage_Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnnounceMessage_Version_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnnounceMessage_Version_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AskKickDeniedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AskKickDeniedMessage_default_instance_;
    new (ptr) ::AskKickDeniedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AskKickDeniedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AskKickDeniedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AskKickDeniedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AskKickPlayerMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AskKickPlayerMessage_default_instance_;
    new (ptr) ::AskKickPlayerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AskKickPlayerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AskKickPlayerMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AskKickPlayerMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AuthClientRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthClientRequestMessage_default_instance_;
    new (ptr) ::AuthClientRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthClientRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthClientRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthClientRequestMessage_pokerth_2eproto}, {
      &scc_info_AnnounceMessage_Version_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_AuthClientResponseMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthClientResponseMessage_default_instance_;
    new (ptr) ::AuthClientResponseMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthClientResponseMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthClientResponseMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthClientResponseMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AuthMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthMessage_default_instance_;
    new (ptr) ::AuthMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AuthMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_AuthMessage_pokerth_2eproto}, {
      &scc_info_AuthClientRequestMessage_pokerth_2eproto.base,
      &scc_info_AuthServerChallengeMessage_pokerth_2eproto.base,
      &scc_info_AuthClientResponseMessage_pokerth_2eproto.base,
      &scc_info_AuthServerVerificationMessage_pokerth_2eproto.base,
      &scc_info_ErrorMessage_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_AuthServerChallengeMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthServerChallengeMessage_default_instance_;
    new (ptr) ::AuthServerChallengeMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthServerChallengeMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthServerChallengeMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthServerChallengeMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AuthServerVerificationMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthServerVerificationMessage_default_instance_;
    new (ptr) ::AuthServerVerificationMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthServerVerificationMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthServerVerificationMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthServerVerificationMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AvatarDataMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvatarDataMessage_default_instance_;
    new (ptr) ::AvatarDataMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvatarDataMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarDataMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvatarDataMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AvatarEndMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvatarEndMessage_default_instance_;
    new (ptr) ::AvatarEndMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvatarEndMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarEndMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvatarEndMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AvatarHeaderMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvatarHeaderMessage_default_instance_;
    new (ptr) ::AvatarHeaderMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvatarHeaderMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarHeaderMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvatarHeaderMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_AvatarRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvatarRequestMessage_default_instance_;
    new (ptr) ::AvatarRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvatarRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvatarRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_ChatMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatMessage_default_instance_;
    new (ptr) ::ChatMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_ChatRejectMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatRejectMessage_default_instance_;
    new (ptr) ::ChatRejectMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatRejectMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatRejectMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatRejectMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_ChatRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatRequestMessage_default_instance_;
    new (ptr) ::ChatRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_CreateGameFailedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CreateGameFailedMessage_default_instance_;
    new (ptr) ::CreateGameFailedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CreateGameFailedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateGameFailedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateGameFailedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_CreateGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CreateGameMessage_default_instance_;
    new (ptr) ::CreateGameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CreateGameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateGameMessage_pokerth_2eproto}, {
      &scc_info_NetGameInfo_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_DealFlopCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DealFlopCardsMessage_default_instance_;
    new (ptr) ::DealFlopCardsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DealFlopCardsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealFlopCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DealFlopCardsMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_DealRiverCardMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DealRiverCardMessage_default_instance_;
    new (ptr) ::DealRiverCardMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DealRiverCardMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealRiverCardMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DealRiverCardMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_DealTurnCardMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DealTurnCardMessage_default_instance_;
    new (ptr) ::DealTurnCardMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DealTurnCardMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealTurnCardMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DealTurnCardMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_DialogMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DialogMessage_default_instance_;
    new (ptr) ::DialogMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DialogMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DialogMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DialogMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_EndKickPetitionMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndKickPetitionMessage_default_instance_;
    new (ptr) ::EndKickPetitionMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndKickPetitionMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndKickPetitionMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndKickPetitionMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_EndOfGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndOfGameMessage_default_instance_;
    new (ptr) ::EndOfGameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndOfGameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndOfGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndOfGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_EndOfHandHideCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndOfHandHideCardsMessage_default_instance_;
    new (ptr) ::EndOfHandHideCardsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndOfHandHideCardsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndOfHandHideCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndOfHandHideCardsMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_EndOfHandShowCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndOfHandShowCardsMessage_default_instance_;
    new (ptr) ::EndOfHandShowCardsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndOfHandShowCardsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndOfHandShowCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EndOfHandShowCardsMessage_pokerth_2eproto}, {
      &scc_info_PlayerResult_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_ErrorMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ErrorMessage_default_instance_;
    new (ptr) ::ErrorMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ErrorMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameAdminChangedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameAdminChangedMessage_default_instance_;
    new (ptr) ::GameAdminChangedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameAdminChangedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAdminChangedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameAdminChangedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameEngineMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameEngineMessage_default_instance_;
    new (ptr) ::GameEngineMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameEngineMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_GameEngineMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_GameEngineMessage_pokerth_2eproto}, {
      &scc_info_HandStartMessage_pokerth_2eproto.base,
      &scc_info_PlayersTurnMessage_pokerth_2eproto.base,
      &scc_info_MyActionRequestMessage_pokerth_2eproto.base,
      &scc_info_YourActionRejectedMessage_pokerth_2eproto.base,
      &scc_info_PlayersActionDoneMessage_pokerth_2eproto.base,
      &scc_info_DealFlopCardsMessage_pokerth_2eproto.base,
      &scc_info_DealTurnCardMessage_pokerth_2eproto.base,
      &scc_info_DealRiverCardMessage_pokerth_2eproto.base,
      &scc_info_AllInShowCardsMessage_pokerth_2eproto.base,
      &scc_info_EndOfHandShowCardsMessage_pokerth_2eproto.base,
      &scc_info_EndOfHandHideCardsMessage_pokerth_2eproto.base,
      &scc_info_ShowMyCardsRequestMessage_pokerth_2eproto.base,
      &scc_info_AfterHandShowCardsMessage_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_GameListAdminChangedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListAdminChangedMessage_default_instance_;
    new (ptr) ::GameListAdminChangedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListAdminChangedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListAdminChangedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameListAdminChangedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameListNewMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListNewMessage_default_instance_;
    new (ptr) ::GameListNewMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListNewMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameListNewMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameListNewMessage_pokerth_2eproto}, {
      &scc_info_NetGameInfo_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_GameListPlayerJoinedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListPlayerJoinedMessage_default_instance_;
    new (ptr) ::GameListPlayerJoinedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListPlayerJoinedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListPlayerJoinedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameListPlayerJoinedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameListPlayerLeftMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListPlayerLeftMessage_default_instance_;
    new (ptr) ::GameListPlayerLeftMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListPlayerLeftMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListPlayerLeftMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameListPlayerLeftMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameListSpectatorJoinedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListSpectatorJoinedMessage_default_instance_;
    new (ptr) ::GameListSpectatorJoinedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListSpectatorJoinedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListSpectatorJoinedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameListSpectatorJoinedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameListSpectatorLeftMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListSpectatorLeftMessage_default_instance_;
    new (ptr) ::GameListSpectatorLeftMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListSpectatorLeftMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListSpectatorLeftMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameListSpectatorLeftMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameListUpdateMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListUpdateMessage_default_instance_;
    new (ptr) ::GameListUpdateMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListUpdateMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameListUpdateMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameListUpdateMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameManagementMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameManagementMessage_default_instance_;
    new (ptr) ::GameManagementMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameManagementMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_GameManagementMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 28, 0, InitDefaultsscc_info_GameManagementMessage_pokerth_2eproto}, {
      &scc_info_GamePlayerJoinedMessage_pokerth_2eproto.base,
      &scc_info_GamePlayerLeftMessage_pokerth_2eproto.base,
      &scc_info_GameSpectatorJoinedMessage_pokerth_2eproto.base,
      &scc_info_GameSpectatorLeftMessage_pokerth_2eproto.base,
      &scc_info_GameAdminChangedMessage_pokerth_2eproto.base,
      &scc_info_RemovedFromGameMessage_pokerth_2eproto.base,
      &scc_info_KickPlayerRequestMessage_pokerth_2eproto.base,
      &scc_info_LeaveGameRequestMessage_pokerth_2eproto.base,
      &scc_info_InvitePlayerToGameMessage_pokerth_2eproto.base,
      &scc_info_StartEventMessage_pokerth_2eproto.base,
      &scc_info_StartEventAckMessage_pokerth_2eproto.base,
      &scc_info_GameStartInitialMessage_pokerth_2eproto.base,
      &scc_info_GameStartRejoinMessage_pokerth_2eproto.base,
      &scc_info_EndOfGameMessage_pokerth_2eproto.base,
      &scc_info_PlayerIdChangedMessage_pokerth_2eproto.base,
      &scc_info_AskKickPlayerMessage_pokerth_2eproto.base,
      &scc_info_AskKickDeniedMessage_pokerth_2eproto.base,
      &scc_info_StartKickPetitionMessage_pokerth_2eproto.base,
      &scc_info_VoteKickRequestMessage_pokerth_2eproto.base,
      &scc_info_VoteKickReplyMessage_pokerth_2eproto.base,
      &scc_info_KickPetitionUpdateMessage_pokerth_2eproto.base,
      &scc_info_EndKickPetitionMessage_pokerth_2eproto.base,
      &scc_info_ChatRequestMessage_pokerth_2eproto.base,
      &scc_info_ChatMessage_pokerth_2eproto.base,
      &scc_info_ChatRejectMessage_pokerth_2eproto.base,
      &scc_info_TimeoutWarningMessage_pokerth_2eproto.base,
      &scc_info_ResetTimeoutMessage_pokerth_2eproto.base,
      &scc_info_ErrorMessage_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_GameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameMessage_default_instance_;
    new (ptr) ::GameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameMessage_pokerth_2eproto}, {
      &scc_info_GameManagementMessage_pokerth_2eproto.base,
      &scc_info_GameEngineMessage_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_GamePlayerJoinedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GamePlayerJoinedMessage_default_instance_;
    new (ptr) ::GamePlayerJoinedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GamePlayerJoinedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlayerJoinedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GamePlayerJoinedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GamePlayerLeftMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GamePlayerLeftMessage_default_instance_;
    new (ptr) ::GamePlayerLeftMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GamePlayerLeftMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlayerLeftMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GamePlayerLeftMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameSpectatorJoinedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameSpectatorJoinedMessage_default_instance_;
    new (ptr) ::GameSpectatorJoinedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpectatorJoinedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameSpectatorJoinedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameSpectatorJoinedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameSpectatorLeftMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameSpectatorLeftMessage_default_instance_;
    new (ptr) ::GameSpectatorLeftMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpectatorLeftMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameSpectatorLeftMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameSpectatorLeftMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameStartInitialMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameStartInitialMessage_default_instance_;
    new (ptr) ::GameStartInitialMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameStartInitialMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStartInitialMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameStartInitialMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_GameStartRejoinMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameStartRejoinMessage_default_instance_;
    new (ptr) ::GameStartRejoinMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameStartRejoinMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStartRejoinMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameStartRejoinMessage_pokerth_2eproto}, {
      &scc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameStartRejoinMessage_RejoinPlayerData_default_instance_;
    new (ptr) ::GameStartRejoinMessage_RejoinPlayerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameStartRejoinMessage_RejoinPlayerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_HandStartMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HandStartMessage_default_instance_;
    new (ptr) ::HandStartMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HandStartMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HandStartMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HandStartMessage_pokerth_2eproto}, {
      &scc_info_HandStartMessage_PlainCards_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_HandStartMessage_PlainCards_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HandStartMessage_PlainCards_default_instance_;
    new (ptr) ::HandStartMessage_PlainCards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HandStartMessage_PlainCards::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HandStartMessage_PlainCards_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HandStartMessage_PlainCards_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_InitDoneMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InitDoneMessage_default_instance_;
    new (ptr) ::InitDoneMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InitDoneMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitDoneMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitDoneMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_InviteNotifyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InviteNotifyMessage_default_instance_;
    new (ptr) ::InviteNotifyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InviteNotifyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InviteNotifyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InviteNotifyMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_InvitePlayerToGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InvitePlayerToGameMessage_default_instance_;
    new (ptr) ::InvitePlayerToGameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InvitePlayerToGameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvitePlayerToGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvitePlayerToGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_JoinGameAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JoinGameAckMessage_default_instance_;
    new (ptr) ::JoinGameAckMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JoinGameAckMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinGameAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JoinGameAckMessage_pokerth_2eproto}, {
      &scc_info_NetGameInfo_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_JoinGameFailedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JoinGameFailedMessage_default_instance_;
    new (ptr) ::JoinGameFailedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JoinGameFailedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinGameFailedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinGameFailedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_JoinGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JoinGameMessage_default_instance_;
    new (ptr) ::JoinGameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JoinGameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_KickPetitionUpdateMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KickPetitionUpdateMessage_default_instance_;
    new (ptr) ::KickPetitionUpdateMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KickPetitionUpdateMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KickPetitionUpdateMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KickPetitionUpdateMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_KickPlayerRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KickPlayerRequestMessage_default_instance_;
    new (ptr) ::KickPlayerRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KickPlayerRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KickPlayerRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KickPlayerRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_LeaveGameRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LeaveGameRequestMessage_default_instance_;
    new (ptr) ::LeaveGameRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LeaveGameRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveGameRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaveGameRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_LobbyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LobbyMessage_default_instance_;
    new (ptr) ::LobbyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<43> scc_info_LobbyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 43, 0, InitDefaultsscc_info_LobbyMessage_pokerth_2eproto}, {
      &scc_info_InitDoneMessage_pokerth_2eproto.base,
      &scc_info_AvatarRequestMessage_pokerth_2eproto.base,
      &scc_info_AvatarHeaderMessage_pokerth_2eproto.base,
      &scc_info_AvatarDataMessage_pokerth_2eproto.base,
      &scc_info_AvatarEndMessage_pokerth_2eproto.base,
      &scc_info_UnknownAvatarMessage_pokerth_2eproto.base,
      &scc_info_PlayerListMessage_pokerth_2eproto.base,
      &scc_info_GameListNewMessage_pokerth_2eproto.base,
      &scc_info_GameListUpdateMessage_pokerth_2eproto.base,
      &scc_info_GameListPlayerJoinedMessage_pokerth_2eproto.base,
      &scc_info_GameListPlayerLeftMessage_pokerth_2eproto.base,
      &scc_info_GameListSpectatorJoinedMessage_pokerth_2eproto.base,
      &scc_info_GameListSpectatorLeftMessage_pokerth_2eproto.base,
      &scc_info_GameListAdminChangedMessage_pokerth_2eproto.base,
      &scc_info_PlayerInfoRequestMessage_pokerth_2eproto.base,
      &scc_info_PlayerInfoReplyMessage_pokerth_2eproto.base,
      &scc_info_SubscriptionRequestMessage_pokerth_2eproto.base,
      &scc_info_SubscriptionReplyMessage_pokerth_2eproto.base,
      &scc_info_CreateGameMessage_pokerth_2eproto.base,
      &scc_info_CreateGameFailedMessage_pokerth_2eproto.base,
      &scc_info_JoinGameMessage_pokerth_2eproto.base,
      &scc_info_RejoinGameMessage_pokerth_2eproto.base,
      &scc_info_JoinGameAckMessage_pokerth_2eproto.base,
      &scc_info_JoinGameFailedMessage_pokerth_2eproto.base,
      &scc_info_InviteNotifyMessage_pokerth_2eproto.base,
      &scc_info_RejectGameInvitationMessage_pokerth_2eproto.base,
      &scc_info_RejectInvNotifyMessage_pokerth_2eproto.base,
      &scc_info_StatisticsMessage_pokerth_2eproto.base,
      &scc_info_ChatRequestMessage_pokerth_2eproto.base,
      &scc_info_ChatMessage_pokerth_2eproto.base,
      &scc_info_ChatRejectMessage_pokerth_2eproto.base,
      &scc_info_DialogMessage_pokerth_2eproto.base,
      &scc_info_TimeoutWarningMessage_pokerth_2eproto.base,
      &scc_info_ResetTimeoutMessage_pokerth_2eproto.base,
      &scc_info_ReportAvatarMessage_pokerth_2eproto.base,
      &scc_info_ReportAvatarAckMessage_pokerth_2eproto.base,
      &scc_info_ReportGameMessage_pokerth_2eproto.base,
      &scc_info_ReportGameAckMessage_pokerth_2eproto.base,
      &scc_info_AdminRemoveGameMessage_pokerth_2eproto.base,
      &scc_info_AdminRemoveGameAckMessage_pokerth_2eproto.base,
      &scc_info_AdminBanPlayerMessage_pokerth_2eproto.base,
      &scc_info_AdminBanPlayerAckMessage_pokerth_2eproto.base,
      &scc_info_ErrorMessage_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_MyActionRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MyActionRequestMessage_default_instance_;
    new (ptr) ::MyActionRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyActionRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyActionRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MyActionRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_NetGameInfo_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetGameInfo_default_instance_;
    new (ptr) ::NetGameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetGameInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetGameInfo_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetGameInfo_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_PlayerIdChangedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerIdChangedMessage_default_instance_;
    new (ptr) ::PlayerIdChangedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerIdChangedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerIdChangedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerIdChangedMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInfoReplyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfoReplyMessage_default_instance_;
    new (ptr) ::PlayerInfoReplyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfoReplyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInfoReplyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerInfoReplyMessage_pokerth_2eproto}, {
      &scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfoReplyMessage_PlayerInfoData_default_instance_;
    new (ptr) ::PlayerInfoReplyMessage_PlayerInfoData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfoReplyMessage_PlayerInfoData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto}, {
      &scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_default_instance_;
    new (ptr) ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInfoRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfoRequestMessage_default_instance_;
    new (ptr) ::PlayerInfoRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfoRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfoRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerInfoRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_PlayerListMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerListMessage_default_instance_;
    new (ptr) ::PlayerListMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerListMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerListMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerListMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_PlayerResult_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerResult_default_instance_;
    new (ptr) ::PlayerResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerResult_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerResult_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_PlayersActionDoneMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayersActionDoneMessage_default_instance_;
    new (ptr) ::PlayersActionDoneMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayersActionDoneMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayersActionDoneMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayersActionDoneMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_PlayersTurnMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayersTurnMessage_default_instance_;
    new (ptr) ::PlayersTurnMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayersTurnMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayersTurnMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayersTurnMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_PokerTHMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PokerTHMessage_default_instance_;
    new (ptr) ::PokerTHMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PokerTHMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PokerTHMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PokerTHMessage_pokerth_2eproto}, {
      &scc_info_AnnounceMessage_pokerth_2eproto.base,
      &scc_info_AuthMessage_pokerth_2eproto.base,
      &scc_info_LobbyMessage_pokerth_2eproto.base,
      &scc_info_GameMessage_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_RejectGameInvitationMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RejectGameInvitationMessage_default_instance_;
    new (ptr) ::RejectGameInvitationMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RejectGameInvitationMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RejectGameInvitationMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RejectGameInvitationMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_RejectInvNotifyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RejectInvNotifyMessage_default_instance_;
    new (ptr) ::RejectInvNotifyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RejectInvNotifyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RejectInvNotifyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RejectInvNotifyMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_RejoinGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RejoinGameMessage_default_instance_;
    new (ptr) ::RejoinGameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RejoinGameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RejoinGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RejoinGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_RemovedFromGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemovedFromGameMessage_default_instance_;
    new (ptr) ::RemovedFromGameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemovedFromGameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovedFromGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemovedFromGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_ReportAvatarAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReportAvatarAckMessage_default_instance_;
    new (ptr) ::ReportAvatarAckMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReportAvatarAckMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportAvatarAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReportAvatarAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_ReportAvatarMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReportAvatarMessage_default_instance_;
    new (ptr) ::ReportAvatarMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReportAvatarMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportAvatarMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReportAvatarMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_ReportGameAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReportGameAckMessage_default_instance_;
    new (ptr) ::ReportGameAckMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReportGameAckMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportGameAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReportGameAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_ReportGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReportGameMessage_default_instance_;
    new (ptr) ::ReportGameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReportGameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReportGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_ResetTimeoutMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResetTimeoutMessage_default_instance_;
    new (ptr) ::ResetTimeoutMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResetTimeoutMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetTimeoutMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetTimeoutMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_ShowMyCardsRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShowMyCardsRequestMessage_default_instance_;
    new (ptr) ::ShowMyCardsRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ShowMyCardsRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowMyCardsRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowMyCardsRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_StartEventAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartEventAckMessage_default_instance_;
    new (ptr) ::StartEventAckMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartEventAckMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartEventAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartEventAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_StartEventMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartEventMessage_default_instance_;
    new (ptr) ::StartEventMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartEventMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartEventMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartEventMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_StartKickPetitionMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartKickPetitionMessage_default_instance_;
    new (ptr) ::StartKickPetitionMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartKickPetitionMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartKickPetitionMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartKickPetitionMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_StatisticsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StatisticsMessage_default_instance_;
    new (ptr) ::StatisticsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StatisticsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatisticsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatisticsMessage_pokerth_2eproto}, {
      &scc_info_StatisticsMessage_StatisticsData_pokerth_2eproto.base,}};

static void InitDefaultsscc_info_StatisticsMessage_StatisticsData_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StatisticsMessage_StatisticsData_default_instance_;
    new (ptr) ::StatisticsMessage_StatisticsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StatisticsMessage_StatisticsData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatisticsMessage_StatisticsData_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatisticsMessage_StatisticsData_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_SubscriptionReplyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubscriptionReplyMessage_default_instance_;
    new (ptr) ::SubscriptionReplyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubscriptionReplyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionReplyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscriptionReplyMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_SubscriptionRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubscriptionRequestMessage_default_instance_;
    new (ptr) ::SubscriptionRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubscriptionRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscriptionRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_TimeoutWarningMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TimeoutWarningMessage_default_instance_;
    new (ptr) ::TimeoutWarningMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TimeoutWarningMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeoutWarningMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeoutWarningMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_UnknownAvatarMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnknownAvatarMessage_default_instance_;
    new (ptr) ::UnknownAvatarMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnknownAvatarMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownAvatarMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnknownAvatarMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_VoteKickReplyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VoteKickReplyMessage_default_instance_;
    new (ptr) ::VoteKickReplyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VoteKickReplyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteKickReplyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoteKickReplyMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_VoteKickRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VoteKickRequestMessage_default_instance_;
    new (ptr) ::VoteKickRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VoteKickRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteKickRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoteKickRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsscc_info_YourActionRejectedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_YourActionRejectedMessage_default_instance_;
    new (ptr) ::YourActionRejectedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YourActionRejectedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YourActionRejectedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_YourActionRejectedMessage_pokerth_2eproto}, {}};

bool NetGameInfo_NetGameType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetGameInfo_NetGameType_strings[4] = {};

static const char NetGameInfo_NetGameType_names[] =
  "inviteOnlyGame"
  "normalGame"
  "rankingGame"
  "registeredOnlyGame";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetGameInfo_NetGameType_entries[] = {
  { {NetGameInfo_NetGameType_names + 0, 14}, 3 },
  { {NetGameInfo_NetGameType_names + 14, 10}, 1 },
  { {NetGameInfo_NetGameType_names + 24, 11}, 4 },
  { {NetGameInfo_NetGameType_names + 35, 18}, 2 },
};

static const int NetGameInfo_NetGameType_entries_by_number[] = {
  1, // 1 -> normalGame
  3, // 2 -> registeredOnlyGame
  0, // 3 -> inviteOnlyGame
  2, // 4 -> rankingGame
};

const std::string& NetGameInfo_NetGameType_Name(
    NetGameInfo_NetGameType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetGameInfo_NetGameType_entries,
          NetGameInfo_NetGameType_entries_by_number,
          4, NetGameInfo_NetGameType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetGameInfo_NetGameType_entries,
      NetGameInfo_NetGameType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetGameInfo_NetGameType_strings[idx].get();
}
bool NetGameInfo_NetGameType_Parse(
    const std::string& name, NetGameInfo_NetGameType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetGameInfo_NetGameType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<NetGameInfo_NetGameType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetGameInfo_NetGameType NetGameInfo::normalGame;
constexpr NetGameInfo_NetGameType NetGameInfo::registeredOnlyGame;
constexpr NetGameInfo_NetGameType NetGameInfo::inviteOnlyGame;
constexpr NetGameInfo_NetGameType NetGameInfo::rankingGame;
constexpr NetGameInfo_NetGameType NetGameInfo::NetGameType_MIN;
constexpr NetGameInfo_NetGameType NetGameInfo::NetGameType_MAX;
constexpr int NetGameInfo::NetGameType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool NetGameInfo_RaiseIntervalMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetGameInfo_RaiseIntervalMode_strings[2] = {};

static const char NetGameInfo_RaiseIntervalMode_names[] =
  "raiseOnHandNum"
  "raiseOnMinutes";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetGameInfo_RaiseIntervalMode_entries[] = {
  { {NetGameInfo_RaiseIntervalMode_names + 0, 14}, 1 },
  { {NetGameInfo_RaiseIntervalMode_names + 14, 14}, 2 },
};

static const int NetGameInfo_RaiseIntervalMode_entries_by_number[] = {
  0, // 1 -> raiseOnHandNum
  1, // 2 -> raiseOnMinutes
};

const std::string& NetGameInfo_RaiseIntervalMode_Name(
    NetGameInfo_RaiseIntervalMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetGameInfo_RaiseIntervalMode_entries,
          NetGameInfo_RaiseIntervalMode_entries_by_number,
          2, NetGameInfo_RaiseIntervalMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetGameInfo_RaiseIntervalMode_entries,
      NetGameInfo_RaiseIntervalMode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetGameInfo_RaiseIntervalMode_strings[idx].get();
}
bool NetGameInfo_RaiseIntervalMode_Parse(
    const std::string& name, NetGameInfo_RaiseIntervalMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetGameInfo_RaiseIntervalMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<NetGameInfo_RaiseIntervalMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnHandNum;
constexpr NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnMinutes;
constexpr NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MIN;
constexpr NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MAX;
constexpr int NetGameInfo::RaiseIntervalMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool NetGameInfo_EndRaiseMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetGameInfo_EndRaiseMode_strings[3] = {};

static const char NetGameInfo_EndRaiseMode_names[] =
  "doubleBlinds"
  "keepLastBlind"
  "raiseByEndValue";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetGameInfo_EndRaiseMode_entries[] = {
  { {NetGameInfo_EndRaiseMode_names + 0, 12}, 1 },
  { {NetGameInfo_EndRaiseMode_names + 12, 13}, 3 },
  { {NetGameInfo_EndRaiseMode_names + 25, 15}, 2 },
};

static const int NetGameInfo_EndRaiseMode_entries_by_number[] = {
  0, // 1 -> doubleBlinds
  2, // 2 -> raiseByEndValue
  1, // 3 -> keepLastBlind
};

const std::string& NetGameInfo_EndRaiseMode_Name(
    NetGameInfo_EndRaiseMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetGameInfo_EndRaiseMode_entries,
          NetGameInfo_EndRaiseMode_entries_by_number,
          3, NetGameInfo_EndRaiseMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetGameInfo_EndRaiseMode_entries,
      NetGameInfo_EndRaiseMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetGameInfo_EndRaiseMode_strings[idx].get();
}
bool NetGameInfo_EndRaiseMode_Parse(
    const std::string& name, NetGameInfo_EndRaiseMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetGameInfo_EndRaiseMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<NetGameInfo_EndRaiseMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetGameInfo_EndRaiseMode NetGameInfo::doubleBlinds;
constexpr NetGameInfo_EndRaiseMode NetGameInfo::raiseByEndValue;
constexpr NetGameInfo_EndRaiseMode NetGameInfo::keepLastBlind;
constexpr NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MIN;
constexpr NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MAX;
constexpr int NetGameInfo::EndRaiseMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AnnounceMessage_ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AnnounceMessage_ServerType_strings[3] = {};

static const char AnnounceMessage_ServerType_names[] =
  "serverTypeInternetAuth"
  "serverTypeInternetNoAuth"
  "serverTypeLAN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AnnounceMessage_ServerType_entries[] = {
  { {AnnounceMessage_ServerType_names + 0, 22}, 2 },
  { {AnnounceMessage_ServerType_names + 22, 24}, 1 },
  { {AnnounceMessage_ServerType_names + 46, 13}, 0 },
};

static const int AnnounceMessage_ServerType_entries_by_number[] = {
  2, // 0 -> serverTypeLAN
  1, // 1 -> serverTypeInternetNoAuth
  0, // 2 -> serverTypeInternetAuth
};

const std::string& AnnounceMessage_ServerType_Name(
    AnnounceMessage_ServerType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AnnounceMessage_ServerType_entries,
          AnnounceMessage_ServerType_entries_by_number,
          3, AnnounceMessage_ServerType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AnnounceMessage_ServerType_entries,
      AnnounceMessage_ServerType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AnnounceMessage_ServerType_strings[idx].get();
}
bool AnnounceMessage_ServerType_Parse(
    const std::string& name, AnnounceMessage_ServerType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AnnounceMessage_ServerType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<AnnounceMessage_ServerType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AnnounceMessage_ServerType AnnounceMessage::serverTypeLAN;
constexpr AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetNoAuth;
constexpr AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetAuth;
constexpr AnnounceMessage_ServerType AnnounceMessage::ServerType_MIN;
constexpr AnnounceMessage_ServerType AnnounceMessage::ServerType_MAX;
constexpr int AnnounceMessage::ServerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AuthClientRequestMessage_LoginType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AuthClientRequestMessage_LoginType_strings[3] = {};

static const char AuthClientRequestMessage_LoginType_names[] =
  "authenticatedLogin"
  "guestLogin"
  "unauthenticatedLogin";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AuthClientRequestMessage_LoginType_entries[] = {
  { {AuthClientRequestMessage_LoginType_names + 0, 18}, 1 },
  { {AuthClientRequestMessage_LoginType_names + 18, 10}, 0 },
  { {AuthClientRequestMessage_LoginType_names + 28, 20}, 2 },
};

static const int AuthClientRequestMessage_LoginType_entries_by_number[] = {
  1, // 0 -> guestLogin
  0, // 1 -> authenticatedLogin
  2, // 2 -> unauthenticatedLogin
};

const std::string& AuthClientRequestMessage_LoginType_Name(
    AuthClientRequestMessage_LoginType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AuthClientRequestMessage_LoginType_entries,
          AuthClientRequestMessage_LoginType_entries_by_number,
          3, AuthClientRequestMessage_LoginType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AuthClientRequestMessage_LoginType_entries,
      AuthClientRequestMessage_LoginType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AuthClientRequestMessage_LoginType_strings[idx].get();
}
bool AuthClientRequestMessage_LoginType_Parse(
    const std::string& name, AuthClientRequestMessage_LoginType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AuthClientRequestMessage_LoginType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<AuthClientRequestMessage_LoginType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::guestLogin;
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::authenticatedLogin;
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::unauthenticatedLogin;
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::LoginType_MIN;
constexpr AuthClientRequestMessage_LoginType AuthClientRequestMessage::LoginType_MAX;
constexpr int AuthClientRequestMessage::LoginType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PlayerListMessage_PlayerListNotification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PlayerListMessage_PlayerListNotification_strings[2] = {};

static const char PlayerListMessage_PlayerListNotification_names[] =
  "playerListLeft"
  "playerListNew";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PlayerListMessage_PlayerListNotification_entries[] = {
  { {PlayerListMessage_PlayerListNotification_names + 0, 14}, 1 },
  { {PlayerListMessage_PlayerListNotification_names + 14, 13}, 0 },
};

static const int PlayerListMessage_PlayerListNotification_entries_by_number[] = {
  1, // 0 -> playerListNew
  0, // 1 -> playerListLeft
};

const std::string& PlayerListMessage_PlayerListNotification_Name(
    PlayerListMessage_PlayerListNotification value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PlayerListMessage_PlayerListNotification_entries,
          PlayerListMessage_PlayerListNotification_entries_by_number,
          2, PlayerListMessage_PlayerListNotification_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PlayerListMessage_PlayerListNotification_entries,
      PlayerListMessage_PlayerListNotification_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PlayerListMessage_PlayerListNotification_strings[idx].get();
}
bool PlayerListMessage_PlayerListNotification_Parse(
    const std::string& name, PlayerListMessage_PlayerListNotification* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PlayerListMessage_PlayerListNotification_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PlayerListMessage_PlayerListNotification>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayerListMessage_PlayerListNotification PlayerListMessage::playerListNew;
constexpr PlayerListMessage_PlayerListNotification PlayerListMessage::playerListLeft;
constexpr PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MIN;
constexpr PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MAX;
constexpr int PlayerListMessage::PlayerListNotification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SubscriptionRequestMessage_SubscriptionAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SubscriptionRequestMessage_SubscriptionAction_strings[2] = {};

static const char SubscriptionRequestMessage_SubscriptionAction_names[] =
  "resubscribeGameList"
  "unsubscribeGameList";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SubscriptionRequestMessage_SubscriptionAction_entries[] = {
  { {SubscriptionRequestMessage_SubscriptionAction_names + 0, 19}, 2 },
  { {SubscriptionRequestMessage_SubscriptionAction_names + 19, 19}, 1 },
};

static const int SubscriptionRequestMessage_SubscriptionAction_entries_by_number[] = {
  1, // 1 -> unsubscribeGameList
  0, // 2 -> resubscribeGameList
};

const std::string& SubscriptionRequestMessage_SubscriptionAction_Name(
    SubscriptionRequestMessage_SubscriptionAction value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SubscriptionRequestMessage_SubscriptionAction_entries,
          SubscriptionRequestMessage_SubscriptionAction_entries_by_number,
          2, SubscriptionRequestMessage_SubscriptionAction_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SubscriptionRequestMessage_SubscriptionAction_entries,
      SubscriptionRequestMessage_SubscriptionAction_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SubscriptionRequestMessage_SubscriptionAction_strings[idx].get();
}
bool SubscriptionRequestMessage_SubscriptionAction_Parse(
    const std::string& name, SubscriptionRequestMessage_SubscriptionAction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SubscriptionRequestMessage_SubscriptionAction_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<SubscriptionRequestMessage_SubscriptionAction>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::unsubscribeGameList;
constexpr SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::resubscribeGameList;
constexpr SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MIN;
constexpr SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MAX;
constexpr int SubscriptionRequestMessage::SubscriptionAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CreateGameFailedMessage_CreateGameFailureReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CreateGameFailedMessage_CreateGameFailureReason_strings[4] = {};

static const char CreateGameFailedMessage_CreateGameFailureReason_names[] =
  "badGameName"
  "gameNameInUse"
  "invalidSettings"
  "notAllowedAsGuest";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CreateGameFailedMessage_CreateGameFailureReason_entries[] = {
  { {CreateGameFailedMessage_CreateGameFailureReason_names + 0, 11}, 3 },
  { {CreateGameFailedMessage_CreateGameFailureReason_names + 11, 13}, 2 },
  { {CreateGameFailedMessage_CreateGameFailureReason_names + 24, 15}, 4 },
  { {CreateGameFailedMessage_CreateGameFailureReason_names + 39, 17}, 1 },
};

static const int CreateGameFailedMessage_CreateGameFailureReason_entries_by_number[] = {
  3, // 1 -> notAllowedAsGuest
  1, // 2 -> gameNameInUse
  0, // 3 -> badGameName
  2, // 4 -> invalidSettings
};

const std::string& CreateGameFailedMessage_CreateGameFailureReason_Name(
    CreateGameFailedMessage_CreateGameFailureReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CreateGameFailedMessage_CreateGameFailureReason_entries,
          CreateGameFailedMessage_CreateGameFailureReason_entries_by_number,
          4, CreateGameFailedMessage_CreateGameFailureReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CreateGameFailedMessage_CreateGameFailureReason_entries,
      CreateGameFailedMessage_CreateGameFailureReason_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CreateGameFailedMessage_CreateGameFailureReason_strings[idx].get();
}
bool CreateGameFailedMessage_CreateGameFailureReason_Parse(
    const std::string& name, CreateGameFailedMessage_CreateGameFailureReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CreateGameFailedMessage_CreateGameFailureReason_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CreateGameFailedMessage_CreateGameFailureReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::notAllowedAsGuest;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::gameNameInUse;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::badGameName;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::invalidSettings;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::CreateGameFailureReason_MIN;
constexpr CreateGameFailedMessage_CreateGameFailureReason CreateGameFailedMessage::CreateGameFailureReason_MAX;
constexpr int CreateGameFailedMessage::CreateGameFailureReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool JoinGameFailedMessage_JoinGameFailureReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> JoinGameFailedMessage_JoinGameFailureReason_strings[9] = {};

static const char JoinGameFailedMessage_JoinGameFailureReason_names[] =
  "gameIsFull"
  "gameIsRunning"
  "invalidGame"
  "invalidPassword"
  "ipAddressBlocked"
  "noSpectatorsAllowed"
  "notAllowedAsGuest"
  "notInvited"
  "rejoinFailed";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry JoinGameFailedMessage_JoinGameFailureReason_entries[] = {
  { {JoinGameFailedMessage_JoinGameFailureReason_names + 0, 10}, 2 },
  { {JoinGameFailedMessage_JoinGameFailureReason_names + 10, 13}, 3 },
  { {JoinGameFailedMessage_JoinGameFailureReason_names + 23, 11}, 1 },
  { {JoinGameFailedMessage_JoinGameFailureReason_names + 34, 15}, 5 },
  { {JoinGameFailedMessage_JoinGameFailureReason_names + 49, 16}, 7 },
  { {JoinGameFailedMessage_JoinGameFailureReason_names + 65, 19}, 9 },
  { {JoinGameFailedMessage_JoinGameFailureReason_names + 84, 17}, 4 },
  { {JoinGameFailedMessage_JoinGameFailureReason_names + 101, 10}, 6 },
  { {JoinGameFailedMessage_JoinGameFailureReason_names + 111, 12}, 8 },
};

static const int JoinGameFailedMessage_JoinGameFailureReason_entries_by_number[] = {
  2, // 1 -> invalidGame
  0, // 2 -> gameIsFull
  1, // 3 -> gameIsRunning
  6, // 4 -> notAllowedAsGuest
  3, // 5 -> invalidPassword
  7, // 6 -> notInvited
  4, // 7 -> ipAddressBlocked
  8, // 8 -> rejoinFailed
  5, // 9 -> noSpectatorsAllowed
};

const std::string& JoinGameFailedMessage_JoinGameFailureReason_Name(
    JoinGameFailedMessage_JoinGameFailureReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          JoinGameFailedMessage_JoinGameFailureReason_entries,
          JoinGameFailedMessage_JoinGameFailureReason_entries_by_number,
          9, JoinGameFailedMessage_JoinGameFailureReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      JoinGameFailedMessage_JoinGameFailureReason_entries,
      JoinGameFailedMessage_JoinGameFailureReason_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     JoinGameFailedMessage_JoinGameFailureReason_strings[idx].get();
}
bool JoinGameFailedMessage_JoinGameFailureReason_Parse(
    const std::string& name, JoinGameFailedMessage_JoinGameFailureReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      JoinGameFailedMessage_JoinGameFailureReason_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<JoinGameFailedMessage_JoinGameFailureReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidGame;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsFull;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsRunning;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notAllowedAsGuest;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidPassword;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notInvited;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::ipAddressBlocked;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::rejoinFailed;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::noSpectatorsAllowed;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MIN;
constexpr JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MAX;
constexpr int JoinGameFailedMessage::JoinGameFailureReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GamePlayerLeftMessage_GamePlayerLeftReason_strings[3] = {};

static const char GamePlayerLeftMessage_GamePlayerLeftReason_names[] =
  "leftError"
  "leftKicked"
  "leftOnRequest";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GamePlayerLeftMessage_GamePlayerLeftReason_entries[] = {
  { {GamePlayerLeftMessage_GamePlayerLeftReason_names + 0, 9}, 2 },
  { {GamePlayerLeftMessage_GamePlayerLeftReason_names + 9, 10}, 1 },
  { {GamePlayerLeftMessage_GamePlayerLeftReason_names + 19, 13}, 0 },
};

static const int GamePlayerLeftMessage_GamePlayerLeftReason_entries_by_number[] = {
  2, // 0 -> leftOnRequest
  1, // 1 -> leftKicked
  0, // 2 -> leftError
};

const std::string& GamePlayerLeftMessage_GamePlayerLeftReason_Name(
    GamePlayerLeftMessage_GamePlayerLeftReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GamePlayerLeftMessage_GamePlayerLeftReason_entries,
          GamePlayerLeftMessage_GamePlayerLeftReason_entries_by_number,
          3, GamePlayerLeftMessage_GamePlayerLeftReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GamePlayerLeftMessage_GamePlayerLeftReason_entries,
      GamePlayerLeftMessage_GamePlayerLeftReason_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GamePlayerLeftMessage_GamePlayerLeftReason_strings[idx].get();
}
bool GamePlayerLeftMessage_GamePlayerLeftReason_Parse(
    const std::string& name, GamePlayerLeftMessage_GamePlayerLeftReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GamePlayerLeftMessage_GamePlayerLeftReason_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<GamePlayerLeftMessage_GamePlayerLeftReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftOnRequest;
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftKicked;
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftError;
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MIN;
constexpr GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MAX;
constexpr int GamePlayerLeftMessage::GamePlayerLeftReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RemovedFromGameMessage_RemovedFromGameReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RemovedFromGameMessage_RemovedFromGameReason_strings[7] = {};

static const char RemovedFromGameMessage_RemovedFromGameReason_names[] =
  "gameClosed"
  "gameIsFull"
  "gameIsRunning"
  "gameTimeout"
  "kickedFromGame"
  "removedOnRequest"
  "removedStartFailed";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RemovedFromGameMessage_RemovedFromGameReason_entries[] = {
  { {RemovedFromGameMessage_RemovedFromGameReason_names + 0, 10}, 6 },
  { {RemovedFromGameMessage_RemovedFromGameReason_names + 10, 10}, 2 },
  { {RemovedFromGameMessage_RemovedFromGameReason_names + 20, 13}, 3 },
  { {RemovedFromGameMessage_RemovedFromGameReason_names + 33, 11}, 4 },
  { {RemovedFromGameMessage_RemovedFromGameReason_names + 44, 14}, 1 },
  { {RemovedFromGameMessage_RemovedFromGameReason_names + 58, 16}, 0 },
  { {RemovedFromGameMessage_RemovedFromGameReason_names + 74, 18}, 5 },
};

static const int RemovedFromGameMessage_RemovedFromGameReason_entries_by_number[] = {
  5, // 0 -> removedOnRequest
  4, // 1 -> kickedFromGame
  1, // 2 -> gameIsFull
  2, // 3 -> gameIsRunning
  3, // 4 -> gameTimeout
  6, // 5 -> removedStartFailed
  0, // 6 -> gameClosed
};

const std::string& RemovedFromGameMessage_RemovedFromGameReason_Name(
    RemovedFromGameMessage_RemovedFromGameReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RemovedFromGameMessage_RemovedFromGameReason_entries,
          RemovedFromGameMessage_RemovedFromGameReason_entries_by_number,
          7, RemovedFromGameMessage_RemovedFromGameReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RemovedFromGameMessage_RemovedFromGameReason_entries,
      RemovedFromGameMessage_RemovedFromGameReason_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RemovedFromGameMessage_RemovedFromGameReason_strings[idx].get();
}
bool RemovedFromGameMessage_RemovedFromGameReason_Parse(
    const std::string& name, RemovedFromGameMessage_RemovedFromGameReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RemovedFromGameMessage_RemovedFromGameReason_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<RemovedFromGameMessage_RemovedFromGameReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedOnRequest;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::kickedFromGame;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsFull;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsRunning;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameTimeout;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedStartFailed;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameClosed;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MIN;
constexpr RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MAX;
constexpr int RemovedFromGameMessage::RemovedFromGameReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RejectGameInvitationMessage_RejectGameInvReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RejectGameInvitationMessage_RejectGameInvReason_strings[2] = {};

static const char RejectGameInvitationMessage_RejectGameInvReason_names[] =
  "rejectReasonBusy"
  "rejectReasonNo";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RejectGameInvitationMessage_RejectGameInvReason_entries[] = {
  { {RejectGameInvitationMessage_RejectGameInvReason_names + 0, 16}, 1 },
  { {RejectGameInvitationMessage_RejectGameInvReason_names + 16, 14}, 0 },
};

static const int RejectGameInvitationMessage_RejectGameInvReason_entries_by_number[] = {
  1, // 0 -> rejectReasonNo
  0, // 1 -> rejectReasonBusy
};

const std::string& RejectGameInvitationMessage_RejectGameInvReason_Name(
    RejectGameInvitationMessage_RejectGameInvReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RejectGameInvitationMessage_RejectGameInvReason_entries,
          RejectGameInvitationMessage_RejectGameInvReason_entries_by_number,
          2, RejectGameInvitationMessage_RejectGameInvReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RejectGameInvitationMessage_RejectGameInvReason_entries,
      RejectGameInvitationMessage_RejectGameInvReason_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RejectGameInvitationMessage_RejectGameInvReason_strings[idx].get();
}
bool RejectGameInvitationMessage_RejectGameInvReason_Parse(
    const std::string& name, RejectGameInvitationMessage_RejectGameInvReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RejectGameInvitationMessage_RejectGameInvReason_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<RejectGameInvitationMessage_RejectGameInvReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonNo;
constexpr RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonBusy;
constexpr RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MIN;
constexpr RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MAX;
constexpr int RejectGameInvitationMessage::RejectGameInvReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StartEventMessage_StartEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StartEventMessage_StartEventType_strings[2] = {};

static const char StartEventMessage_StartEventType_names[] =
  "rejoinEvent"
  "startEvent";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StartEventMessage_StartEventType_entries[] = {
  { {StartEventMessage_StartEventType_names + 0, 11}, 1 },
  { {StartEventMessage_StartEventType_names + 11, 10}, 0 },
};

static const int StartEventMessage_StartEventType_entries_by_number[] = {
  1, // 0 -> startEvent
  0, // 1 -> rejoinEvent
};

const std::string& StartEventMessage_StartEventType_Name(
    StartEventMessage_StartEventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StartEventMessage_StartEventType_entries,
          StartEventMessage_StartEventType_entries_by_number,
          2, StartEventMessage_StartEventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StartEventMessage_StartEventType_entries,
      StartEventMessage_StartEventType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StartEventMessage_StartEventType_strings[idx].get();
}
bool StartEventMessage_StartEventType_Parse(
    const std::string& name, StartEventMessage_StartEventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StartEventMessage_StartEventType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<StartEventMessage_StartEventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StartEventMessage_StartEventType StartEventMessage::startEvent;
constexpr StartEventMessage_StartEventType StartEventMessage::rejoinEvent;
constexpr StartEventMessage_StartEventType StartEventMessage::StartEventType_MIN;
constexpr StartEventMessage_StartEventType StartEventMessage::StartEventType_MAX;
constexpr int StartEventMessage::StartEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool YourActionRejectedMessage_RejectionReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> YourActionRejectedMessage_RejectionReason_strings[3] = {};

static const char YourActionRejectedMessage_RejectionReason_names[] =
  "rejectedActionNotAllowed"
  "rejectedInvalidGameState"
  "rejectedNotYourTurn";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry YourActionRejectedMessage_RejectionReason_entries[] = {
  { {YourActionRejectedMessage_RejectionReason_names + 0, 24}, 3 },
  { {YourActionRejectedMessage_RejectionReason_names + 24, 24}, 1 },
  { {YourActionRejectedMessage_RejectionReason_names + 48, 19}, 2 },
};

static const int YourActionRejectedMessage_RejectionReason_entries_by_number[] = {
  1, // 1 -> rejectedInvalidGameState
  2, // 2 -> rejectedNotYourTurn
  0, // 3 -> rejectedActionNotAllowed
};

const std::string& YourActionRejectedMessage_RejectionReason_Name(
    YourActionRejectedMessage_RejectionReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          YourActionRejectedMessage_RejectionReason_entries,
          YourActionRejectedMessage_RejectionReason_entries_by_number,
          3, YourActionRejectedMessage_RejectionReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      YourActionRejectedMessage_RejectionReason_entries,
      YourActionRejectedMessage_RejectionReason_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     YourActionRejectedMessage_RejectionReason_strings[idx].get();
}
bool YourActionRejectedMessage_RejectionReason_Parse(
    const std::string& name, YourActionRejectedMessage_RejectionReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      YourActionRejectedMessage_RejectionReason_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<YourActionRejectedMessage_RejectionReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedInvalidGameState;
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedNotYourTurn;
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedActionNotAllowed;
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MIN;
constexpr YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MAX;
constexpr int YourActionRejectedMessage::RejectionReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AskKickDeniedMessage_KickDeniedReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AskKickDeniedMessage_KickDeniedReason_strings[5] = {};

static const char AskKickDeniedMessage_KickDeniedReason_names[] =
  "kickDeniedAlreadyInProgress"
  "kickDeniedInvalidGameState"
  "kickDeniedInvalidPlayerId"
  "kickDeniedNotPossible"
  "kickDeniedTryAgainLater";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AskKickDeniedMessage_KickDeniedReason_entries[] = {
  { {AskKickDeniedMessage_KickDeniedReason_names + 0, 27}, 3 },
  { {AskKickDeniedMessage_KickDeniedReason_names + 27, 26}, 0 },
  { {AskKickDeniedMessage_KickDeniedReason_names + 53, 25}, 4 },
  { {AskKickDeniedMessage_KickDeniedReason_names + 78, 21}, 1 },
  { {AskKickDeniedMessage_KickDeniedReason_names + 99, 23}, 2 },
};

static const int AskKickDeniedMessage_KickDeniedReason_entries_by_number[] = {
  1, // 0 -> kickDeniedInvalidGameState
  3, // 1 -> kickDeniedNotPossible
  4, // 2 -> kickDeniedTryAgainLater
  0, // 3 -> kickDeniedAlreadyInProgress
  2, // 4 -> kickDeniedInvalidPlayerId
};

const std::string& AskKickDeniedMessage_KickDeniedReason_Name(
    AskKickDeniedMessage_KickDeniedReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AskKickDeniedMessage_KickDeniedReason_entries,
          AskKickDeniedMessage_KickDeniedReason_entries_by_number,
          5, AskKickDeniedMessage_KickDeniedReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AskKickDeniedMessage_KickDeniedReason_entries,
      AskKickDeniedMessage_KickDeniedReason_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AskKickDeniedMessage_KickDeniedReason_strings[idx].get();
}
bool AskKickDeniedMessage_KickDeniedReason_Parse(
    const std::string& name, AskKickDeniedMessage_KickDeniedReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AskKickDeniedMessage_KickDeniedReason_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AskKickDeniedMessage_KickDeniedReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidGameState;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedNotPossible;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedTryAgainLater;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedAlreadyInProgress;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidPlayerId;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MIN;
constexpr AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MAX;
constexpr int AskKickDeniedMessage::KickDeniedReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool VoteKickReplyMessage_VoteKickReplyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VoteKickReplyMessage_VoteKickReplyType_strings[3] = {};

static const char VoteKickReplyMessage_VoteKickReplyType_names[] =
  "voteKickAck"
  "voteKickDeniedAlreadyVoted"
  "voteKickDeniedInvalid";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VoteKickReplyMessage_VoteKickReplyType_entries[] = {
  { {VoteKickReplyMessage_VoteKickReplyType_names + 0, 11}, 0 },
  { {VoteKickReplyMessage_VoteKickReplyType_names + 11, 26}, 2 },
  { {VoteKickReplyMessage_VoteKickReplyType_names + 37, 21}, 1 },
};

static const int VoteKickReplyMessage_VoteKickReplyType_entries_by_number[] = {
  0, // 0 -> voteKickAck
  2, // 1 -> voteKickDeniedInvalid
  1, // 2 -> voteKickDeniedAlreadyVoted
};

const std::string& VoteKickReplyMessage_VoteKickReplyType_Name(
    VoteKickReplyMessage_VoteKickReplyType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VoteKickReplyMessage_VoteKickReplyType_entries,
          VoteKickReplyMessage_VoteKickReplyType_entries_by_number,
          3, VoteKickReplyMessage_VoteKickReplyType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VoteKickReplyMessage_VoteKickReplyType_entries,
      VoteKickReplyMessage_VoteKickReplyType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VoteKickReplyMessage_VoteKickReplyType_strings[idx].get();
}
bool VoteKickReplyMessage_VoteKickReplyType_Parse(
    const std::string& name, VoteKickReplyMessage_VoteKickReplyType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VoteKickReplyMessage_VoteKickReplyType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<VoteKickReplyMessage_VoteKickReplyType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickAck;
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedInvalid;
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedAlreadyVoted;
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MIN;
constexpr VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MAX;
constexpr int VoteKickReplyMessage::VoteKickReplyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool EndKickPetitionMessage_PetitionEndReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EndKickPetitionMessage_PetitionEndReason_strings[4] = {};

static const char EndKickPetitionMessage_PetitionEndReason_names[] =
  "petitionEndEnoughVotes"
  "petitionEndPlayerLeft"
  "petitionEndTimeout"
  "petitionEndTooFewPlayers";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EndKickPetitionMessage_PetitionEndReason_entries[] = {
  { {EndKickPetitionMessage_PetitionEndReason_names + 0, 22}, 0 },
  { {EndKickPetitionMessage_PetitionEndReason_names + 22, 21}, 2 },
  { {EndKickPetitionMessage_PetitionEndReason_names + 43, 18}, 3 },
  { {EndKickPetitionMessage_PetitionEndReason_names + 61, 24}, 1 },
};

static const int EndKickPetitionMessage_PetitionEndReason_entries_by_number[] = {
  0, // 0 -> petitionEndEnoughVotes
  3, // 1 -> petitionEndTooFewPlayers
  1, // 2 -> petitionEndPlayerLeft
  2, // 3 -> petitionEndTimeout
};

const std::string& EndKickPetitionMessage_PetitionEndReason_Name(
    EndKickPetitionMessage_PetitionEndReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EndKickPetitionMessage_PetitionEndReason_entries,
          EndKickPetitionMessage_PetitionEndReason_entries_by_number,
          4, EndKickPetitionMessage_PetitionEndReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EndKickPetitionMessage_PetitionEndReason_entries,
      EndKickPetitionMessage_PetitionEndReason_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EndKickPetitionMessage_PetitionEndReason_strings[idx].get();
}
bool EndKickPetitionMessage_PetitionEndReason_Parse(
    const std::string& name, EndKickPetitionMessage_PetitionEndReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EndKickPetitionMessage_PetitionEndReason_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<EndKickPetitionMessage_PetitionEndReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndEnoughVotes;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTooFewPlayers;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndPlayerLeft;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTimeout;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MIN;
constexpr EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MAX;
constexpr int EndKickPetitionMessage::PetitionEndReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StatisticsMessage_StatisticsData_StatisticsType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StatisticsMessage_StatisticsData_StatisticsType_strings[1] = {};

static const char StatisticsMessage_StatisticsData_StatisticsType_names[] =
  "statNumberOfPlayers";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StatisticsMessage_StatisticsData_StatisticsType_entries[] = {
  { {StatisticsMessage_StatisticsData_StatisticsType_names + 0, 19}, 1 },
};

static const int StatisticsMessage_StatisticsData_StatisticsType_entries_by_number[] = {
  0, // 1 -> statNumberOfPlayers
};

const std::string& StatisticsMessage_StatisticsData_StatisticsType_Name(
    StatisticsMessage_StatisticsData_StatisticsType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StatisticsMessage_StatisticsData_StatisticsType_entries,
          StatisticsMessage_StatisticsData_StatisticsType_entries_by_number,
          1, StatisticsMessage_StatisticsData_StatisticsType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StatisticsMessage_StatisticsData_StatisticsType_entries,
      StatisticsMessage_StatisticsData_StatisticsType_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StatisticsMessage_StatisticsData_StatisticsType_strings[idx].get();
}
bool StatisticsMessage_StatisticsData_StatisticsType_Parse(
    const std::string& name, StatisticsMessage_StatisticsData_StatisticsType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StatisticsMessage_StatisticsData_StatisticsType_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<StatisticsMessage_StatisticsData_StatisticsType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::statNumberOfPlayers;
constexpr StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MIN;
constexpr StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MAX;
constexpr int StatisticsMessage_StatisticsData::StatisticsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChatMessage_ChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChatMessage_ChatType_strings[4] = {};

static const char ChatMessage_ChatType_names[] =
  "chatTypeBot"
  "chatTypeBroadcast"
  "chatTypePrivate"
  "chatTypeStandard";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChatMessage_ChatType_entries[] = {
  { {ChatMessage_ChatType_names + 0, 11}, 1 },
  { {ChatMessage_ChatType_names + 11, 17}, 2 },
  { {ChatMessage_ChatType_names + 28, 15}, 3 },
  { {ChatMessage_ChatType_names + 43, 16}, 0 },
};

static const int ChatMessage_ChatType_entries_by_number[] = {
  3, // 0 -> chatTypeStandard
  0, // 1 -> chatTypeBot
  1, // 2 -> chatTypeBroadcast
  2, // 3 -> chatTypePrivate
};

const std::string& ChatMessage_ChatType_Name(
    ChatMessage_ChatType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChatMessage_ChatType_entries,
          ChatMessage_ChatType_entries_by_number,
          4, ChatMessage_ChatType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChatMessage_ChatType_entries,
      ChatMessage_ChatType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChatMessage_ChatType_strings[idx].get();
}
bool ChatMessage_ChatType_Parse(
    const std::string& name, ChatMessage_ChatType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChatMessage_ChatType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChatMessage_ChatType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChatMessage_ChatType ChatMessage::chatTypeStandard;
constexpr ChatMessage_ChatType ChatMessage::chatTypeBot;
constexpr ChatMessage_ChatType ChatMessage::chatTypeBroadcast;
constexpr ChatMessage_ChatType ChatMessage::chatTypePrivate;
constexpr ChatMessage_ChatType ChatMessage::ChatType_MIN;
constexpr ChatMessage_ChatType ChatMessage::ChatType_MAX;
constexpr int ChatMessage::ChatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TimeoutWarningMessage_TimeoutReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TimeoutWarningMessage_TimeoutReason_strings[3] = {};

static const char TimeoutWarningMessage_TimeoutReason_names[] =
  "timeoutInactiveGame"
  "timeoutKickAfterAutofold"
  "timeoutNoDataReceived";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TimeoutWarningMessage_TimeoutReason_entries[] = {
  { {TimeoutWarningMessage_TimeoutReason_names + 0, 19}, 1 },
  { {TimeoutWarningMessage_TimeoutReason_names + 19, 24}, 2 },
  { {TimeoutWarningMessage_TimeoutReason_names + 43, 21}, 0 },
};

static const int TimeoutWarningMessage_TimeoutReason_entries_by_number[] = {
  2, // 0 -> timeoutNoDataReceived
  0, // 1 -> timeoutInactiveGame
  1, // 2 -> timeoutKickAfterAutofold
};

const std::string& TimeoutWarningMessage_TimeoutReason_Name(
    TimeoutWarningMessage_TimeoutReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TimeoutWarningMessage_TimeoutReason_entries,
          TimeoutWarningMessage_TimeoutReason_entries_by_number,
          3, TimeoutWarningMessage_TimeoutReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TimeoutWarningMessage_TimeoutReason_entries,
      TimeoutWarningMessage_TimeoutReason_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TimeoutWarningMessage_TimeoutReason_strings[idx].get();
}
bool TimeoutWarningMessage_TimeoutReason_Parse(
    const std::string& name, TimeoutWarningMessage_TimeoutReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TimeoutWarningMessage_TimeoutReason_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TimeoutWarningMessage_TimeoutReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutNoDataReceived;
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutInactiveGame;
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutKickAfterAutofold;
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MIN;
constexpr TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MAX;
constexpr int TimeoutWarningMessage::TimeoutReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ReportAvatarAckMessage_ReportAvatarResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ReportAvatarAckMessage_ReportAvatarResult_strings[3] = {};

static const char ReportAvatarAckMessage_ReportAvatarResult_names[] =
  "avatarReportAccepted"
  "avatarReportDuplicate"
  "avatarReportInvalid";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ReportAvatarAckMessage_ReportAvatarResult_entries[] = {
  { {ReportAvatarAckMessage_ReportAvatarResult_names + 0, 20}, 0 },
  { {ReportAvatarAckMessage_ReportAvatarResult_names + 20, 21}, 1 },
  { {ReportAvatarAckMessage_ReportAvatarResult_names + 41, 19}, 2 },
};

static const int ReportAvatarAckMessage_ReportAvatarResult_entries_by_number[] = {
  0, // 0 -> avatarReportAccepted
  1, // 1 -> avatarReportDuplicate
  2, // 2 -> avatarReportInvalid
};

const std::string& ReportAvatarAckMessage_ReportAvatarResult_Name(
    ReportAvatarAckMessage_ReportAvatarResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ReportAvatarAckMessage_ReportAvatarResult_entries,
          ReportAvatarAckMessage_ReportAvatarResult_entries_by_number,
          3, ReportAvatarAckMessage_ReportAvatarResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ReportAvatarAckMessage_ReportAvatarResult_entries,
      ReportAvatarAckMessage_ReportAvatarResult_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ReportAvatarAckMessage_ReportAvatarResult_strings[idx].get();
}
bool ReportAvatarAckMessage_ReportAvatarResult_Parse(
    const std::string& name, ReportAvatarAckMessage_ReportAvatarResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ReportAvatarAckMessage_ReportAvatarResult_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ReportAvatarAckMessage_ReportAvatarResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportAccepted;
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportDuplicate;
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportInvalid;
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MIN;
constexpr ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MAX;
constexpr int ReportAvatarAckMessage::ReportAvatarResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ReportGameAckMessage_ReportGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ReportGameAckMessage_ReportGameResult_strings[3] = {};

static const char ReportGameAckMessage_ReportGameResult_names[] =
  "gameReportAccepted"
  "gameReportDuplicate"
  "gameReportInvalid";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ReportGameAckMessage_ReportGameResult_entries[] = {
  { {ReportGameAckMessage_ReportGameResult_names + 0, 18}, 0 },
  { {ReportGameAckMessage_ReportGameResult_names + 18, 19}, 1 },
  { {ReportGameAckMessage_ReportGameResult_names + 37, 17}, 2 },
};

static const int ReportGameAckMessage_ReportGameResult_entries_by_number[] = {
  0, // 0 -> gameReportAccepted
  1, // 1 -> gameReportDuplicate
  2, // 2 -> gameReportInvalid
};

const std::string& ReportGameAckMessage_ReportGameResult_Name(
    ReportGameAckMessage_ReportGameResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ReportGameAckMessage_ReportGameResult_entries,
          ReportGameAckMessage_ReportGameResult_entries_by_number,
          3, ReportGameAckMessage_ReportGameResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ReportGameAckMessage_ReportGameResult_entries,
      ReportGameAckMessage_ReportGameResult_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ReportGameAckMessage_ReportGameResult_strings[idx].get();
}
bool ReportGameAckMessage_ReportGameResult_Parse(
    const std::string& name, ReportGameAckMessage_ReportGameResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ReportGameAckMessage_ReportGameResult_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ReportGameAckMessage_ReportGameResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportAccepted;
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportDuplicate;
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportInvalid;
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MIN;
constexpr ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MAX;
constexpr int ReportGameAckMessage::ReportGameResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ErrorMessage_ErrorReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ErrorMessage_ErrorReason_strings[15] = {};

static const char ErrorMessage_ErrorReason_names[] =
  "avatarTooLarge"
  "bannedFromServer"
  "blockedByServer"
  "custReserved"
  "initAuthFailure"
  "initBlocked"
  "initInvalidPlayerName"
  "initPlayerNameInUse"
  "initServerFull"
  "initServerMaintenance"
  "initVersionNotSupported"
  "invalidPacket"
  "invalidState"
  "kickedFromServer"
  "sessionTimeout";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ErrorMessage_ErrorReason_entries[] = {
  { {ErrorMessage_ErrorReason_names + 0, 14}, 8 },
  { {ErrorMessage_ErrorReason_names + 14, 16}, 12 },
  { {ErrorMessage_ErrorReason_names + 30, 15}, 13 },
  { {ErrorMessage_ErrorReason_names + 45, 12}, 0 },
  { {ErrorMessage_ErrorReason_names + 57, 15}, 3 },
  { {ErrorMessage_ErrorReason_names + 72, 11}, 7 },
  { {ErrorMessage_ErrorReason_names + 83, 21}, 5 },
  { {ErrorMessage_ErrorReason_names + 104, 19}, 4 },
  { {ErrorMessage_ErrorReason_names + 123, 14}, 2 },
  { {ErrorMessage_ErrorReason_names + 137, 21}, 6 },
  { {ErrorMessage_ErrorReason_names + 158, 23}, 1 },
  { {ErrorMessage_ErrorReason_names + 181, 13}, 9 },
  { {ErrorMessage_ErrorReason_names + 194, 12}, 10 },
  { {ErrorMessage_ErrorReason_names + 206, 16}, 11 },
  { {ErrorMessage_ErrorReason_names + 222, 14}, 14 },
};

static const int ErrorMessage_ErrorReason_entries_by_number[] = {
  3, // 0 -> custReserved
  10, // 1 -> initVersionNotSupported
  8, // 2 -> initServerFull
  4, // 3 -> initAuthFailure
  7, // 4 -> initPlayerNameInUse
  6, // 5 -> initInvalidPlayerName
  9, // 6 -> initServerMaintenance
  5, // 7 -> initBlocked
  0, // 8 -> avatarTooLarge
  11, // 9 -> invalidPacket
  12, // 10 -> invalidState
  13, // 11 -> kickedFromServer
  1, // 12 -> bannedFromServer
  2, // 13 -> blockedByServer
  14, // 14 -> sessionTimeout
};

const std::string& ErrorMessage_ErrorReason_Name(
    ErrorMessage_ErrorReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ErrorMessage_ErrorReason_entries,
          ErrorMessage_ErrorReason_entries_by_number,
          15, ErrorMessage_ErrorReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ErrorMessage_ErrorReason_entries,
      ErrorMessage_ErrorReason_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ErrorMessage_ErrorReason_strings[idx].get();
}
bool ErrorMessage_ErrorReason_Parse(
    const std::string& name, ErrorMessage_ErrorReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ErrorMessage_ErrorReason_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<ErrorMessage_ErrorReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ErrorMessage_ErrorReason ErrorMessage::custReserved;
constexpr ErrorMessage_ErrorReason ErrorMessage::initVersionNotSupported;
constexpr ErrorMessage_ErrorReason ErrorMessage::initServerFull;
constexpr ErrorMessage_ErrorReason ErrorMessage::initAuthFailure;
constexpr ErrorMessage_ErrorReason ErrorMessage::initPlayerNameInUse;
constexpr ErrorMessage_ErrorReason ErrorMessage::initInvalidPlayerName;
constexpr ErrorMessage_ErrorReason ErrorMessage::initServerMaintenance;
constexpr ErrorMessage_ErrorReason ErrorMessage::initBlocked;
constexpr ErrorMessage_ErrorReason ErrorMessage::avatarTooLarge;
constexpr ErrorMessage_ErrorReason ErrorMessage::invalidPacket;
constexpr ErrorMessage_ErrorReason ErrorMessage::invalidState;
constexpr ErrorMessage_ErrorReason ErrorMessage::kickedFromServer;
constexpr ErrorMessage_ErrorReason ErrorMessage::bannedFromServer;
constexpr ErrorMessage_ErrorReason ErrorMessage::blockedByServer;
constexpr ErrorMessage_ErrorReason ErrorMessage::sessionTimeout;
constexpr ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MIN;
constexpr ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MAX;
constexpr int ErrorMessage::ErrorReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AdminRemoveGameAckMessage_AdminRemoveGameResult_strings[2] = {};

static const char AdminRemoveGameAckMessage_AdminRemoveGameResult_names[] =
  "gameRemoveAccepted"
  "gameRemoveInvalid";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AdminRemoveGameAckMessage_AdminRemoveGameResult_entries[] = {
  { {AdminRemoveGameAckMessage_AdminRemoveGameResult_names + 0, 18}, 0 },
  { {AdminRemoveGameAckMessage_AdminRemoveGameResult_names + 18, 17}, 1 },
};

static const int AdminRemoveGameAckMessage_AdminRemoveGameResult_entries_by_number[] = {
  0, // 0 -> gameRemoveAccepted
  1, // 1 -> gameRemoveInvalid
};

const std::string& AdminRemoveGameAckMessage_AdminRemoveGameResult_Name(
    AdminRemoveGameAckMessage_AdminRemoveGameResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AdminRemoveGameAckMessage_AdminRemoveGameResult_entries,
          AdminRemoveGameAckMessage_AdminRemoveGameResult_entries_by_number,
          2, AdminRemoveGameAckMessage_AdminRemoveGameResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AdminRemoveGameAckMessage_AdminRemoveGameResult_entries,
      AdminRemoveGameAckMessage_AdminRemoveGameResult_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AdminRemoveGameAckMessage_AdminRemoveGameResult_strings[idx].get();
}
bool AdminRemoveGameAckMessage_AdminRemoveGameResult_Parse(
    const std::string& name, AdminRemoveGameAckMessage_AdminRemoveGameResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AdminRemoveGameAckMessage_AdminRemoveGameResult_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<AdminRemoveGameAckMessage_AdminRemoveGameResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::gameRemoveAccepted;
constexpr AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::gameRemoveInvalid;
constexpr AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::AdminRemoveGameResult_MIN;
constexpr AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::AdminRemoveGameResult_MAX;
constexpr int AdminRemoveGameAckMessage::AdminRemoveGameResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AdminBanPlayerAckMessage_AdminBanPlayerResult_strings[5] = {};

static const char AdminBanPlayerAckMessage_AdminBanPlayerResult_names[] =
  "banPlayerAccepted"
  "banPlayerDBError"
  "banPlayerInvalid"
  "banPlayerNoDB"
  "banPlayerPending";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AdminBanPlayerAckMessage_AdminBanPlayerResult_entries[] = {
  { {AdminBanPlayerAckMessage_AdminBanPlayerResult_names + 0, 17}, 0 },
  { {AdminBanPlayerAckMessage_AdminBanPlayerResult_names + 17, 16}, 3 },
  { {AdminBanPlayerAckMessage_AdminBanPlayerResult_names + 33, 16}, 4 },
  { {AdminBanPlayerAckMessage_AdminBanPlayerResult_names + 49, 13}, 2 },
  { {AdminBanPlayerAckMessage_AdminBanPlayerResult_names + 62, 16}, 1 },
};

static const int AdminBanPlayerAckMessage_AdminBanPlayerResult_entries_by_number[] = {
  0, // 0 -> banPlayerAccepted
  4, // 1 -> banPlayerPending
  3, // 2 -> banPlayerNoDB
  1, // 3 -> banPlayerDBError
  2, // 4 -> banPlayerInvalid
};

const std::string& AdminBanPlayerAckMessage_AdminBanPlayerResult_Name(
    AdminBanPlayerAckMessage_AdminBanPlayerResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AdminBanPlayerAckMessage_AdminBanPlayerResult_entries,
          AdminBanPlayerAckMessage_AdminBanPlayerResult_entries_by_number,
          5, AdminBanPlayerAckMessage_AdminBanPlayerResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AdminBanPlayerAckMessage_AdminBanPlayerResult_entries,
      AdminBanPlayerAckMessage_AdminBanPlayerResult_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AdminBanPlayerAckMessage_AdminBanPlayerResult_strings[idx].get();
}
bool AdminBanPlayerAckMessage_AdminBanPlayerResult_Parse(
    const std::string& name, AdminBanPlayerAckMessage_AdminBanPlayerResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AdminBanPlayerAckMessage_AdminBanPlayerResult_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AdminBanPlayerAckMessage_AdminBanPlayerResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerAccepted;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerPending;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerNoDB;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerDBError;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerInvalid;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::AdminBanPlayerResult_MIN;
constexpr AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::AdminBanPlayerResult_MAX;
constexpr int AdminBanPlayerAckMessage::AdminBanPlayerResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AuthMessage_AuthMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 1024:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AuthMessage_AuthMessageType_strings[5] = {};

static const char AuthMessage_AuthMessageType_names[] =
  "Type_AuthClientRequestMessage"
  "Type_AuthClientResponseMessage"
  "Type_AuthServerChallengeMessage"
  "Type_AuthServerVerificationMessage"
  "Type_ErrorMessage";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AuthMessage_AuthMessageType_entries[] = {
  { {AuthMessage_AuthMessageType_names + 0, 29}, 1 },
  { {AuthMessage_AuthMessageType_names + 29, 30}, 3 },
  { {AuthMessage_AuthMessageType_names + 59, 31}, 2 },
  { {AuthMessage_AuthMessageType_names + 90, 34}, 4 },
  { {AuthMessage_AuthMessageType_names + 124, 17}, 1024 },
};

static const int AuthMessage_AuthMessageType_entries_by_number[] = {
  0, // 1 -> Type_AuthClientRequestMessage
  2, // 2 -> Type_AuthServerChallengeMessage
  1, // 3 -> Type_AuthClientResponseMessage
  3, // 4 -> Type_AuthServerVerificationMessage
  4, // 1024 -> Type_ErrorMessage
};

const std::string& AuthMessage_AuthMessageType_Name(
    AuthMessage_AuthMessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AuthMessage_AuthMessageType_entries,
          AuthMessage_AuthMessageType_entries_by_number,
          5, AuthMessage_AuthMessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AuthMessage_AuthMessageType_entries,
      AuthMessage_AuthMessageType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AuthMessage_AuthMessageType_strings[idx].get();
}
bool AuthMessage_AuthMessageType_Parse(
    const std::string& name, AuthMessage_AuthMessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AuthMessage_AuthMessageType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AuthMessage_AuthMessageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AuthMessage_AuthMessageType AuthMessage::Type_AuthClientRequestMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::Type_AuthServerChallengeMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::Type_AuthClientResponseMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::Type_AuthServerVerificationMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::Type_ErrorMessage;
constexpr AuthMessage_AuthMessageType AuthMessage::AuthMessageType_MIN;
constexpr AuthMessage_AuthMessageType AuthMessage::AuthMessageType_MAX;
constexpr int AuthMessage::AuthMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool LobbyMessage_LobbyMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 1024:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LobbyMessage_LobbyMessageType_strings[43] = {};

static const char LobbyMessage_LobbyMessageType_names[] =
  "Type_AdminBanPlayerAckMessage"
  "Type_AdminBanPlayerMessage"
  "Type_AdminRemoveGameAckMessage"
  "Type_AdminRemoveGameMessage"
  "Type_AvatarDataMessage"
  "Type_AvatarEndMessage"
  "Type_AvatarHeaderMessage"
  "Type_AvatarRequestMessage"
  "Type_ChatMessage"
  "Type_ChatRejectMessage"
  "Type_ChatRequestMessage"
  "Type_CreateGameFailedMessage"
  "Type_CreateGameMessage"
  "Type_DialogMessage"
  "Type_ErrorMessage"
  "Type_GameListAdminChangedMessage"
  "Type_GameListNewMessage"
  "Type_GameListPlayerJoinedMessage"
  "Type_GameListPlayerLeftMessage"
  "Type_GameListSpectatorJoinedMessage"
  "Type_GameListSpectatorLeftMessage"
  "Type_GameListUpdateMessage"
  "Type_InitDoneMessage"
  "Type_InviteNotifyMessage"
  "Type_JoinGameAckMessage"
  "Type_JoinGameFailedMessage"
  "Type_JoinGameMessage"
  "Type_PlayerInfoReplyMessage"
  "Type_PlayerInfoRequestMessage"
  "Type_PlayerListMessage"
  "Type_RejectGameInvitationMessage"
  "Type_RejectInvNotifyMessage"
  "Type_RejoinGameMessage"
  "Type_ReportAvatarAckMessage"
  "Type_ReportAvatarMessage"
  "Type_ReportGameAckMessage"
  "Type_ReportGameMessage"
  "Type_ResetTimeoutMessage"
  "Type_StatisticsMessage"
  "Type_SubscriptionReplyMessage"
  "Type_SubscriptionRequestMessage"
  "Type_TimeoutWarningMessage"
  "Type_UnknownAvatarMessage";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LobbyMessage_LobbyMessageType_entries[] = {
  { {LobbyMessage_LobbyMessageType_names + 0, 29}, 42 },
  { {LobbyMessage_LobbyMessageType_names + 29, 26}, 41 },
  { {LobbyMessage_LobbyMessageType_names + 55, 30}, 40 },
  { {LobbyMessage_LobbyMessageType_names + 85, 27}, 39 },
  { {LobbyMessage_LobbyMessageType_names + 112, 22}, 4 },
  { {LobbyMessage_LobbyMessageType_names + 134, 21}, 5 },
  { {LobbyMessage_LobbyMessageType_names + 155, 24}, 3 },
  { {LobbyMessage_LobbyMessageType_names + 179, 25}, 2 },
  { {LobbyMessage_LobbyMessageType_names + 204, 16}, 30 },
  { {LobbyMessage_LobbyMessageType_names + 220, 22}, 31 },
  { {LobbyMessage_LobbyMessageType_names + 242, 23}, 29 },
  { {LobbyMessage_LobbyMessageType_names + 265, 28}, 20 },
  { {LobbyMessage_LobbyMessageType_names + 293, 22}, 19 },
  { {LobbyMessage_LobbyMessageType_names + 315, 18}, 32 },
  { {LobbyMessage_LobbyMessageType_names + 333, 17}, 1024 },
  { {LobbyMessage_LobbyMessageType_names + 350, 32}, 14 },
  { {LobbyMessage_LobbyMessageType_names + 382, 23}, 8 },
  { {LobbyMessage_LobbyMessageType_names + 405, 32}, 10 },
  { {LobbyMessage_LobbyMessageType_names + 437, 30}, 11 },
  { {LobbyMessage_LobbyMessageType_names + 467, 35}, 12 },
  { {LobbyMessage_LobbyMessageType_names + 502, 33}, 13 },
  { {LobbyMessage_LobbyMessageType_names + 535, 26}, 9 },
  { {LobbyMessage_LobbyMessageType_names + 561, 20}, 1 },
  { {LobbyMessage_LobbyMessageType_names + 581, 24}, 25 },
  { {LobbyMessage_LobbyMessageType_names + 605, 23}, 23 },
  { {LobbyMessage_LobbyMessageType_names + 628, 26}, 24 },
  { {LobbyMessage_LobbyMessageType_names + 654, 20}, 21 },
  { {LobbyMessage_LobbyMessageType_names + 674, 27}, 16 },
  { {LobbyMessage_LobbyMessageType_names + 701, 29}, 15 },
  { {LobbyMessage_LobbyMessageType_names + 730, 22}, 7 },
  { {LobbyMessage_LobbyMessageType_names + 752, 32}, 26 },
  { {LobbyMessage_LobbyMessageType_names + 784, 27}, 27 },
  { {LobbyMessage_LobbyMessageType_names + 811, 22}, 22 },
  { {LobbyMessage_LobbyMessageType_names + 833, 27}, 36 },
  { {LobbyMessage_LobbyMessageType_names + 860, 24}, 35 },
  { {LobbyMessage_LobbyMessageType_names + 884, 25}, 38 },
  { {LobbyMessage_LobbyMessageType_names + 909, 22}, 37 },
  { {LobbyMessage_LobbyMessageType_names + 931, 24}, 34 },
  { {LobbyMessage_LobbyMessageType_names + 955, 22}, 28 },
  { {LobbyMessage_LobbyMessageType_names + 977, 29}, 18 },
  { {LobbyMessage_LobbyMessageType_names + 1006, 31}, 17 },
  { {LobbyMessage_LobbyMessageType_names + 1037, 26}, 33 },
  { {LobbyMessage_LobbyMessageType_names + 1063, 25}, 6 },
};

static const int LobbyMessage_LobbyMessageType_entries_by_number[] = {
  22, // 1 -> Type_InitDoneMessage
  7, // 2 -> Type_AvatarRequestMessage
  6, // 3 -> Type_AvatarHeaderMessage
  4, // 4 -> Type_AvatarDataMessage
  5, // 5 -> Type_AvatarEndMessage
  42, // 6 -> Type_UnknownAvatarMessage
  29, // 7 -> Type_PlayerListMessage
  16, // 8 -> Type_GameListNewMessage
  21, // 9 -> Type_GameListUpdateMessage
  17, // 10 -> Type_GameListPlayerJoinedMessage
  18, // 11 -> Type_GameListPlayerLeftMessage
  19, // 12 -> Type_GameListSpectatorJoinedMessage
  20, // 13 -> Type_GameListSpectatorLeftMessage
  15, // 14 -> Type_GameListAdminChangedMessage
  28, // 15 -> Type_PlayerInfoRequestMessage
  27, // 16 -> Type_PlayerInfoReplyMessage
  40, // 17 -> Type_SubscriptionRequestMessage
  39, // 18 -> Type_SubscriptionReplyMessage
  12, // 19 -> Type_CreateGameMessage
  11, // 20 -> Type_CreateGameFailedMessage
  26, // 21 -> Type_JoinGameMessage
  32, // 22 -> Type_RejoinGameMessage
  24, // 23 -> Type_JoinGameAckMessage
  25, // 24 -> Type_JoinGameFailedMessage
  23, // 25 -> Type_InviteNotifyMessage
  30, // 26 -> Type_RejectGameInvitationMessage
  31, // 27 -> Type_RejectInvNotifyMessage
  38, // 28 -> Type_StatisticsMessage
  10, // 29 -> Type_ChatRequestMessage
  8, // 30 -> Type_ChatMessage
  9, // 31 -> Type_ChatRejectMessage
  13, // 32 -> Type_DialogMessage
  41, // 33 -> Type_TimeoutWarningMessage
  37, // 34 -> Type_ResetTimeoutMessage
  34, // 35 -> Type_ReportAvatarMessage
  33, // 36 -> Type_ReportAvatarAckMessage
  36, // 37 -> Type_ReportGameMessage
  35, // 38 -> Type_ReportGameAckMessage
  3, // 39 -> Type_AdminRemoveGameMessage
  2, // 40 -> Type_AdminRemoveGameAckMessage
  1, // 41 -> Type_AdminBanPlayerMessage
  0, // 42 -> Type_AdminBanPlayerAckMessage
  14, // 1024 -> Type_ErrorMessage
};

const std::string& LobbyMessage_LobbyMessageType_Name(
    LobbyMessage_LobbyMessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LobbyMessage_LobbyMessageType_entries,
          LobbyMessage_LobbyMessageType_entries_by_number,
          43, LobbyMessage_LobbyMessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LobbyMessage_LobbyMessageType_entries,
      LobbyMessage_LobbyMessageType_entries_by_number,
      43, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LobbyMessage_LobbyMessageType_strings[idx].get();
}
bool LobbyMessage_LobbyMessageType_Parse(
    const std::string& name, LobbyMessage_LobbyMessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LobbyMessage_LobbyMessageType_entries, 43, name, &int_value);
  if (success) {
    *value = static_cast<LobbyMessage_LobbyMessageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_InitDoneMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AvatarRequestMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AvatarHeaderMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AvatarDataMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AvatarEndMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_UnknownAvatarMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_PlayerListMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListNewMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListUpdateMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListPlayerJoinedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListPlayerLeftMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListSpectatorJoinedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListSpectatorLeftMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_GameListAdminChangedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_PlayerInfoRequestMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_PlayerInfoReplyMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_SubscriptionRequestMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_SubscriptionReplyMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_CreateGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_CreateGameFailedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_JoinGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_RejoinGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_JoinGameAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_JoinGameFailedMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_InviteNotifyMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_RejectGameInvitationMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_RejectInvNotifyMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_StatisticsMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ChatRequestMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ChatMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ChatRejectMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_DialogMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_TimeoutWarningMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ResetTimeoutMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ReportAvatarMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ReportAvatarAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ReportGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ReportGameAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AdminRemoveGameMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AdminRemoveGameAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AdminBanPlayerMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_AdminBanPlayerAckMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::Type_ErrorMessage;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::LobbyMessageType_MIN;
constexpr LobbyMessage_LobbyMessageType LobbyMessage::LobbyMessageType_MAX;
constexpr int LobbyMessage::LobbyMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GameManagementMessage_GameManagementMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 1024:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GameManagementMessage_GameManagementMessageType_strings[28] = {};

static const char GameManagementMessage_GameManagementMessageType_names[] =
  "Type_AskKickDeniedMessage"
  "Type_AskKickPlayerMessage"
  "Type_ChatMessage"
  "Type_ChatRejectMessage"
  "Type_ChatRequestMessage"
  "Type_EndKickPetitionMessage"
  "Type_EndOfGameMessage"
  "Type_ErrorMessage"
  "Type_GameAdminChangedMessage"
  "Type_GamePlayerJoinedMessage"
  "Type_GamePlayerLeftMessage"
  "Type_GameSpectatorJoinedMessage"
  "Type_GameSpectatorLeftMessage"
  "Type_GameStartInitialMessage"
  "Type_GameStartRejoinMessage"
  "Type_InvitePlayerToGameMessage"
  "Type_KickPetitionUpdateMessage"
  "Type_KickPlayerRequestMessage"
  "Type_LeaveGameRequestMessage"
  "Type_PlayerIdChangedMessage"
  "Type_RemovedFromGameMessage"
  "Type_ResetTimeoutMessage"
  "Type_StartEventAckMessage"
  "Type_StartEventMessage"
  "Type_StartKickPetitionMessage"
  "Type_TimeoutWarningMessage"
  "Type_VoteKickReplyMessage"
  "Type_VoteKickRequestMessage";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GameManagementMessage_GameManagementMessageType_entries[] = {
  { {GameManagementMessage_GameManagementMessageType_names + 0, 25}, 17 },
  { {GameManagementMessage_GameManagementMessageType_names + 25, 25}, 16 },
  { {GameManagementMessage_GameManagementMessageType_names + 50, 16}, 24 },
  { {GameManagementMessage_GameManagementMessageType_names + 66, 22}, 25 },
  { {GameManagementMessage_GameManagementMessageType_names + 88, 23}, 23 },
  { {GameManagementMessage_GameManagementMessageType_names + 111, 27}, 22 },
  { {GameManagementMessage_GameManagementMessageType_names + 138, 21}, 14 },
  { {GameManagementMessage_GameManagementMessageType_names + 159, 17}, 1024 },
  { {GameManagementMessage_GameManagementMessageType_names + 176, 28}, 5 },
  { {GameManagementMessage_GameManagementMessageType_names + 204, 28}, 1 },
  { {GameManagementMessage_GameManagementMessageType_names + 232, 26}, 2 },
  { {GameManagementMessage_GameManagementMessageType_names + 258, 31}, 3 },
  { {GameManagementMessage_GameManagementMessageType_names + 289, 29}, 4 },
  { {GameManagementMessage_GameManagementMessageType_names + 318, 28}, 12 },
  { {GameManagementMessage_GameManagementMessageType_names + 346, 27}, 13 },
  { {GameManagementMessage_GameManagementMessageType_names + 373, 30}, 9 },
  { {GameManagementMessage_GameManagementMessageType_names + 403, 30}, 21 },
  { {GameManagementMessage_GameManagementMessageType_names + 433, 29}, 7 },
  { {GameManagementMessage_GameManagementMessageType_names + 462, 28}, 8 },
  { {GameManagementMessage_GameManagementMessageType_names + 490, 27}, 15 },
  { {GameManagementMessage_GameManagementMessageType_names + 517, 27}, 6 },
  { {GameManagementMessage_GameManagementMessageType_names + 544, 24}, 27 },
  { {GameManagementMessage_GameManagementMessageType_names + 568, 25}, 11 },
  { {GameManagementMessage_GameManagementMessageType_names + 593, 22}, 10 },
  { {GameManagementMessage_GameManagementMessageType_names + 615, 29}, 18 },
  { {GameManagementMessage_GameManagementMessageType_names + 644, 26}, 26 },
  { {GameManagementMessage_GameManagementMessageType_names + 670, 25}, 20 },
  { {GameManagementMessage_GameManagementMessageType_names + 695, 27}, 19 },
};

static const int GameManagementMessage_GameManagementMessageType_entries_by_number[] = {
  9, // 1 -> Type_GamePlayerJoinedMessage
  10, // 2 -> Type_GamePlayerLeftMessage
  11, // 3 -> Type_GameSpectatorJoinedMessage
  12, // 4 -> Type_GameSpectatorLeftMessage
  8, // 5 -> Type_GameAdminChangedMessage
  20, // 6 -> Type_RemovedFromGameMessage
  17, // 7 -> Type_KickPlayerRequestMessage
  18, // 8 -> Type_LeaveGameRequestMessage
  15, // 9 -> Type_InvitePlayerToGameMessage
  23, // 10 -> Type_StartEventMessage
  22, // 11 -> Type_StartEventAckMessage
  13, // 12 -> Type_GameStartInitialMessage
  14, // 13 -> Type_GameStartRejoinMessage
  6, // 14 -> Type_EndOfGameMessage
  19, // 15 -> Type_PlayerIdChangedMessage
  1, // 16 -> Type_AskKickPlayerMessage
  0, // 17 -> Type_AskKickDeniedMessage
  24, // 18 -> Type_StartKickPetitionMessage
  27, // 19 -> Type_VoteKickRequestMessage
  26, // 20 -> Type_VoteKickReplyMessage
  16, // 21 -> Type_KickPetitionUpdateMessage
  5, // 22 -> Type_EndKickPetitionMessage
  4, // 23 -> Type_ChatRequestMessage
  2, // 24 -> Type_ChatMessage
  3, // 25 -> Type_ChatRejectMessage
  25, // 26 -> Type_TimeoutWarningMessage
  21, // 27 -> Type_ResetTimeoutMessage
  7, // 1024 -> Type_ErrorMessage
};

const std::string& GameManagementMessage_GameManagementMessageType_Name(
    GameManagementMessage_GameManagementMessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GameManagementMessage_GameManagementMessageType_entries,
          GameManagementMessage_GameManagementMessageType_entries_by_number,
          28, GameManagementMessage_GameManagementMessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GameManagementMessage_GameManagementMessageType_entries,
      GameManagementMessage_GameManagementMessageType_entries_by_number,
      28, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GameManagementMessage_GameManagementMessageType_strings[idx].get();
}
bool GameManagementMessage_GameManagementMessageType_Parse(
    const std::string& name, GameManagementMessage_GameManagementMessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GameManagementMessage_GameManagementMessageType_entries, 28, name, &int_value);
  if (success) {
    *value = static_cast<GameManagementMessage_GameManagementMessageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GamePlayerJoinedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GamePlayerLeftMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameSpectatorJoinedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameSpectatorLeftMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameAdminChangedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_RemovedFromGameMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_KickPlayerRequestMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_LeaveGameRequestMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_InvitePlayerToGameMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_StartEventMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_StartEventAckMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameStartInitialMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_GameStartRejoinMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_EndOfGameMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_PlayerIdChangedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_AskKickPlayerMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_AskKickDeniedMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_StartKickPetitionMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_VoteKickRequestMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_VoteKickReplyMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_KickPetitionUpdateMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_EndKickPetitionMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ChatRequestMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ChatMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ChatRejectMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_TimeoutWarningMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ResetTimeoutMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::Type_ErrorMessage;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::GameManagementMessageType_MIN;
constexpr GameManagementMessage_GameManagementMessageType GameManagementMessage::GameManagementMessageType_MAX;
constexpr int GameManagementMessage::GameManagementMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GameEngineMessage_GameEngineMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GameEngineMessage_GameEngineMessageType_strings[13] = {};

static const char GameEngineMessage_GameEngineMessageType_names[] =
  "Type_AfterHandShowCardsMessage"
  "Type_AllInShowCardsMessage"
  "Type_DealFlopCardsMessage"
  "Type_DealRiverCardMessage"
  "Type_DealTurnCardMessage"
  "Type_EndOfHandHideCardsMessage"
  "Type_EndOfHandShowCardsMessage"
  "Type_HandStartMessage"
  "Type_MyActionRequestMessage"
  "Type_PlayersActionDoneMessage"
  "Type_PlayersTurnMessage"
  "Type_ShowMyCardsRequestMessage"
  "Type_YourActionRejectedMessage";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GameEngineMessage_GameEngineMessageType_entries[] = {
  { {GameEngineMessage_GameEngineMessageType_names + 0, 30}, 13 },
  { {GameEngineMessage_GameEngineMessageType_names + 30, 26}, 9 },
  { {GameEngineMessage_GameEngineMessageType_names + 56, 25}, 6 },
  { {GameEngineMessage_GameEngineMessageType_names + 81, 25}, 8 },
  { {GameEngineMessage_GameEngineMessageType_names + 106, 24}, 7 },
  { {GameEngineMessage_GameEngineMessageType_names + 130, 30}, 11 },
  { {GameEngineMessage_GameEngineMessageType_names + 160, 30}, 10 },
  { {GameEngineMessage_GameEngineMessageType_names + 190, 21}, 1 },
  { {GameEngineMessage_GameEngineMessageType_names + 211, 27}, 3 },
  { {GameEngineMessage_GameEngineMessageType_names + 238, 29}, 5 },
  { {GameEngineMessage_GameEngineMessageType_names + 267, 23}, 2 },
  { {GameEngineMessage_GameEngineMessageType_names + 290, 30}, 12 },
  { {GameEngineMessage_GameEngineMessageType_names + 320, 30}, 4 },
};

static const int GameEngineMessage_GameEngineMessageType_entries_by_number[] = {
  7, // 1 -> Type_HandStartMessage
  10, // 2 -> Type_PlayersTurnMessage
  8, // 3 -> Type_MyActionRequestMessage
  12, // 4 -> Type_YourActionRejectedMessage
  9, // 5 -> Type_PlayersActionDoneMessage
  2, // 6 -> Type_DealFlopCardsMessage
  4, // 7 -> Type_DealTurnCardMessage
  3, // 8 -> Type_DealRiverCardMessage
  1, // 9 -> Type_AllInShowCardsMessage
  6, // 10 -> Type_EndOfHandShowCardsMessage
  5, // 11 -> Type_EndOfHandHideCardsMessage
  11, // 12 -> Type_ShowMyCardsRequestMessage
  0, // 13 -> Type_AfterHandShowCardsMessage
};

const std::string& GameEngineMessage_GameEngineMessageType_Name(
    GameEngineMessage_GameEngineMessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GameEngineMessage_GameEngineMessageType_entries,
          GameEngineMessage_GameEngineMessageType_entries_by_number,
          13, GameEngineMessage_GameEngineMessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GameEngineMessage_GameEngineMessageType_entries,
      GameEngineMessage_GameEngineMessageType_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GameEngineMessage_GameEngineMessageType_strings[idx].get();
}
bool GameEngineMessage_GameEngineMessageType_Parse(
    const std::string& name, GameEngineMessage_GameEngineMessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GameEngineMessage_GameEngineMessageType_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<GameEngineMessage_GameEngineMessageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_HandStartMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_PlayersTurnMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_MyActionRequestMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_YourActionRejectedMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_PlayersActionDoneMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_DealFlopCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_DealTurnCardMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_DealRiverCardMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_AllInShowCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_EndOfHandShowCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_EndOfHandHideCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_ShowMyCardsRequestMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::Type_AfterHandShowCardsMessage;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::GameEngineMessageType_MIN;
constexpr GameEngineMessage_GameEngineMessageType GameEngineMessage::GameEngineMessageType_MAX;
constexpr int GameEngineMessage::GameEngineMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GameMessage_GameMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GameMessage_GameMessageType_strings[2] = {};

static const char GameMessage_GameMessageType_names[] =
  "Type_GameEngineMessage"
  "Type_GameManagementMessage";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GameMessage_GameMessageType_entries[] = {
  { {GameMessage_GameMessageType_names + 0, 22}, 2 },
  { {GameMessage_GameMessageType_names + 22, 26}, 1 },
};

static const int GameMessage_GameMessageType_entries_by_number[] = {
  1, // 1 -> Type_GameManagementMessage
  0, // 2 -> Type_GameEngineMessage
};

const std::string& GameMessage_GameMessageType_Name(
    GameMessage_GameMessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GameMessage_GameMessageType_entries,
          GameMessage_GameMessageType_entries_by_number,
          2, GameMessage_GameMessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GameMessage_GameMessageType_entries,
      GameMessage_GameMessageType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GameMessage_GameMessageType_strings[idx].get();
}
bool GameMessage_GameMessageType_Parse(
    const std::string& name, GameMessage_GameMessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GameMessage_GameMessageType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<GameMessage_GameMessageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameMessage_GameMessageType GameMessage::Type_GameManagementMessage;
constexpr GameMessage_GameMessageType GameMessage::Type_GameEngineMessage;
constexpr GameMessage_GameMessageType GameMessage::GameMessageType_MIN;
constexpr GameMessage_GameMessageType GameMessage::GameMessageType_MAX;
constexpr int GameMessage::GameMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PokerTHMessage_PokerTHMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PokerTHMessage_PokerTHMessageType_strings[4] = {};

static const char PokerTHMessage_PokerTHMessageType_names[] =
  "Type_AnnounceMessage"
  "Type_AuthMessage"
  "Type_GameMessage"
  "Type_LobbyMessage";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PokerTHMessage_PokerTHMessageType_entries[] = {
  { {PokerTHMessage_PokerTHMessageType_names + 0, 20}, 1 },
  { {PokerTHMessage_PokerTHMessageType_names + 20, 16}, 2 },
  { {PokerTHMessage_PokerTHMessageType_names + 36, 16}, 4 },
  { {PokerTHMessage_PokerTHMessageType_names + 52, 17}, 3 },
};

static const int PokerTHMessage_PokerTHMessageType_entries_by_number[] = {
  0, // 1 -> Type_AnnounceMessage
  1, // 2 -> Type_AuthMessage
  3, // 3 -> Type_LobbyMessage
  2, // 4 -> Type_GameMessage
};

const std::string& PokerTHMessage_PokerTHMessageType_Name(
    PokerTHMessage_PokerTHMessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PokerTHMessage_PokerTHMessageType_entries,
          PokerTHMessage_PokerTHMessageType_entries_by_number,
          4, PokerTHMessage_PokerTHMessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PokerTHMessage_PokerTHMessageType_entries,
      PokerTHMessage_PokerTHMessageType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PokerTHMessage_PokerTHMessageType_strings[idx].get();
}
bool PokerTHMessage_PokerTHMessageType_Parse(
    const std::string& name, PokerTHMessage_PokerTHMessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PokerTHMessage_PokerTHMessageType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PokerTHMessage_PokerTHMessageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AnnounceMessage;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthMessage;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_LobbyMessage;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameMessage;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MIN;
constexpr PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MAX;
constexpr int PokerTHMessage::PokerTHMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool NetGameMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetGameMode_strings[3] = {};

static const char NetGameMode_names[] =
  "netGameClosed"
  "netGameCreated"
  "netGameStarted";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetGameMode_entries[] = {
  { {NetGameMode_names + 0, 13}, 3 },
  { {NetGameMode_names + 13, 14}, 1 },
  { {NetGameMode_names + 27, 14}, 2 },
};

static const int NetGameMode_entries_by_number[] = {
  1, // 1 -> netGameCreated
  2, // 2 -> netGameStarted
  0, // 3 -> netGameClosed
};

const std::string& NetGameMode_Name(
    NetGameMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetGameMode_entries,
          NetGameMode_entries_by_number,
          3, NetGameMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetGameMode_entries,
      NetGameMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetGameMode_strings[idx].get();
}
bool NetGameMode_Parse(
    const std::string& name, NetGameMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetGameMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<NetGameMode>(int_value);
  }
  return success;
}
bool NetGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetGameState_strings[6] = {};

static const char NetGameState_names[] =
  "netStateFlop"
  "netStatePreflop"
  "netStatePreflopBigBlind"
  "netStatePreflopSmallBlind"
  "netStateRiver"
  "netStateTurn";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetGameState_entries[] = {
  { {NetGameState_names + 0, 12}, 1 },
  { {NetGameState_names + 12, 15}, 0 },
  { {NetGameState_names + 27, 23}, 5 },
  { {NetGameState_names + 50, 25}, 4 },
  { {NetGameState_names + 75, 13}, 3 },
  { {NetGameState_names + 88, 12}, 2 },
};

static const int NetGameState_entries_by_number[] = {
  1, // 0 -> netStatePreflop
  0, // 1 -> netStateFlop
  5, // 2 -> netStateTurn
  4, // 3 -> netStateRiver
  3, // 4 -> netStatePreflopSmallBlind
  2, // 5 -> netStatePreflopBigBlind
};

const std::string& NetGameState_Name(
    NetGameState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetGameState_entries,
          NetGameState_entries_by_number,
          6, NetGameState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetGameState_entries,
      NetGameState_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetGameState_strings[idx].get();
}
bool NetGameState_Parse(
    const std::string& name, NetGameState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetGameState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<NetGameState>(int_value);
  }
  return success;
}
bool NetPlayerAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetPlayerAction_strings[7] = {};

static const char NetPlayerAction_names[] =
  "netActionAllIn"
  "netActionBet"
  "netActionCall"
  "netActionCheck"
  "netActionFold"
  "netActionNone"
  "netActionRaise";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetPlayerAction_entries[] = {
  { {NetPlayerAction_names + 0, 14}, 6 },
  { {NetPlayerAction_names + 14, 12}, 4 },
  { {NetPlayerAction_names + 26, 13}, 3 },
  { {NetPlayerAction_names + 39, 14}, 2 },
  { {NetPlayerAction_names + 53, 13}, 1 },
  { {NetPlayerAction_names + 66, 13}, 0 },
  { {NetPlayerAction_names + 79, 14}, 5 },
};

static const int NetPlayerAction_entries_by_number[] = {
  5, // 0 -> netActionNone
  4, // 1 -> netActionFold
  3, // 2 -> netActionCheck
  2, // 3 -> netActionCall
  1, // 4 -> netActionBet
  6, // 5 -> netActionRaise
  0, // 6 -> netActionAllIn
};

const std::string& NetPlayerAction_Name(
    NetPlayerAction value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetPlayerAction_entries,
          NetPlayerAction_entries_by_number,
          7, NetPlayerAction_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetPlayerAction_entries,
      NetPlayerAction_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetPlayerAction_strings[idx].get();
}
bool NetPlayerAction_Parse(
    const std::string& name, NetPlayerAction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetPlayerAction_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<NetPlayerAction>(int_value);
  }
  return success;
}
bool NetPlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetPlayerState_strings[3] = {};

static const char NetPlayerState_names[] =
  "netPlayerStateNoMoney"
  "netPlayerStateNormal"
  "netPlayerStateSessionInactive";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetPlayerState_entries[] = {
  { {NetPlayerState_names + 0, 21}, 2 },
  { {NetPlayerState_names + 21, 20}, 0 },
  { {NetPlayerState_names + 41, 29}, 1 },
};

static const int NetPlayerState_entries_by_number[] = {
  1, // 0 -> netPlayerStateNormal
  2, // 1 -> netPlayerStateSessionInactive
  0, // 2 -> netPlayerStateNoMoney
};

const std::string& NetPlayerState_Name(
    NetPlayerState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetPlayerState_entries,
          NetPlayerState_entries_by_number,
          3, NetPlayerState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetPlayerState_entries,
      NetPlayerState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetPlayerState_strings[idx].get();
}
bool NetPlayerState_Parse(
    const std::string& name, NetPlayerState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetPlayerState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<NetPlayerState>(int_value);
  }
  return success;
}
bool NetPlayerInfoRights_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetPlayerInfoRights_strings[3] = {};

static const char NetPlayerInfoRights_names[] =
  "netPlayerRightsAdmin"
  "netPlayerRightsGuest"
  "netPlayerRightsNormal";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetPlayerInfoRights_entries[] = {
  { {NetPlayerInfoRights_names + 0, 20}, 3 },
  { {NetPlayerInfoRights_names + 20, 20}, 1 },
  { {NetPlayerInfoRights_names + 40, 21}, 2 },
};

static const int NetPlayerInfoRights_entries_by_number[] = {
  1, // 1 -> netPlayerRightsGuest
  2, // 2 -> netPlayerRightsNormal
  0, // 3 -> netPlayerRightsAdmin
};

const std::string& NetPlayerInfoRights_Name(
    NetPlayerInfoRights value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetPlayerInfoRights_entries,
          NetPlayerInfoRights_entries_by_number,
          3, NetPlayerInfoRights_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetPlayerInfoRights_entries,
      NetPlayerInfoRights_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetPlayerInfoRights_strings[idx].get();
}
bool NetPlayerInfoRights_Parse(
    const std::string& name, NetPlayerInfoRights* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetPlayerInfoRights_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<NetPlayerInfoRights>(int_value);
  }
  return success;
}
bool NetAvatarType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetAvatarType_strings[3] = {};

static const char NetAvatarType_names[] =
  "netAvatarImageGif"
  "netAvatarImageJpg"
  "netAvatarImagePng";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetAvatarType_entries[] = {
  { {NetAvatarType_names + 0, 17}, 3 },
  { {NetAvatarType_names + 17, 17}, 2 },
  { {NetAvatarType_names + 34, 17}, 1 },
};

static const int NetAvatarType_entries_by_number[] = {
  2, // 1 -> netAvatarImagePng
  1, // 2 -> netAvatarImageJpg
  0, // 3 -> netAvatarImageGif
};

const std::string& NetAvatarType_Name(
    NetAvatarType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetAvatarType_entries,
          NetAvatarType_entries_by_number,
          3, NetAvatarType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetAvatarType_entries,
      NetAvatarType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetAvatarType_strings[idx].get();
}
bool NetAvatarType_Parse(
    const std::string& name, NetAvatarType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetAvatarType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<NetAvatarType>(int_value);
  }
  return success;
}

// ===================================================================

void NetGameInfo::InitAsDefaultInstance() {
}
class NetGameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NetGameInfo>()._has_bits_);
  static void set_has_gamename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_netgametype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_maxnumplayers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_raiseintervalmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_raiseeveryhands(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_raiseeveryminutes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_endraisemode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_endraisesmallblindvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_proposedguispeed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_delaybetweenhands(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_playeractiontimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_firstsmallblind(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_startmoney(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_allowspectators(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001fe3) ^ 0x00001fe3) != 0;
  }
};

NetGameInfo::NetGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  manualblinds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetGameInfo)
}
NetGameInfo::NetGameInfo(const NetGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      manualblinds_(from.manualblinds_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  gamename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamename()) {
    gamename_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamename(),
      GetArena());
  }
  ::memcpy(&maxnumplayers_, &from.maxnumplayers_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowspectators_) -
    reinterpret_cast<char*>(&maxnumplayers_)) + sizeof(allowspectators_));
  // @@protoc_insertion_point(copy_constructor:NetGameInfo)
}

void NetGameInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetGameInfo_pokerth_2eproto.base);
  gamename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxnumplayers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startmoney_) -
      reinterpret_cast<char*>(&maxnumplayers_)) + sizeof(startmoney_));
  netgametype_ = 1;
  raiseintervalmode_ = 1;
  endraisemode_ = 1;
  allowspectators_ = true;
}

NetGameInfo::~NetGameInfo() {
  // @@protoc_insertion_point(destructor:NetGameInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NetGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetGameInfo::ArenaDtor(void* object) {
  NetGameInfo* _this = reinterpret_cast< NetGameInfo* >(object);
  (void)_this;
}
void NetGameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetGameInfo& NetGameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetGameInfo_pokerth_2eproto.base);
  return *internal_default_instance();
}


void NetGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manualblinds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gamename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&maxnumplayers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playeractiontimeout_) -
        reinterpret_cast<char*>(&maxnumplayers_)) + sizeof(playeractiontimeout_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&firstsmallblind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startmoney_) -
        reinterpret_cast<char*>(&firstsmallblind_)) + sizeof(startmoney_));
    netgametype_ = 1;
    raiseintervalmode_ = 1;
    endraisemode_ = 1;
    allowspectators_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NetGameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string gameName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gamename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameInfo.NetGameType netGameType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameInfo_NetGameType_IsValid(val))) {
            _internal_set_netgametype(static_cast<::NetGameInfo_NetGameType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 maxNumPlayers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxnumplayers(&has_bits);
          maxnumplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameInfo_RaiseIntervalMode_IsValid(val))) {
            _internal_set_raiseintervalmode(static_cast<::NetGameInfo_RaiseIntervalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 raiseEveryHands = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_raiseeveryhands(&has_bits);
          raiseeveryhands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 raiseEveryMinutes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_raiseeveryminutes(&has_bits);
          raiseeveryminutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameInfo_EndRaiseMode_IsValid(val))) {
            _internal_set_endraisemode(static_cast<::NetGameInfo_EndRaiseMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 endRaiseSmallBlindValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_endraisesmallblindvalue(&has_bits);
          endraisesmallblindvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 proposedGuiSpeed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_proposedguispeed(&has_bits);
          proposedguispeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 delayBetweenHands = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_delaybetweenhands(&has_bits);
          delaybetweenhands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerActionTimeout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_playeractiontimeout(&has_bits);
          playeractiontimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 firstSmallBlind = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_firstsmallblind(&has_bits);
          firstsmallblind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 startMoney = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_startmoney(&has_bits);
          startmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 manualBlinds = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_manualblinds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_manualblinds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allowSpectators = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_allowspectators(&has_bits);
          allowspectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetGameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetGameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gameName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gamename(), target);
  }

  // required .NetGameInfo.NetGameType netGameType = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_netgametype(), target);
  }

  // required uint32 maxNumPlayers = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxnumplayers(), target);
  }

  // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_raiseintervalmode(), target);
  }

  // optional uint32 raiseEveryHands = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_raiseeveryhands(), target);
  }

  // optional uint32 raiseEveryMinutes = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_raiseeveryminutes(), target);
  }

  // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_endraisemode(), target);
  }

  // optional uint32 endRaiseSmallBlindValue = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_endraisesmallblindvalue(), target);
  }

  // required uint32 proposedGuiSpeed = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_proposedguispeed(), target);
  }

  // required uint32 delayBetweenHands = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_delaybetweenhands(), target);
  }

  // required uint32 playerActionTimeout = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_playeractiontimeout(), target);
  }

  // required uint32 firstSmallBlind = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_firstsmallblind(), target);
  }

  // required uint32 startMoney = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_startmoney(), target);
  }

  // repeated uint32 manualBlinds = 14 [packed = true];
  {
    int byte_size = _manualblinds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_manualblinds(), byte_size, target);
    }
  }

  // optional bool allowSpectators = 15 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_allowspectators(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetGameInfo)
  return target;
}

size_t NetGameInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NetGameInfo)
  size_t total_size = 0;

  if (_internal_has_gamename()) {
    // required string gameName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamename());
  }

  if (_internal_has_maxnumplayers()) {
    // required uint32 maxNumPlayers = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxnumplayers());
  }

  if (_internal_has_proposedguispeed()) {
    // required uint32 proposedGuiSpeed = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proposedguispeed());
  }

  if (_internal_has_delaybetweenhands()) {
    // required uint32 delayBetweenHands = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_delaybetweenhands());
  }

  if (_internal_has_playeractiontimeout()) {
    // required uint32 playerActionTimeout = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playeractiontimeout());
  }

  if (_internal_has_firstsmallblind()) {
    // required uint32 firstSmallBlind = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_firstsmallblind());
  }

  if (_internal_has_startmoney()) {
    // required uint32 startMoney = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startmoney());
  }

  if (_internal_has_netgametype()) {
    // required .NetGameInfo.NetGameType netGameType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_netgametype());
  }

  if (_internal_has_raiseintervalmode()) {
    // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_raiseintervalmode());
  }

  if (_internal_has_endraisemode()) {
    // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_endraisemode());
  }

  return total_size;
}
size_t NetGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetGameInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001fe3) ^ 0x00001fe3) == 0) {  // All required fields are present.
    // required string gameName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamename());

    // required uint32 maxNumPlayers = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxnumplayers());

    // required uint32 proposedGuiSpeed = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proposedguispeed());

    // required uint32 delayBetweenHands = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_delaybetweenhands());

    // required uint32 playerActionTimeout = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playeractiontimeout());

    // required uint32 firstSmallBlind = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_firstsmallblind());

    // required uint32 startMoney = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startmoney());

    // required .NetGameInfo.NetGameType netGameType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_netgametype());

    // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_raiseintervalmode());

    // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_endraisemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 manualBlinds = 14 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->manualblinds_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _manualblinds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 raiseEveryHands = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_raiseeveryhands());
    }

    // optional uint32 raiseEveryMinutes = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_raiseeveryminutes());
    }

    // optional uint32 endRaiseSmallBlindValue = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_endraisesmallblindvalue());
    }

  }
  // optional bool allowSpectators = 15 [default = true];
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetGameInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetGameInfo*>(
      &from));
}

void NetGameInfo::MergeFrom(const NetGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  manualblinds_.MergeFrom(from.manualblinds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamename(from._internal_gamename());
    }
    if (cached_has_bits & 0x00000002u) {
      maxnumplayers_ = from.maxnumplayers_;
    }
    if (cached_has_bits & 0x00000004u) {
      raiseeveryhands_ = from.raiseeveryhands_;
    }
    if (cached_has_bits & 0x00000008u) {
      raiseeveryminutes_ = from.raiseeveryminutes_;
    }
    if (cached_has_bits & 0x00000010u) {
      endraisesmallblindvalue_ = from.endraisesmallblindvalue_;
    }
    if (cached_has_bits & 0x00000020u) {
      proposedguispeed_ = from.proposedguispeed_;
    }
    if (cached_has_bits & 0x00000040u) {
      delaybetweenhands_ = from.delaybetweenhands_;
    }
    if (cached_has_bits & 0x00000080u) {
      playeractiontimeout_ = from.playeractiontimeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      firstsmallblind_ = from.firstsmallblind_;
    }
    if (cached_has_bits & 0x00000200u) {
      startmoney_ = from.startmoney_;
    }
    if (cached_has_bits & 0x00000400u) {
      netgametype_ = from.netgametype_;
    }
    if (cached_has_bits & 0x00000800u) {
      raiseintervalmode_ = from.raiseintervalmode_;
    }
    if (cached_has_bits & 0x00001000u) {
      endraisemode_ = from.endraisemode_;
    }
    if (cached_has_bits & 0x00002000u) {
      allowspectators_ = from.allowspectators_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetGameInfo::CopyFrom(const NetGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetGameInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NetGameInfo::InternalSwap(NetGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  manualblinds_.InternalSwap(&other->manualblinds_);
  gamename_.Swap(&other->gamename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetGameInfo, startmoney_)
      + sizeof(NetGameInfo::startmoney_)
      - PROTOBUF_FIELD_OFFSET(NetGameInfo, maxnumplayers_)>(
          reinterpret_cast<char*>(&maxnumplayers_),
          reinterpret_cast<char*>(&other->maxnumplayers_));
  swap(netgametype_, other->netgametype_);
  swap(raiseintervalmode_, other->raiseintervalmode_);
  swap(endraisemode_, other->endraisemode_);
  swap(allowspectators_, other->allowspectators_);
}

std::string NetGameInfo::GetTypeName() const {
  return "NetGameInfo";
}


// ===================================================================

void PlayerResult::InitAsDefaultInstance() {
}
class PlayerResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerResult>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resultcard1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resultcard2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_moneywon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playermoney(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cardsvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

PlayerResult::PlayerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  besthandposition_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerResult)
}
PlayerResult::PlayerResult(const PlayerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      besthandposition_(from.besthandposition_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cardsvalue_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(cardsvalue_));
  // @@protoc_insertion_point(copy_constructor:PlayerResult)
}

void PlayerResult::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardsvalue_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(cardsvalue_));
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:PlayerResult)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PlayerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerResult::ArenaDtor(void* object) {
  PlayerResult* _this = reinterpret_cast< PlayerResult* >(object);
  (void)_this;
}
void PlayerResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerResult& PlayerResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerResult_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  besthandposition_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cardsvalue_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(cardsvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayerResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 resultCard1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_resultcard1(&has_bits);
          resultcard1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 resultCard2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_resultcard2(&has_bits);
          resultcard2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bestHandPosition = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_besthandposition(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_besthandposition(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 moneyWon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_moneywon(&has_bits);
          moneywon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerMoney = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_playermoney(&has_bits);
          playermoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cardsValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cardsvalue(&has_bits);
          cardsvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required uint32 resultCard1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_resultcard1(), target);
  }

  // required uint32 resultCard2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_resultcard2(), target);
  }

  // repeated uint32 bestHandPosition = 4 [packed = true];
  {
    int byte_size = _besthandposition_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_besthandposition(), byte_size, target);
    }
  }

  // required uint32 moneyWon = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_moneywon(), target);
  }

  // required uint32 playerMoney = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_playermoney(), target);
  }

  // optional uint32 cardsValue = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cardsvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerResult)
  return target;
}

size_t PlayerResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerResult)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_resultcard1()) {
    // required uint32 resultCard1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resultcard1());
  }

  if (_internal_has_resultcard2()) {
    // required uint32 resultCard2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resultcard2());
  }

  if (_internal_has_moneywon()) {
    // required uint32 moneyWon = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moneywon());
  }

  if (_internal_has_playermoney()) {
    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playermoney());
  }

  return total_size;
}
size_t PlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerResult)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required uint32 resultCard1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resultcard1());

    // required uint32 resultCard2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resultcard2());

    // required uint32 moneyWon = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moneywon());

    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 bestHandPosition = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->besthandposition_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _besthandposition_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 cardsValue = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cardsvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerResult*>(
      &from));
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  besthandposition_.MergeFrom(from.besthandposition_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      resultcard1_ = from.resultcard1_;
    }
    if (cached_has_bits & 0x00000004u) {
      resultcard2_ = from.resultcard2_;
    }
    if (cached_has_bits & 0x00000008u) {
      moneywon_ = from.moneywon_;
    }
    if (cached_has_bits & 0x00000010u) {
      playermoney_ = from.playermoney_;
    }
    if (cached_has_bits & 0x00000020u) {
      cardsvalue_ = from.cardsvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerResult::InternalSwap(PlayerResult* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  besthandposition_.InternalSwap(&other->besthandposition_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerResult, cardsvalue_)
      + sizeof(PlayerResult::cardsvalue_)
      - PROTOBUF_FIELD_OFFSET(PlayerResult, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string PlayerResult::GetTypeName() const {
  return "PlayerResult";
}


// ===================================================================

void AnnounceMessage_Version::InitAsDefaultInstance() {
}
class AnnounceMessage_Version::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnounceMessage_Version>()._has_bits_);
  static void set_has_majorversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minorversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AnnounceMessage_Version::AnnounceMessage_Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AnnounceMessage.Version)
}
AnnounceMessage_Version::AnnounceMessage_Version(const AnnounceMessage_Version& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&majorversion_, &from.majorversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&minorversion_) -
    reinterpret_cast<char*>(&majorversion_)) + sizeof(minorversion_));
  // @@protoc_insertion_point(copy_constructor:AnnounceMessage.Version)
}

void AnnounceMessage_Version::SharedCtor() {
  ::memset(&majorversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minorversion_) -
      reinterpret_cast<char*>(&majorversion_)) + sizeof(minorversion_));
}

AnnounceMessage_Version::~AnnounceMessage_Version() {
  // @@protoc_insertion_point(destructor:AnnounceMessage.Version)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AnnounceMessage_Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AnnounceMessage_Version::ArenaDtor(void* object) {
  AnnounceMessage_Version* _this = reinterpret_cast< AnnounceMessage_Version* >(object);
  (void)_this;
}
void AnnounceMessage_Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnounceMessage_Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnounceMessage_Version& AnnounceMessage_Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnnounceMessage_Version_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AnnounceMessage_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:AnnounceMessage.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&majorversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minorversion_) -
        reinterpret_cast<char*>(&majorversion_)) + sizeof(minorversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AnnounceMessage_Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 majorVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_majorversion(&has_bits);
          majorversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 minorVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minorversion(&has_bits);
          minorversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnounceMessage_Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnnounceMessage.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 majorVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_majorversion(), target);
  }

  // required uint32 minorVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minorversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnnounceMessage.Version)
  return target;
}

size_t AnnounceMessage_Version::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnnounceMessage.Version)
  size_t total_size = 0;

  if (_internal_has_majorversion()) {
    // required uint32 majorVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_majorversion());
  }

  if (_internal_has_minorversion()) {
    // required uint32 minorVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minorversion());
  }

  return total_size;
}
size_t AnnounceMessage_Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnnounceMessage.Version)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 majorVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_majorversion());

    // required uint32 minorVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minorversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnounceMessage_Version::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AnnounceMessage_Version*>(
      &from));
}

void AnnounceMessage_Version::MergeFrom(const AnnounceMessage_Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnnounceMessage.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      majorversion_ = from.majorversion_;
    }
    if (cached_has_bits & 0x00000002u) {
      minorversion_ = from.minorversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnnounceMessage_Version::CopyFrom(const AnnounceMessage_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnnounceMessage.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage_Version::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AnnounceMessage_Version::InternalSwap(AnnounceMessage_Version* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnounceMessage_Version, minorversion_)
      + sizeof(AnnounceMessage_Version::minorversion_)
      - PROTOBUF_FIELD_OFFSET(AnnounceMessage_Version, majorversion_)>(
          reinterpret_cast<char*>(&majorversion_),
          reinterpret_cast<char*>(&other->majorversion_));
}

std::string AnnounceMessage_Version::GetTypeName() const {
  return "AnnounceMessage.Version";
}


// ===================================================================

void AnnounceMessage::InitAsDefaultInstance() {
  ::_AnnounceMessage_default_instance_._instance.get_mutable()->protocolversion_ = const_cast< ::AnnounceMessage_Version*>(
      ::AnnounceMessage_Version::internal_default_instance());
  ::_AnnounceMessage_default_instance_._instance.get_mutable()->latestgameversion_ = const_cast< ::AnnounceMessage_Version*>(
      ::AnnounceMessage_Version::internal_default_instance());
}
class AnnounceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnounceMessage>()._has_bits_);
  static const ::AnnounceMessage_Version& protocolversion(const AnnounceMessage* msg);
  static void set_has_protocolversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AnnounceMessage_Version& latestgameversion(const AnnounceMessage* msg);
  static void set_has_latestgameversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latestbetarevision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_servertype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_numplayersonserver(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::AnnounceMessage_Version&
AnnounceMessage::_Internal::protocolversion(const AnnounceMessage* msg) {
  return *msg->protocolversion_;
}
const ::AnnounceMessage_Version&
AnnounceMessage::_Internal::latestgameversion(const AnnounceMessage* msg) {
  return *msg->latestgameversion_;
}
AnnounceMessage::AnnounceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AnnounceMessage)
}
AnnounceMessage::AnnounceMessage(const AnnounceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_protocolversion()) {
    protocolversion_ = new ::AnnounceMessage_Version(*from.protocolversion_);
  } else {
    protocolversion_ = nullptr;
  }
  if (from._internal_has_latestgameversion()) {
    latestgameversion_ = new ::AnnounceMessage_Version(*from.latestgameversion_);
  } else {
    latestgameversion_ = nullptr;
  }
  ::memcpy(&latestbetarevision_, &from.latestbetarevision_,
    static_cast<size_t>(reinterpret_cast<char*>(&numplayersonserver_) -
    reinterpret_cast<char*>(&latestbetarevision_)) + sizeof(numplayersonserver_));
  // @@protoc_insertion_point(copy_constructor:AnnounceMessage)
}

void AnnounceMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnnounceMessage_pokerth_2eproto.base);
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numplayersonserver_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(numplayersonserver_));
}

AnnounceMessage::~AnnounceMessage() {
  // @@protoc_insertion_point(destructor:AnnounceMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AnnounceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete protocolversion_;
  if (this != internal_default_instance()) delete latestgameversion_;
}

void AnnounceMessage::ArenaDtor(void* object) {
  AnnounceMessage* _this = reinterpret_cast< AnnounceMessage* >(object);
  (void)_this;
}
void AnnounceMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnounceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnounceMessage& AnnounceMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnnounceMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AnnounceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AnnounceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(protocolversion_ != nullptr);
      protocolversion_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(latestgameversion_ != nullptr);
      latestgameversion_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&latestbetarevision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numplayersonserver_) -
        reinterpret_cast<char*>(&latestbetarevision_)) + sizeof(numplayersonserver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AnnounceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .AnnounceMessage.Version protocolVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocolversion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .AnnounceMessage.Version latestGameVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latestgameversion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 latestBetaRevision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_latestbetarevision(&has_bits);
          latestbetarevision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .AnnounceMessage.ServerType serverType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AnnounceMessage_ServerType_IsValid(val))) {
            _internal_set_servertype(static_cast<::AnnounceMessage_ServerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 numPlayersOnServer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_numplayersonserver(&has_bits);
          numplayersonserver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnounceMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnnounceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .AnnounceMessage.Version protocolVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::protocolversion(this), target, stream);
  }

  // required .AnnounceMessage.Version latestGameVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::latestgameversion(this), target, stream);
  }

  // required uint32 latestBetaRevision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_latestbetarevision(), target);
  }

  // required .AnnounceMessage.ServerType serverType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_servertype(), target);
  }

  // required uint32 numPlayersOnServer = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_numplayersonserver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnnounceMessage)
  return target;
}

size_t AnnounceMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnnounceMessage)
  size_t total_size = 0;

  if (_internal_has_protocolversion()) {
    // required .AnnounceMessage.Version protocolVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protocolversion_);
  }

  if (_internal_has_latestgameversion()) {
    // required .AnnounceMessage.Version latestGameVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latestgameversion_);
  }

  if (_internal_has_latestbetarevision()) {
    // required uint32 latestBetaRevision = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_latestbetarevision());
  }

  if (_internal_has_servertype()) {
    // required .AnnounceMessage.ServerType serverType = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_servertype());
  }

  if (_internal_has_numplayersonserver()) {
    // required uint32 numPlayersOnServer = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numplayersonserver());
  }

  return total_size;
}
size_t AnnounceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnnounceMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .AnnounceMessage.Version protocolVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protocolversion_);

    // required .AnnounceMessage.Version latestGameVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latestgameversion_);

    // required uint32 latestBetaRevision = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_latestbetarevision());

    // required .AnnounceMessage.ServerType serverType = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_servertype());

    // required uint32 numPlayersOnServer = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numplayersonserver());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnounceMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AnnounceMessage*>(
      &from));
}

void AnnounceMessage::MergeFrom(const AnnounceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnnounceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_protocolversion()->::AnnounceMessage_Version::MergeFrom(from._internal_protocolversion());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_latestgameversion()->::AnnounceMessage_Version::MergeFrom(from._internal_latestgameversion());
    }
    if (cached_has_bits & 0x00000004u) {
      latestbetarevision_ = from.latestbetarevision_;
    }
    if (cached_has_bits & 0x00000008u) {
      servertype_ = from.servertype_;
    }
    if (cached_has_bits & 0x00000010u) {
      numplayersonserver_ = from.numplayersonserver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnnounceMessage::CopyFrom(const AnnounceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnnounceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_protocolversion()) {
    if (!protocolversion_->IsInitialized()) return false;
  }
  if (_internal_has_latestgameversion()) {
    if (!latestgameversion_->IsInitialized()) return false;
  }
  return true;
}

void AnnounceMessage::InternalSwap(AnnounceMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnounceMessage, numplayersonserver_)
      + sizeof(AnnounceMessage::numplayersonserver_)
      - PROTOBUF_FIELD_OFFSET(AnnounceMessage, protocolversion_)>(
          reinterpret_cast<char*>(&protocolversion_),
          reinterpret_cast<char*>(&other->protocolversion_));
}

std::string AnnounceMessage::GetTypeName() const {
  return "AnnounceMessage";
}


// ===================================================================

void AuthClientRequestMessage::InitAsDefaultInstance() {
  ::_AuthClientRequestMessage_default_instance_._instance.get_mutable()->requestedversion_ = const_cast< ::AnnounceMessage_Version*>(
      ::AnnounceMessage_Version::internal_default_instance());
}
class AuthClientRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthClientRequestMessage>()._has_bits_);
  static const ::AnnounceMessage_Version& requestedversion(const AuthClientRequestMessage* msg);
  static void set_has_requestedversion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_buildid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_login(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_authserverpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientuserdata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mylastsessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000e0) ^ 0x000000e0) != 0;
  }
};

const ::AnnounceMessage_Version&
AuthClientRequestMessage::_Internal::requestedversion(const AuthClientRequestMessage* msg) {
  return *msg->requestedversion_;
}
AuthClientRequestMessage::AuthClientRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AuthClientRequestMessage)
}
AuthClientRequestMessage::AuthClientRequestMessage(const AuthClientRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  authserverpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_authserverpassword()) {
    authserverpassword_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_authserverpassword(),
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nickname()) {
    nickname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nickname(),
      GetArena());
  }
  clientuserdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientuserdata()) {
    clientuserdata_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clientuserdata(),
      GetArena());
  }
  mylastsessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mylastsessionid()) {
    mylastsessionid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mylastsessionid(),
      GetArena());
  }
  avatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_avatarhash()) {
    avatarhash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatarhash(),
      GetArena());
  }
  if (from._internal_has_requestedversion()) {
    requestedversion_ = new ::AnnounceMessage_Version(*from.requestedversion_);
  } else {
    requestedversion_ = nullptr;
  }
  ::memcpy(&buildid_, &from.buildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_) -
    reinterpret_cast<char*>(&buildid_)) + sizeof(login_));
  // @@protoc_insertion_point(copy_constructor:AuthClientRequestMessage)
}

void AuthClientRequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthClientRequestMessage_pokerth_2eproto.base);
  authserverpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientuserdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mylastsessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestedversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_) -
      reinterpret_cast<char*>(&requestedversion_)) + sizeof(login_));
}

AuthClientRequestMessage::~AuthClientRequestMessage() {
  // @@protoc_insertion_point(destructor:AuthClientRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AuthClientRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  authserverpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientuserdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mylastsessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestedversion_;
}

void AuthClientRequestMessage::ArenaDtor(void* object) {
  AuthClientRequestMessage* _this = reinterpret_cast< AuthClientRequestMessage* >(object);
  (void)_this;
}
void AuthClientRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthClientRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthClientRequestMessage& AuthClientRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthClientRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AuthClientRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthClientRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      authserverpassword_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      clientuserdata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      mylastsessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      avatarhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(requestedversion_ != nullptr);
      requestedversion_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&buildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&login_) -
        reinterpret_cast<char*>(&buildid_)) + sizeof(login_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthClientRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .AnnounceMessage.Version requestedVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestedversion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 buildId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_buildid(&has_bits);
          buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .AuthClientRequestMessage.LoginType login = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AuthClientRequestMessage_LoginType_IsValid(val))) {
            _internal_set_login(static_cast<::AuthClientRequestMessage_LoginType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string authServerPassword = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_authserverpassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string nickName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes clientUserData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_clientuserdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes myLastSessionId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_mylastsessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes avatarHash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_avatarhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthClientRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthClientRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .AnnounceMessage.Version requestedVersion = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::requestedversion(this), target, stream);
  }

  // required uint32 buildId = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_buildid(), target);
  }

  // required .AuthClientRequestMessage.LoginType login = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_login(), target);
  }

  // optional string authServerPassword = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_authserverpassword(), target);
  }

  // optional string nickName = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nickname(), target);
  }

  // optional bytes clientUserData = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_clientuserdata(), target);
  }

  // optional bytes myLastSessionId = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_mylastsessionid(), target);
  }

  // optional bytes avatarHash = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_avatarhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthClientRequestMessage)
  return target;
}

size_t AuthClientRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AuthClientRequestMessage)
  size_t total_size = 0;

  if (_internal_has_requestedversion()) {
    // required .AnnounceMessage.Version requestedVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestedversion_);
  }

  if (_internal_has_buildid()) {
    // required uint32 buildId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buildid());
  }

  if (_internal_has_login()) {
    // required .AuthClientRequestMessage.LoginType login = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_login());
  }

  return total_size;
}
size_t AuthClientRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthClientRequestMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000e0) ^ 0x000000e0) == 0) {  // All required fields are present.
    // required .AnnounceMessage.Version requestedVersion = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestedversion_);

    // required uint32 buildId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buildid());

    // required .AuthClientRequestMessage.LoginType login = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_login());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string authServerPassword = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authserverpassword());
    }

    // optional string nickName = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional bytes clientUserData = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_clientuserdata());
    }

    // optional bytes myLastSessionId = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mylastsessionid());
    }

    // optional bytes avatarHash = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_avatarhash());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthClientRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AuthClientRequestMessage*>(
      &from));
}

void AuthClientRequestMessage::MergeFrom(const AuthClientRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthClientRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_authserverpassword(from._internal_authserverpassword());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_clientuserdata(from._internal_clientuserdata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_mylastsessionid(from._internal_mylastsessionid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_avatarhash(from._internal_avatarhash());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_requestedversion()->::AnnounceMessage_Version::MergeFrom(from._internal_requestedversion());
    }
    if (cached_has_bits & 0x00000040u) {
      buildid_ = from.buildid_;
    }
    if (cached_has_bits & 0x00000080u) {
      login_ = from.login_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthClientRequestMessage::CopyFrom(const AuthClientRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthClientRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthClientRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_requestedversion()) {
    if (!requestedversion_->IsInitialized()) return false;
  }
  return true;
}

void AuthClientRequestMessage::InternalSwap(AuthClientRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  authserverpassword_.Swap(&other->authserverpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clientuserdata_.Swap(&other->clientuserdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mylastsessionid_.Swap(&other->mylastsessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatarhash_.Swap(&other->avatarhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthClientRequestMessage, login_)
      + sizeof(AuthClientRequestMessage::login_)
      - PROTOBUF_FIELD_OFFSET(AuthClientRequestMessage, requestedversion_)>(
          reinterpret_cast<char*>(&requestedversion_),
          reinterpret_cast<char*>(&other->requestedversion_));
}

std::string AuthClientRequestMessage::GetTypeName() const {
  return "AuthClientRequestMessage";
}


// ===================================================================

void AuthServerChallengeMessage::InitAsDefaultInstance() {
}
class AuthServerChallengeMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthServerChallengeMessage>()._has_bits_);
  static void set_has_serverchallenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AuthServerChallengeMessage::AuthServerChallengeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AuthServerChallengeMessage)
}
AuthServerChallengeMessage::AuthServerChallengeMessage(const AuthServerChallengeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  serverchallenge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serverchallenge()) {
    serverchallenge_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serverchallenge(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:AuthServerChallengeMessage)
}

void AuthServerChallengeMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthServerChallengeMessage_pokerth_2eproto.base);
  serverchallenge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthServerChallengeMessage::~AuthServerChallengeMessage() {
  // @@protoc_insertion_point(destructor:AuthServerChallengeMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AuthServerChallengeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serverchallenge_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthServerChallengeMessage::ArenaDtor(void* object) {
  AuthServerChallengeMessage* _this = reinterpret_cast< AuthServerChallengeMessage* >(object);
  (void)_this;
}
void AuthServerChallengeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthServerChallengeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthServerChallengeMessage& AuthServerChallengeMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthServerChallengeMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AuthServerChallengeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthServerChallengeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serverchallenge_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthServerChallengeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes serverChallenge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serverchallenge();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthServerChallengeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthServerChallengeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes serverChallenge = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serverchallenge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthServerChallengeMessage)
  return target;
}

size_t AuthServerChallengeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthServerChallengeMessage)
  size_t total_size = 0;

  // required bytes serverChallenge = 1;
  if (_internal_has_serverchallenge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serverchallenge());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthServerChallengeMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AuthServerChallengeMessage*>(
      &from));
}

void AuthServerChallengeMessage::MergeFrom(const AuthServerChallengeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthServerChallengeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serverchallenge()) {
    _internal_set_serverchallenge(from._internal_serverchallenge());
  }
}

void AuthServerChallengeMessage::CopyFrom(const AuthServerChallengeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthServerChallengeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerChallengeMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AuthServerChallengeMessage::InternalSwap(AuthServerChallengeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serverchallenge_.Swap(&other->serverchallenge_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string AuthServerChallengeMessage::GetTypeName() const {
  return "AuthServerChallengeMessage";
}


// ===================================================================

void AuthClientResponseMessage::InitAsDefaultInstance() {
}
class AuthClientResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthClientResponseMessage>()._has_bits_);
  static void set_has_clientresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AuthClientResponseMessage::AuthClientResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AuthClientResponseMessage)
}
AuthClientResponseMessage::AuthClientResponseMessage(const AuthClientResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clientresponse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientresponse()) {
    clientresponse_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clientresponse(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:AuthClientResponseMessage)
}

void AuthClientResponseMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthClientResponseMessage_pokerth_2eproto.base);
  clientresponse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthClientResponseMessage::~AuthClientResponseMessage() {
  // @@protoc_insertion_point(destructor:AuthClientResponseMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AuthClientResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientresponse_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthClientResponseMessage::ArenaDtor(void* object) {
  AuthClientResponseMessage* _this = reinterpret_cast< AuthClientResponseMessage* >(object);
  (void)_this;
}
void AuthClientResponseMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthClientResponseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthClientResponseMessage& AuthClientResponseMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthClientResponseMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AuthClientResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthClientResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clientresponse_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthClientResponseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes clientResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientresponse();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthClientResponseMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthClientResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes clientResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_clientresponse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthClientResponseMessage)
  return target;
}

size_t AuthClientResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthClientResponseMessage)
  size_t total_size = 0;

  // required bytes clientResponse = 1;
  if (_internal_has_clientresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientresponse());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthClientResponseMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AuthClientResponseMessage*>(
      &from));
}

void AuthClientResponseMessage::MergeFrom(const AuthClientResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthClientResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clientresponse()) {
    _internal_set_clientresponse(from._internal_clientresponse());
  }
}

void AuthClientResponseMessage::CopyFrom(const AuthClientResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthClientResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthClientResponseMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AuthClientResponseMessage::InternalSwap(AuthClientResponseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clientresponse_.Swap(&other->clientresponse_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string AuthClientResponseMessage::GetTypeName() const {
  return "AuthClientResponseMessage";
}


// ===================================================================

void AuthServerVerificationMessage::InitAsDefaultInstance() {
}
class AuthServerVerificationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthServerVerificationMessage>()._has_bits_);
  static void set_has_serververification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AuthServerVerificationMessage::AuthServerVerificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AuthServerVerificationMessage)
}
AuthServerVerificationMessage::AuthServerVerificationMessage(const AuthServerVerificationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  serververification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serververification()) {
    serververification_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serververification(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:AuthServerVerificationMessage)
}

void AuthServerVerificationMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthServerVerificationMessage_pokerth_2eproto.base);
  serververification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthServerVerificationMessage::~AuthServerVerificationMessage() {
  // @@protoc_insertion_point(destructor:AuthServerVerificationMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AuthServerVerificationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serververification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthServerVerificationMessage::ArenaDtor(void* object) {
  AuthServerVerificationMessage* _this = reinterpret_cast< AuthServerVerificationMessage* >(object);
  (void)_this;
}
void AuthServerVerificationMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthServerVerificationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthServerVerificationMessage& AuthServerVerificationMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthServerVerificationMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AuthServerVerificationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthServerVerificationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serververification_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthServerVerificationMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes serverVerification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serververification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthServerVerificationMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthServerVerificationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes serverVerification = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serververification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthServerVerificationMessage)
  return target;
}

size_t AuthServerVerificationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthServerVerificationMessage)
  size_t total_size = 0;

  // required bytes serverVerification = 1;
  if (_internal_has_serververification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serververification());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthServerVerificationMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AuthServerVerificationMessage*>(
      &from));
}

void AuthServerVerificationMessage::MergeFrom(const AuthServerVerificationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthServerVerificationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serververification()) {
    _internal_set_serververification(from._internal_serververification());
  }
}

void AuthServerVerificationMessage::CopyFrom(const AuthServerVerificationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthServerVerificationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerVerificationMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AuthServerVerificationMessage::InternalSwap(AuthServerVerificationMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serververification_.Swap(&other->serververification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string AuthServerVerificationMessage::GetTypeName() const {
  return "AuthServerVerificationMessage";
}


// ===================================================================

void InitDoneMessage::InitAsDefaultInstance() {
}
class InitDoneMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<InitDoneMessage>()._has_bits_);
  static void set_has_yoursessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yourplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_youravatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rejoingameid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

InitDoneMessage::InitDoneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InitDoneMessage)
}
InitDoneMessage::InitDoneMessage(const InitDoneMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  yoursessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_yoursessionid()) {
    yoursessionid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_yoursessionid(),
      GetArena());
  }
  youravatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_youravatarhash()) {
    youravatarhash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_youravatarhash(),
      GetArena());
  }
  ::memcpy(&yourplayerid_, &from.yourplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rejoingameid_) -
    reinterpret_cast<char*>(&yourplayerid_)) + sizeof(rejoingameid_));
  // @@protoc_insertion_point(copy_constructor:InitDoneMessage)
}

void InitDoneMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitDoneMessage_pokerth_2eproto.base);
  yoursessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youravatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&yourplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rejoingameid_) -
      reinterpret_cast<char*>(&yourplayerid_)) + sizeof(rejoingameid_));
}

InitDoneMessage::~InitDoneMessage() {
  // @@protoc_insertion_point(destructor:InitDoneMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void InitDoneMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  yoursessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youravatarhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitDoneMessage::ArenaDtor(void* object) {
  InitDoneMessage* _this = reinterpret_cast< InitDoneMessage* >(object);
  (void)_this;
}
void InitDoneMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitDoneMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitDoneMessage& InitDoneMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitDoneMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void InitDoneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InitDoneMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      yoursessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      youravatarhash_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&yourplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rejoingameid_) -
        reinterpret_cast<char*>(&yourplayerid_)) + sizeof(rejoingameid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InitDoneMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes yourSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_yoursessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 yourPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_yourplayerid(&has_bits);
          yourplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes yourAvatarHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_youravatarhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rejoinGameId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rejoingameid(&has_bits);
          rejoingameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitDoneMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitDoneMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes yourSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_yoursessionid(), target);
  }

  // required uint32 yourPlayerId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_yourplayerid(), target);
  }

  // optional bytes yourAvatarHash = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_youravatarhash(), target);
  }

  // optional uint32 rejoinGameId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rejoingameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitDoneMessage)
  return target;
}

size_t InitDoneMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InitDoneMessage)
  size_t total_size = 0;

  if (_internal_has_yoursessionid()) {
    // required bytes yourSessionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_yoursessionid());
  }

  if (_internal_has_yourplayerid()) {
    // required uint32 yourPlayerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yourplayerid());
  }

  return total_size;
}
size_t InitDoneMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitDoneMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes yourSessionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_yoursessionid());

    // required uint32 yourPlayerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yourplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes yourAvatarHash = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_youravatarhash());
  }

  // optional uint32 rejoinGameId = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rejoingameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitDoneMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InitDoneMessage*>(
      &from));
}

void InitDoneMessage::MergeFrom(const InitDoneMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitDoneMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_yoursessionid(from._internal_yoursessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_youravatarhash(from._internal_youravatarhash());
    }
    if (cached_has_bits & 0x00000004u) {
      yourplayerid_ = from.yourplayerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      rejoingameid_ = from.rejoingameid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitDoneMessage::CopyFrom(const InitDoneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitDoneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitDoneMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InitDoneMessage::InternalSwap(InitDoneMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  yoursessionid_.Swap(&other->yoursessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  youravatarhash_.Swap(&other->youravatarhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitDoneMessage, rejoingameid_)
      + sizeof(InitDoneMessage::rejoingameid_)
      - PROTOBUF_FIELD_OFFSET(InitDoneMessage, yourplayerid_)>(
          reinterpret_cast<char*>(&yourplayerid_),
          reinterpret_cast<char*>(&other->yourplayerid_));
}

std::string InitDoneMessage::GetTypeName() const {
  return "InitDoneMessage";
}


// ===================================================================

void AvatarRequestMessage::InitAsDefaultInstance() {
}
class AvatarRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarRequestMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AvatarRequestMessage::AvatarRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AvatarRequestMessage)
}
AvatarRequestMessage::AvatarRequestMessage(const AvatarRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  avatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_avatarhash()) {
    avatarhash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatarhash(),
      GetArena());
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:AvatarRequestMessage)
}

void AvatarRequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AvatarRequestMessage_pokerth_2eproto.base);
  avatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
}

AvatarRequestMessage::~AvatarRequestMessage() {
  // @@protoc_insertion_point(destructor:AvatarRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AvatarRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatarhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AvatarRequestMessage::ArenaDtor(void* object) {
  AvatarRequestMessage* _this = reinterpret_cast< AvatarRequestMessage* >(object);
  (void)_this;
}
void AvatarRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvatarRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarRequestMessage& AvatarRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvatarRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AvatarRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    avatarhash_.ClearNonDefaultToEmpty();
  }
  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AvatarRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes avatarHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatarhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvatarRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvatarRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required bytes avatarHash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_avatarhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarRequestMessage)
  return target;
}

size_t AvatarRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarRequestMessage)
  size_t total_size = 0;

  if (_internal_has_avatarhash()) {
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarhash());
  }

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  return total_size;
}
size_t AvatarRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarRequestMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarhash());

    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AvatarRequestMessage*>(
      &from));
}

void AvatarRequestMessage::MergeFrom(const AvatarRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_avatarhash(from._internal_avatarhash());
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvatarRequestMessage::CopyFrom(const AvatarRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AvatarRequestMessage::InternalSwap(AvatarRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatarhash_.Swap(&other->avatarhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(requestid_, other->requestid_);
}

std::string AvatarRequestMessage::GetTypeName() const {
  return "AvatarRequestMessage";
}


// ===================================================================

void AvatarHeaderMessage::InitAsDefaultInstance() {
}
class AvatarHeaderMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarHeaderMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avatartype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avatarsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AvatarHeaderMessage::AvatarHeaderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AvatarHeaderMessage)
}
AvatarHeaderMessage::AvatarHeaderMessage(const AvatarHeaderMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatartype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(avatartype_));
  // @@protoc_insertion_point(copy_constructor:AvatarHeaderMessage)
}

void AvatarHeaderMessage::SharedCtor() {
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarsize_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(avatarsize_));
  avatartype_ = 1;
}

AvatarHeaderMessage::~AvatarHeaderMessage() {
  // @@protoc_insertion_point(destructor:AvatarHeaderMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AvatarHeaderMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AvatarHeaderMessage::ArenaDtor(void* object) {
  AvatarHeaderMessage* _this = reinterpret_cast< AvatarHeaderMessage* >(object);
  (void)_this;
}
void AvatarHeaderMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvatarHeaderMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarHeaderMessage& AvatarHeaderMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvatarHeaderMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AvatarHeaderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarHeaderMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avatarsize_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(avatarsize_));
    avatartype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AvatarHeaderMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetAvatarType avatarType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetAvatarType_IsValid(val))) {
            _internal_set_avatartype(static_cast<::NetAvatarType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 avatarSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_avatarsize(&has_bits);
          avatarsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvatarHeaderMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvatarHeaderMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .NetAvatarType avatarType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_avatartype(), target);
  }

  // required uint32 avatarSize = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_avatarsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarHeaderMessage)
  return target;
}

size_t AvatarHeaderMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarHeaderMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  if (_internal_has_avatarsize()) {
    // required uint32 avatarSize = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avatarsize());
  }

  if (_internal_has_avatartype()) {
    // required .NetAvatarType avatarType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_avatartype());
  }

  return total_size;
}
size_t AvatarHeaderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarHeaderMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());

    // required uint32 avatarSize = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avatarsize());

    // required .NetAvatarType avatarType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_avatartype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarHeaderMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AvatarHeaderMessage*>(
      &from));
}

void AvatarHeaderMessage::MergeFrom(const AvatarHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarHeaderMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      avatarsize_ = from.avatarsize_;
    }
    if (cached_has_bits & 0x00000004u) {
      avatartype_ = from.avatartype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvatarHeaderMessage::CopyFrom(const AvatarHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarHeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarHeaderMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AvatarHeaderMessage::InternalSwap(AvatarHeaderMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvatarHeaderMessage, avatarsize_)
      + sizeof(AvatarHeaderMessage::avatarsize_)
      - PROTOBUF_FIELD_OFFSET(AvatarHeaderMessage, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
  swap(avatartype_, other->avatartype_);
}

std::string AvatarHeaderMessage::GetTypeName() const {
  return "AvatarHeaderMessage";
}


// ===================================================================

void AvatarDataMessage::InitAsDefaultInstance() {
}
class AvatarDataMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarDataMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatarblock(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AvatarDataMessage::AvatarDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AvatarDataMessage)
}
AvatarDataMessage::AvatarDataMessage(const AvatarDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  avatarblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_avatarblock()) {
    avatarblock_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatarblock(),
      GetArena());
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:AvatarDataMessage)
}

void AvatarDataMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AvatarDataMessage_pokerth_2eproto.base);
  avatarblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
}

AvatarDataMessage::~AvatarDataMessage() {
  // @@protoc_insertion_point(destructor:AvatarDataMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AvatarDataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatarblock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AvatarDataMessage::ArenaDtor(void* object) {
  AvatarDataMessage* _this = reinterpret_cast< AvatarDataMessage* >(object);
  (void)_this;
}
void AvatarDataMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvatarDataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarDataMessage& AvatarDataMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvatarDataMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AvatarDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarDataMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    avatarblock_.ClearNonDefaultToEmpty();
  }
  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AvatarDataMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes avatarBlock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatarblock();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvatarDataMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvatarDataMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required bytes avatarBlock = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_avatarblock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarDataMessage)
  return target;
}

size_t AvatarDataMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarDataMessage)
  size_t total_size = 0;

  if (_internal_has_avatarblock()) {
    // required bytes avatarBlock = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarblock());
  }

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  return total_size;
}
size_t AvatarDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarDataMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes avatarBlock = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarblock());

    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarDataMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AvatarDataMessage*>(
      &from));
}

void AvatarDataMessage::MergeFrom(const AvatarDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_avatarblock(from._internal_avatarblock());
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvatarDataMessage::CopyFrom(const AvatarDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarDataMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AvatarDataMessage::InternalSwap(AvatarDataMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatarblock_.Swap(&other->avatarblock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(requestid_, other->requestid_);
}

std::string AvatarDataMessage::GetTypeName() const {
  return "AvatarDataMessage";
}


// ===================================================================

void AvatarEndMessage::InitAsDefaultInstance() {
}
class AvatarEndMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarEndMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AvatarEndMessage::AvatarEndMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AvatarEndMessage)
}
AvatarEndMessage::AvatarEndMessage(const AvatarEndMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:AvatarEndMessage)
}

void AvatarEndMessage::SharedCtor() {
  requestid_ = 0u;
}

AvatarEndMessage::~AvatarEndMessage() {
  // @@protoc_insertion_point(destructor:AvatarEndMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AvatarEndMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AvatarEndMessage::ArenaDtor(void* object) {
  AvatarEndMessage* _this = reinterpret_cast< AvatarEndMessage* >(object);
  (void)_this;
}
void AvatarEndMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvatarEndMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarEndMessage& AvatarEndMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvatarEndMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AvatarEndMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarEndMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AvatarEndMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvatarEndMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvatarEndMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarEndMessage)
  return target;
}

size_t AvatarEndMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarEndMessage)
  size_t total_size = 0;

  // required uint32 requestId = 1;
  if (_internal_has_requestid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarEndMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AvatarEndMessage*>(
      &from));
}

void AvatarEndMessage::MergeFrom(const AvatarEndMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarEndMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_requestid()) {
    _internal_set_requestid(from._internal_requestid());
  }
}

void AvatarEndMessage::CopyFrom(const AvatarEndMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarEndMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarEndMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AvatarEndMessage::InternalSwap(AvatarEndMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
}

std::string AvatarEndMessage::GetTypeName() const {
  return "AvatarEndMessage";
}


// ===================================================================

void UnknownAvatarMessage::InitAsDefaultInstance() {
}
class UnknownAvatarMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownAvatarMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UnknownAvatarMessage::UnknownAvatarMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnknownAvatarMessage)
}
UnknownAvatarMessage::UnknownAvatarMessage(const UnknownAvatarMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:UnknownAvatarMessage)
}

void UnknownAvatarMessage::SharedCtor() {
  requestid_ = 0u;
}

UnknownAvatarMessage::~UnknownAvatarMessage() {
  // @@protoc_insertion_point(destructor:UnknownAvatarMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UnknownAvatarMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnknownAvatarMessage::ArenaDtor(void* object) {
  UnknownAvatarMessage* _this = reinterpret_cast< UnknownAvatarMessage* >(object);
  (void)_this;
}
void UnknownAvatarMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnknownAvatarMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownAvatarMessage& UnknownAvatarMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnknownAvatarMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void UnknownAvatarMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:UnknownAvatarMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnknownAvatarMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnknownAvatarMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnknownAvatarMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnknownAvatarMessage)
  return target;
}

size_t UnknownAvatarMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnknownAvatarMessage)
  size_t total_size = 0;

  // required uint32 requestId = 1;
  if (_internal_has_requestid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownAvatarMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UnknownAvatarMessage*>(
      &from));
}

void UnknownAvatarMessage::MergeFrom(const UnknownAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnknownAvatarMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_requestid()) {
    _internal_set_requestid(from._internal_requestid());
  }
}

void UnknownAvatarMessage::CopyFrom(const UnknownAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnknownAvatarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownAvatarMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UnknownAvatarMessage::InternalSwap(UnknownAvatarMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
}

std::string UnknownAvatarMessage::GetTypeName() const {
  return "UnknownAvatarMessage";
}


// ===================================================================

void PlayerListMessage::InitAsDefaultInstance() {
}
class PlayerListMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerListMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerlistnotification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayerListMessage::PlayerListMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerListMessage)
}
PlayerListMessage::PlayerListMessage(const PlayerListMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerlistnotification_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(playerlistnotification_));
  // @@protoc_insertion_point(copy_constructor:PlayerListMessage)
}

void PlayerListMessage::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerlistnotification_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(playerlistnotification_));
}

PlayerListMessage::~PlayerListMessage() {
  // @@protoc_insertion_point(destructor:PlayerListMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PlayerListMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerListMessage::ArenaDtor(void* object) {
  PlayerListMessage* _this = reinterpret_cast< PlayerListMessage* >(object);
  (void)_this;
}
void PlayerListMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerListMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerListMessage& PlayerListMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerListMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerListMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerListMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerlistnotification_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(playerlistnotification_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayerListMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PlayerListMessage_PlayerListNotification_IsValid(val))) {
            _internal_set_playerlistnotification(static_cast<::PlayerListMessage_PlayerListNotification>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerListMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerListMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playerlistnotification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerListMessage)
  return target;
}

size_t PlayerListMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerListMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_playerlistnotification()) {
    // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playerlistnotification());
  }

  return total_size;
}
size_t PlayerListMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerListMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playerlistnotification());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerListMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerListMessage*>(
      &from));
}

void PlayerListMessage::MergeFrom(const PlayerListMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerListMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerlistnotification_ = from.playerlistnotification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerListMessage::CopyFrom(const PlayerListMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerListMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerListMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerListMessage::InternalSwap(PlayerListMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerListMessage, playerlistnotification_)
      + sizeof(PlayerListMessage::playerlistnotification_)
      - PROTOBUF_FIELD_OFFSET(PlayerListMessage, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string PlayerListMessage::GetTypeName() const {
  return "PlayerListMessage";
}


// ===================================================================

void GameListNewMessage::InitAsDefaultInstance() {
  ::_GameListNewMessage_default_instance_._instance.get_mutable()->gameinfo_ = const_cast< ::NetGameInfo*>(
      ::NetGameInfo::internal_default_instance());
}
class GameListNewMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListNewMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gamemode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isprivate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adminplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::NetGameInfo& gameinfo(const GameListNewMessage* msg);
  static void set_has_gameinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::NetGameInfo&
GameListNewMessage::_Internal::gameinfo(const GameListNewMessage* msg) {
  return *msg->gameinfo_;
}
GameListNewMessage::GameListNewMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  playerids_(arena),
  spectatorids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameListNewMessage)
}
GameListNewMessage::GameListNewMessage(const GameListNewMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      playerids_(from.playerids_),
      spectatorids_(from.spectatorids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_gameinfo()) {
    gameinfo_ = new ::NetGameInfo(*from.gameinfo_);
  } else {
    gameinfo_ = nullptr;
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamemode_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(gamemode_));
  // @@protoc_insertion_point(copy_constructor:GameListNewMessage)
}

void GameListNewMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameListNewMessage_pokerth_2eproto.base);
  ::memset(&gameinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adminplayerid_) -
      reinterpret_cast<char*>(&gameinfo_)) + sizeof(adminplayerid_));
  gamemode_ = 1;
}

GameListNewMessage::~GameListNewMessage() {
  // @@protoc_insertion_point(destructor:GameListNewMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameListNewMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gameinfo_;
}

void GameListNewMessage::ArenaDtor(void* object) {
  GameListNewMessage* _this = reinterpret_cast< GameListNewMessage* >(object);
  (void)_this;
}
void GameListNewMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListNewMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListNewMessage& GameListNewMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameListNewMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListNewMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListNewMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerids_.Clear();
  spectatorids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gameinfo_ != nullptr);
    gameinfo_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adminplayerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(adminplayerid_));
    gamemode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameListNewMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameMode gameMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameMode_IsValid(val))) {
            _internal_set_gamemode(static_cast<::NetGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bool isPrivate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isprivate(&has_bits);
          isprivate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 playerIds = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_playerids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_playerids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 adminPlayerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_adminplayerid(&has_bits);
          adminplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameInfo gameInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 spectatorIds = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_spectatorids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_spectatorids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameListNewMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListNewMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required .NetGameMode gameMode = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamemode(), target);
  }

  // required bool isPrivate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isprivate(), target);
  }

  // repeated uint32 playerIds = 4 [packed = true];
  {
    int byte_size = _playerids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_playerids(), byte_size, target);
    }
  }

  // required uint32 adminPlayerId = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_adminplayerid(), target);
  }

  // required .NetGameInfo gameInfo = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::gameinfo(this), target, stream);
  }

  // repeated uint32 spectatorIds = 7 [packed = true];
  {
    int byte_size = _spectatorids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_spectatorids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListNewMessage)
  return target;
}

size_t GameListNewMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListNewMessage)
  size_t total_size = 0;

  if (_internal_has_gameinfo()) {
    // required .NetGameInfo gameInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameinfo_);
  }

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_isprivate()) {
    // required bool isPrivate = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_adminplayerid()) {
    // required uint32 adminPlayerId = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_adminplayerid());
  }

  if (_internal_has_gamemode()) {
    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamemode());
  }

  return total_size;
}
size_t GameListNewMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListNewMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .NetGameInfo gameInfo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameinfo_);

    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required bool isPrivate = 3;
    total_size += 1 + 1;

    // required uint32 adminPlayerId = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_adminplayerid());

    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerIds = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->playerids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _playerids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 spectatorIds = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->spectatorids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spectatorids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListNewMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameListNewMessage*>(
      &from));
}

void GameListNewMessage::MergeFrom(const GameListNewMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListNewMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerids_.MergeFrom(from.playerids_);
  spectatorids_.MergeFrom(from.spectatorids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gameinfo()->::NetGameInfo::MergeFrom(from._internal_gameinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      isprivate_ = from.isprivate_;
    }
    if (cached_has_bits & 0x00000008u) {
      adminplayerid_ = from.adminplayerid_;
    }
    if (cached_has_bits & 0x00000010u) {
      gamemode_ = from.gamemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListNewMessage::CopyFrom(const GameListNewMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListNewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListNewMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gameinfo()) {
    if (!gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void GameListNewMessage::InternalSwap(GameListNewMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerids_.InternalSwap(&other->playerids_);
  spectatorids_.InternalSwap(&other->spectatorids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListNewMessage, adminplayerid_)
      + sizeof(GameListNewMessage::adminplayerid_)
      - PROTOBUF_FIELD_OFFSET(GameListNewMessage, gameinfo_)>(
          reinterpret_cast<char*>(&gameinfo_),
          reinterpret_cast<char*>(&other->gameinfo_));
  swap(gamemode_, other->gamemode_);
}

std::string GameListNewMessage::GetTypeName() const {
  return "GameListNewMessage";
}


// ===================================================================

void GameListUpdateMessage::InitAsDefaultInstance() {
}
class GameListUpdateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListUpdateMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamemode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListUpdateMessage::GameListUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameListUpdateMessage)
}
GameListUpdateMessage::GameListUpdateMessage(const GameListUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamemode_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(gamemode_));
  // @@protoc_insertion_point(copy_constructor:GameListUpdateMessage)
}

void GameListUpdateMessage::SharedCtor() {
  gameid_ = 0u;
  gamemode_ = 1;
}

GameListUpdateMessage::~GameListUpdateMessage() {
  // @@protoc_insertion_point(destructor:GameListUpdateMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameListUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameListUpdateMessage::ArenaDtor(void* object) {
  GameListUpdateMessage* _this = reinterpret_cast< GameListUpdateMessage* >(object);
  (void)_this;
}
void GameListUpdateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListUpdateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListUpdateMessage& GameListUpdateMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameListUpdateMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListUpdateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    gameid_ = 0u;
    gamemode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameListUpdateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameMode gameMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameMode_IsValid(val))) {
            _internal_set_gamemode(static_cast<::NetGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameListUpdateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListUpdateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required .NetGameMode gameMode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamemode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListUpdateMessage)
  return target;
}

size_t GameListUpdateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListUpdateMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_gamemode()) {
    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamemode());
  }

  return total_size;
}
size_t GameListUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListUpdateMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListUpdateMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameListUpdateMessage*>(
      &from));
}

void GameListUpdateMessage::MergeFrom(const GameListUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamemode_ = from.gamemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListUpdateMessage::CopyFrom(const GameListUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListUpdateMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameListUpdateMessage::InternalSwap(GameListUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(gamemode_, other->gamemode_);
}

std::string GameListUpdateMessage::GetTypeName() const {
  return "GameListUpdateMessage";
}


// ===================================================================

void GameListPlayerJoinedMessage::InitAsDefaultInstance() {
}
class GameListPlayerJoinedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListPlayerJoinedMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListPlayerJoinedMessage::GameListPlayerJoinedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameListPlayerJoinedMessage)
}
GameListPlayerJoinedMessage::GameListPlayerJoinedMessage(const GameListPlayerJoinedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListPlayerJoinedMessage)
}

void GameListPlayerJoinedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

GameListPlayerJoinedMessage::~GameListPlayerJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameListPlayerJoinedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameListPlayerJoinedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameListPlayerJoinedMessage::ArenaDtor(void* object) {
  GameListPlayerJoinedMessage* _this = reinterpret_cast< GameListPlayerJoinedMessage* >(object);
  (void)_this;
}
void GameListPlayerJoinedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListPlayerJoinedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListPlayerJoinedMessage& GameListPlayerJoinedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameListPlayerJoinedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListPlayerJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListPlayerJoinedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameListPlayerJoinedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameListPlayerJoinedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListPlayerJoinedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListPlayerJoinedMessage)
  return target;
}

size_t GameListPlayerJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListPlayerJoinedMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  return total_size;
}
size_t GameListPlayerJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListPlayerJoinedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListPlayerJoinedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameListPlayerJoinedMessage*>(
      &from));
}

void GameListPlayerJoinedMessage::MergeFrom(const GameListPlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListPlayerJoinedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListPlayerJoinedMessage::CopyFrom(const GameListPlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListPlayerJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerJoinedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameListPlayerJoinedMessage::InternalSwap(GameListPlayerJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListPlayerJoinedMessage, playerid_)
      + sizeof(GameListPlayerJoinedMessage::playerid_)
      - PROTOBUF_FIELD_OFFSET(GameListPlayerJoinedMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string GameListPlayerJoinedMessage::GetTypeName() const {
  return "GameListPlayerJoinedMessage";
}


// ===================================================================

void GameListPlayerLeftMessage::InitAsDefaultInstance() {
}
class GameListPlayerLeftMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListPlayerLeftMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListPlayerLeftMessage::GameListPlayerLeftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameListPlayerLeftMessage)
}
GameListPlayerLeftMessage::GameListPlayerLeftMessage(const GameListPlayerLeftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListPlayerLeftMessage)
}

void GameListPlayerLeftMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

GameListPlayerLeftMessage::~GameListPlayerLeftMessage() {
  // @@protoc_insertion_point(destructor:GameListPlayerLeftMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameListPlayerLeftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameListPlayerLeftMessage::ArenaDtor(void* object) {
  GameListPlayerLeftMessage* _this = reinterpret_cast< GameListPlayerLeftMessage* >(object);
  (void)_this;
}
void GameListPlayerLeftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListPlayerLeftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListPlayerLeftMessage& GameListPlayerLeftMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameListPlayerLeftMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListPlayerLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListPlayerLeftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameListPlayerLeftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameListPlayerLeftMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListPlayerLeftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListPlayerLeftMessage)
  return target;
}

size_t GameListPlayerLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListPlayerLeftMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  return total_size;
}
size_t GameListPlayerLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListPlayerLeftMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListPlayerLeftMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameListPlayerLeftMessage*>(
      &from));
}

void GameListPlayerLeftMessage::MergeFrom(const GameListPlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListPlayerLeftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListPlayerLeftMessage::CopyFrom(const GameListPlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListPlayerLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerLeftMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameListPlayerLeftMessage::InternalSwap(GameListPlayerLeftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListPlayerLeftMessage, playerid_)
      + sizeof(GameListPlayerLeftMessage::playerid_)
      - PROTOBUF_FIELD_OFFSET(GameListPlayerLeftMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string GameListPlayerLeftMessage::GetTypeName() const {
  return "GameListPlayerLeftMessage";
}


// ===================================================================

void GameListSpectatorJoinedMessage::InitAsDefaultInstance() {
}
class GameListSpectatorJoinedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListSpectatorJoinedMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListSpectatorJoinedMessage::GameListSpectatorJoinedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameListSpectatorJoinedMessage)
}
GameListSpectatorJoinedMessage::GameListSpectatorJoinedMessage(const GameListSpectatorJoinedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListSpectatorJoinedMessage)
}

void GameListSpectatorJoinedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

GameListSpectatorJoinedMessage::~GameListSpectatorJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameListSpectatorJoinedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameListSpectatorJoinedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameListSpectatorJoinedMessage::ArenaDtor(void* object) {
  GameListSpectatorJoinedMessage* _this = reinterpret_cast< GameListSpectatorJoinedMessage* >(object);
  (void)_this;
}
void GameListSpectatorJoinedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListSpectatorJoinedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListSpectatorJoinedMessage& GameListSpectatorJoinedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameListSpectatorJoinedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListSpectatorJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListSpectatorJoinedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameListSpectatorJoinedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameListSpectatorJoinedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListSpectatorJoinedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListSpectatorJoinedMessage)
  return target;
}

size_t GameListSpectatorJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListSpectatorJoinedMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  return total_size;
}
size_t GameListSpectatorJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListSpectatorJoinedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListSpectatorJoinedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameListSpectatorJoinedMessage*>(
      &from));
}

void GameListSpectatorJoinedMessage::MergeFrom(const GameListSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListSpectatorJoinedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListSpectatorJoinedMessage::CopyFrom(const GameListSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListSpectatorJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListSpectatorJoinedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameListSpectatorJoinedMessage::InternalSwap(GameListSpectatorJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListSpectatorJoinedMessage, playerid_)
      + sizeof(GameListSpectatorJoinedMessage::playerid_)
      - PROTOBUF_FIELD_OFFSET(GameListSpectatorJoinedMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string GameListSpectatorJoinedMessage::GetTypeName() const {
  return "GameListSpectatorJoinedMessage";
}


// ===================================================================

void GameListSpectatorLeftMessage::InitAsDefaultInstance() {
}
class GameListSpectatorLeftMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListSpectatorLeftMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListSpectatorLeftMessage::GameListSpectatorLeftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameListSpectatorLeftMessage)
}
GameListSpectatorLeftMessage::GameListSpectatorLeftMessage(const GameListSpectatorLeftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListSpectatorLeftMessage)
}

void GameListSpectatorLeftMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

GameListSpectatorLeftMessage::~GameListSpectatorLeftMessage() {
  // @@protoc_insertion_point(destructor:GameListSpectatorLeftMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameListSpectatorLeftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameListSpectatorLeftMessage::ArenaDtor(void* object) {
  GameListSpectatorLeftMessage* _this = reinterpret_cast< GameListSpectatorLeftMessage* >(object);
  (void)_this;
}
void GameListSpectatorLeftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListSpectatorLeftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListSpectatorLeftMessage& GameListSpectatorLeftMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameListSpectatorLeftMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListSpectatorLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListSpectatorLeftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameListSpectatorLeftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameListSpectatorLeftMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListSpectatorLeftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListSpectatorLeftMessage)
  return target;
}

size_t GameListSpectatorLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListSpectatorLeftMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  return total_size;
}
size_t GameListSpectatorLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListSpectatorLeftMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListSpectatorLeftMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameListSpectatorLeftMessage*>(
      &from));
}

void GameListSpectatorLeftMessage::MergeFrom(const GameListSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListSpectatorLeftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListSpectatorLeftMessage::CopyFrom(const GameListSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListSpectatorLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListSpectatorLeftMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameListSpectatorLeftMessage::InternalSwap(GameListSpectatorLeftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListSpectatorLeftMessage, playerid_)
      + sizeof(GameListSpectatorLeftMessage::playerid_)
      - PROTOBUF_FIELD_OFFSET(GameListSpectatorLeftMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string GameListSpectatorLeftMessage::GetTypeName() const {
  return "GameListSpectatorLeftMessage";
}


// ===================================================================

void GameListAdminChangedMessage::InitAsDefaultInstance() {
}
class GameListAdminChangedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListAdminChangedMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newadminplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameListAdminChangedMessage::GameListAdminChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameListAdminChangedMessage)
}
GameListAdminChangedMessage::GameListAdminChangedMessage(const GameListAdminChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newadminplayerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(newadminplayerid_));
  // @@protoc_insertion_point(copy_constructor:GameListAdminChangedMessage)
}

void GameListAdminChangedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newadminplayerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(newadminplayerid_));
}

GameListAdminChangedMessage::~GameListAdminChangedMessage() {
  // @@protoc_insertion_point(destructor:GameListAdminChangedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameListAdminChangedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameListAdminChangedMessage::ArenaDtor(void* object) {
  GameListAdminChangedMessage* _this = reinterpret_cast< GameListAdminChangedMessage* >(object);
  (void)_this;
}
void GameListAdminChangedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListAdminChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListAdminChangedMessage& GameListAdminChangedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameListAdminChangedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListAdminChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListAdminChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newadminplayerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(newadminplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameListAdminChangedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 newAdminPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_newadminplayerid(&has_bits);
          newadminplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameListAdminChangedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameListAdminChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 newAdminPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_newadminplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameListAdminChangedMessage)
  return target;
}

size_t GameListAdminChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListAdminChangedMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_newadminplayerid()) {
    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newadminplayerid());
  }

  return total_size;
}
size_t GameListAdminChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListAdminChangedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newadminplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListAdminChangedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameListAdminChangedMessage*>(
      &from));
}

void GameListAdminChangedMessage::MergeFrom(const GameListAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListAdminChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      newadminplayerid_ = from.newadminplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListAdminChangedMessage::CopyFrom(const GameListAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListAdminChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListAdminChangedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameListAdminChangedMessage::InternalSwap(GameListAdminChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListAdminChangedMessage, newadminplayerid_)
      + sizeof(GameListAdminChangedMessage::newadminplayerid_)
      - PROTOBUF_FIELD_OFFSET(GameListAdminChangedMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string GameListAdminChangedMessage::GetTypeName() const {
  return "GameListAdminChangedMessage";
}


// ===================================================================

void PlayerInfoRequestMessage::InitAsDefaultInstance() {
}
class PlayerInfoRequestMessage::_Internal {
 public:
};

PlayerInfoRequestMessage::PlayerInfoRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  playerid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerInfoRequestMessage)
}
PlayerInfoRequestMessage::PlayerInfoRequestMessage(const PlayerInfoRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      playerid_(from.playerid_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlayerInfoRequestMessage)
}

void PlayerInfoRequestMessage::SharedCtor() {
}

PlayerInfoRequestMessage::~PlayerInfoRequestMessage() {
  // @@protoc_insertion_point(destructor:PlayerInfoRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PlayerInfoRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerInfoRequestMessage::ArenaDtor(void* object) {
  PlayerInfoRequestMessage* _this = reinterpret_cast< PlayerInfoRequestMessage* >(object);
  (void)_this;
}
void PlayerInfoRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfoRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoRequestMessage& PlayerInfoRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfoRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayerInfoRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 playerId = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_playerid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_playerid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfoRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 playerId = 1 [packed = true];
  {
    int byte_size = _playerid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_playerid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoRequestMessage)
  return target;
}

size_t PlayerInfoRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoRequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerId = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->playerid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _playerid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerInfoRequestMessage*>(
      &from));
}

void PlayerInfoRequestMessage::MergeFrom(const PlayerInfoRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerid_.MergeFrom(from.playerid_);
}

void PlayerInfoRequestMessage::CopyFrom(const PlayerInfoRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoRequestMessage::IsInitialized() const {
  return true;
}

void PlayerInfoRequestMessage::InternalSwap(PlayerInfoRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  playerid_.InternalSwap(&other->playerid_);
}

std::string PlayerInfoRequestMessage::GetTypeName() const {
  return "PlayerInfoRequestMessage";
}


// ===================================================================

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InitAsDefaultInstance() {
}
class PlayerInfoReplyMessage_PlayerInfoData_AvatarData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfoReplyMessage_PlayerInfoData_AvatarData>()._has_bits_);
  static void set_has_avatartype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}
PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  avatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_avatarhash()) {
    avatarhash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatarhash(),
      GetArena());
  }
  avatartype_ = from.avatartype_;
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto.base);
  avatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatartype_ = 1;
}

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::~PlayerInfoReplyMessage_PlayerInfoData_AvatarData() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatarhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::ArenaDtor(void* object) {
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData* _this = reinterpret_cast< PlayerInfoReplyMessage_PlayerInfoData_AvatarData* >(object);
  (void)_this;
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      avatarhash_.ClearNonDefaultToEmpty();
    }
    avatartype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .NetAvatarType avatarType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetAvatarType_IsValid(val))) {
            _internal_set_avatartype(static_cast<::NetAvatarType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes avatarHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatarhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NetAvatarType avatarType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_avatartype(), target);
  }

  // required bytes avatarHash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_avatarhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  return target;
}

size_t PlayerInfoReplyMessage_PlayerInfoData_AvatarData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  size_t total_size = 0;

  if (_internal_has_avatarhash()) {
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarhash());
  }

  if (_internal_has_avatartype()) {
    // required .NetAvatarType avatarType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_avatartype());
  }

  return total_size;
}
size_t PlayerInfoReplyMessage_PlayerInfoData_AvatarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarhash());

    // required .NetAvatarType avatarType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_avatartype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(
      &from));
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_avatarhash(from._internal_avatarhash());
    }
    if (cached_has_bits & 0x00000002u) {
      avatartype_ = from.avatartype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InternalSwap(PlayerInfoReplyMessage_PlayerInfoData_AvatarData* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatarhash_.Swap(&other->avatarhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(avatartype_, other->avatartype_);
}

std::string PlayerInfoReplyMessage_PlayerInfoData_AvatarData::GetTypeName() const {
  return "PlayerInfoReplyMessage.PlayerInfoData.AvatarData";
}


// ===================================================================

void PlayerInfoReplyMessage_PlayerInfoData::InitAsDefaultInstance() {
  ::_PlayerInfoReplyMessage_PlayerInfoData_default_instance_._instance.get_mutable()->avatardata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(
      ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::internal_default_instance());
}
class PlayerInfoReplyMessage_PlayerInfoData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfoReplyMessage_PlayerInfoData>()._has_bits_);
  static void set_has_playername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ishuman(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playerrights(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData& avatardata(const PlayerInfoReplyMessage_PlayerInfoData* msg);
  static void set_has_avatardata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000019) ^ 0x00000019) != 0;
  }
};

const ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData&
PlayerInfoReplyMessage_PlayerInfoData::_Internal::avatardata(const PlayerInfoReplyMessage_PlayerInfoData* msg) {
  return *msg->avatardata_;
}
PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerInfoReplyMessage.PlayerInfoData)
}
PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData(const PlayerInfoReplyMessage_PlayerInfoData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playername()) {
    playername_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_playername(),
      GetArena());
  }
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_countrycode()) {
    countrycode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_countrycode(),
      GetArena());
  }
  if (from._internal_has_avatardata()) {
    avatardata_ = new ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(*from.avatardata_);
  } else {
    avatardata_ = nullptr;
  }
  ::memcpy(&ishuman_, &from.ishuman_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerrights_) -
    reinterpret_cast<char*>(&ishuman_)) + sizeof(playerrights_));
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage.PlayerInfoData)
}

void PlayerInfoReplyMessage_PlayerInfoData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto.base);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatardata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishuman_) -
      reinterpret_cast<char*>(&avatardata_)) + sizeof(ishuman_));
  playerrights_ = 1;
}

PlayerInfoReplyMessage_PlayerInfoData::~PlayerInfoReplyMessage_PlayerInfoData() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage.PlayerInfoData)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PlayerInfoReplyMessage_PlayerInfoData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countrycode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete avatardata_;
}

void PlayerInfoReplyMessage_PlayerInfoData::ArenaDtor(void* object) {
  PlayerInfoReplyMessage_PlayerInfoData* _this = reinterpret_cast< PlayerInfoReplyMessage_PlayerInfoData* >(object);
  (void)_this;
}
void PlayerInfoReplyMessage_PlayerInfoData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfoReplyMessage_PlayerInfoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoReplyMessage_PlayerInfoData& PlayerInfoReplyMessage_PlayerInfoData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoReplyMessage_PlayerInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage.PlayerInfoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(avatardata_ != nullptr);
      avatardata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ishuman_ = false;
    playerrights_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayerInfoReplyMessage_PlayerInfoData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string playerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isHuman = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ishuman(&has_bits);
          ishuman_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetPlayerInfoRights playerRights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetPlayerInfoRights_IsValid(val))) {
            _internal_set_playerrights(static_cast<::NetPlayerInfoRights>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string countryCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatardata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfoReplyMessage_PlayerInfoData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoReplyMessage.PlayerInfoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string playerName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playername(), target);
  }

  // required bool isHuman = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ishuman(), target);
  }

  // required .NetPlayerInfoRights playerRights = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_playerrights(), target);
  }

  // optional string countryCode = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_countrycode(), target);
  }

  // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::avatardata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoReplyMessage.PlayerInfoData)
  return target;
}

size_t PlayerInfoReplyMessage_PlayerInfoData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerInfoReplyMessage.PlayerInfoData)
  size_t total_size = 0;

  if (_internal_has_playername()) {
    // required string playerName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  if (_internal_has_ishuman()) {
    // required bool isHuman = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_playerrights()) {
    // required .NetPlayerInfoRights playerRights = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playerrights());
  }

  return total_size;
}
size_t PlayerInfoReplyMessage_PlayerInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage.PlayerInfoData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required string playerName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());

    // required bool isHuman = 2;
    total_size += 1 + 1;

    // required .NetPlayerInfoRights playerRights = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playerrights());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string countryCode = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_countrycode());
    }

    // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatardata_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoReplyMessage_PlayerInfoData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerInfoReplyMessage_PlayerInfoData*>(
      &from));
}

void PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(const PlayerInfoReplyMessage_PlayerInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage.PlayerInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playername(from._internal_playername());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_avatardata()->::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(from._internal_avatardata());
    }
    if (cached_has_bits & 0x00000008u) {
      ishuman_ = from.ishuman_;
    }
    if (cached_has_bits & 0x00000010u) {
      playerrights_ = from.playerrights_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfoReplyMessage_PlayerInfoData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage.PlayerInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_avatardata()) {
    if (!avatardata_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData::InternalSwap(PlayerInfoReplyMessage_PlayerInfoData* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playername_.Swap(&other->playername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  countrycode_.Swap(&other->countrycode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, ishuman_)
      + sizeof(PlayerInfoReplyMessage_PlayerInfoData::ishuman_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, avatardata_)>(
          reinterpret_cast<char*>(&avatardata_),
          reinterpret_cast<char*>(&other->avatardata_));
  swap(playerrights_, other->playerrights_);
}

std::string PlayerInfoReplyMessage_PlayerInfoData::GetTypeName() const {
  return "PlayerInfoReplyMessage.PlayerInfoData";
}


// ===================================================================

void PlayerInfoReplyMessage::InitAsDefaultInstance() {
  ::_PlayerInfoReplyMessage_default_instance_._instance.get_mutable()->playerinfodata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData*>(
      ::PlayerInfoReplyMessage_PlayerInfoData::internal_default_instance());
}
class PlayerInfoReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfoReplyMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PlayerInfoReplyMessage_PlayerInfoData& playerinfodata(const PlayerInfoReplyMessage* msg);
  static void set_has_playerinfodata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::PlayerInfoReplyMessage_PlayerInfoData&
PlayerInfoReplyMessage::_Internal::playerinfodata(const PlayerInfoReplyMessage* msg) {
  return *msg->playerinfodata_;
}
PlayerInfoReplyMessage::PlayerInfoReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerInfoReplyMessage)
}
PlayerInfoReplyMessage::PlayerInfoReplyMessage(const PlayerInfoReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_playerinfodata()) {
    playerinfodata_ = new ::PlayerInfoReplyMessage_PlayerInfoData(*from.playerinfodata_);
  } else {
    playerinfodata_ = nullptr;
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage)
}

void PlayerInfoReplyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfoReplyMessage_pokerth_2eproto.base);
  ::memset(&playerinfodata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&playerinfodata_)) + sizeof(playerid_));
}

PlayerInfoReplyMessage::~PlayerInfoReplyMessage() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PlayerInfoReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete playerinfodata_;
}

void PlayerInfoReplyMessage::ArenaDtor(void* object) {
  PlayerInfoReplyMessage* _this = reinterpret_cast< PlayerInfoReplyMessage* >(object);
  (void)_this;
}
void PlayerInfoReplyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfoReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoReplyMessage& PlayerInfoReplyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfoReplyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(playerinfodata_ != nullptr);
    playerinfodata_->Clear();
  }
  playerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayerInfoReplyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfodata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfoReplyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::playerinfodata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoReplyMessage)
  return target;
}

size_t PlayerInfoReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage)
  size_t total_size = 0;

  // required uint32 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerinfodata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoReplyMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerInfoReplyMessage*>(
      &from));
}

void PlayerInfoReplyMessage::MergeFrom(const PlayerInfoReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_playerinfodata()->::PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(from._internal_playerinfodata());
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfoReplyMessage::CopyFrom(const PlayerInfoReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_playerinfodata()) {
    if (!playerinfodata_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage::InternalSwap(PlayerInfoReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfoReplyMessage, playerid_)
      + sizeof(PlayerInfoReplyMessage::playerid_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfoReplyMessage, playerinfodata_)>(
          reinterpret_cast<char*>(&playerinfodata_),
          reinterpret_cast<char*>(&other->playerinfodata_));
}

std::string PlayerInfoReplyMessage::GetTypeName() const {
  return "PlayerInfoReplyMessage";
}


// ===================================================================

void SubscriptionRequestMessage::InitAsDefaultInstance() {
}
class SubscriptionRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionRequestMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subscriptionaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SubscriptionRequestMessage::SubscriptionRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubscriptionRequestMessage)
}
SubscriptionRequestMessage::SubscriptionRequestMessage(const SubscriptionRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscriptionaction_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(subscriptionaction_));
  // @@protoc_insertion_point(copy_constructor:SubscriptionRequestMessage)
}

void SubscriptionRequestMessage::SharedCtor() {
  requestid_ = 0u;
  subscriptionaction_ = 1;
}

SubscriptionRequestMessage::~SubscriptionRequestMessage() {
  // @@protoc_insertion_point(destructor:SubscriptionRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SubscriptionRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscriptionRequestMessage::ArenaDtor(void* object) {
  SubscriptionRequestMessage* _this = reinterpret_cast< SubscriptionRequestMessage* >(object);
  (void)_this;
}
void SubscriptionRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionRequestMessage& SubscriptionRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SubscriptionRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    requestid_ = 0u;
    subscriptionaction_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SubscriptionRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SubscriptionRequestMessage_SubscriptionAction_IsValid(val))) {
            _internal_set_subscriptionaction(static_cast<::SubscriptionRequestMessage_SubscriptionAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubscriptionRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_subscriptionaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubscriptionRequestMessage)
  return target;
}

size_t SubscriptionRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SubscriptionRequestMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  if (_internal_has_subscriptionaction()) {
    // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subscriptionaction());
  }

  return total_size;
}
size_t SubscriptionRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubscriptionRequestMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());

    // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subscriptionaction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SubscriptionRequestMessage*>(
      &from));
}

void SubscriptionRequestMessage::MergeFrom(const SubscriptionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubscriptionRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      subscriptionaction_ = from.subscriptionaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscriptionRequestMessage::CopyFrom(const SubscriptionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubscriptionRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SubscriptionRequestMessage::InternalSwap(SubscriptionRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
  swap(subscriptionaction_, other->subscriptionaction_);
}

std::string SubscriptionRequestMessage::GetTypeName() const {
  return "SubscriptionRequestMessage";
}


// ===================================================================

void SubscriptionReplyMessage::InitAsDefaultInstance() {
}
class SubscriptionReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionReplyMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SubscriptionReplyMessage::SubscriptionReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubscriptionReplyMessage)
}
SubscriptionReplyMessage::SubscriptionReplyMessage(const SubscriptionReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ack_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(ack_));
  // @@protoc_insertion_point(copy_constructor:SubscriptionReplyMessage)
}

void SubscriptionReplyMessage::SharedCtor() {
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(ack_));
}

SubscriptionReplyMessage::~SubscriptionReplyMessage() {
  // @@protoc_insertion_point(destructor:SubscriptionReplyMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SubscriptionReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscriptionReplyMessage::ArenaDtor(void* object) {
  SubscriptionReplyMessage* _this = reinterpret_cast< SubscriptionReplyMessage* >(object);
  (void)_this;
}
void SubscriptionReplyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionReplyMessage& SubscriptionReplyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionReplyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SubscriptionReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ack_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(ack_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SubscriptionReplyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool ack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ack(&has_bits);
          ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionReplyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubscriptionReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required bool ack = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubscriptionReplyMessage)
  return target;
}

size_t SubscriptionReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SubscriptionReplyMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  if (_internal_has_ack()) {
    // required bool ack = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SubscriptionReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubscriptionReplyMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());

    // required bool ack = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionReplyMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SubscriptionReplyMessage*>(
      &from));
}

void SubscriptionReplyMessage::MergeFrom(const SubscriptionReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubscriptionReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ack_ = from.ack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscriptionReplyMessage::CopyFrom(const SubscriptionReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubscriptionReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SubscriptionReplyMessage::InternalSwap(SubscriptionReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionReplyMessage, ack_)
      + sizeof(SubscriptionReplyMessage::ack_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionReplyMessage, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

std::string SubscriptionReplyMessage::GetTypeName() const {
  return "SubscriptionReplyMessage";
}


// ===================================================================

void CreateGameMessage::InitAsDefaultInstance() {
  ::_CreateGameMessage_default_instance_._instance.get_mutable()->gameinfo_ = const_cast< ::NetGameInfo*>(
      ::NetGameInfo::internal_default_instance());
}
class CreateGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateGameMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::NetGameInfo& gameinfo(const CreateGameMessage* msg);
  static void set_has_gameinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autoleave(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::NetGameInfo&
CreateGameMessage::_Internal::gameinfo(const CreateGameMessage* msg) {
  return *msg->gameinfo_;
}
CreateGameMessage::CreateGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CreateGameMessage)
}
CreateGameMessage::CreateGameMessage(const CreateGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  if (from._internal_has_gameinfo()) {
    gameinfo_ = new ::NetGameInfo(*from.gameinfo_);
  } else {
    gameinfo_ = nullptr;
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autoleave_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(autoleave_));
  // @@protoc_insertion_point(copy_constructor:CreateGameMessage)
}

void CreateGameMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateGameMessage_pokerth_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autoleave_) -
      reinterpret_cast<char*>(&gameinfo_)) + sizeof(autoleave_));
}

CreateGameMessage::~CreateGameMessage() {
  // @@protoc_insertion_point(destructor:CreateGameMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CreateGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gameinfo_;
}

void CreateGameMessage::ArenaDtor(void* object) {
  CreateGameMessage* _this = reinterpret_cast< CreateGameMessage* >(object);
  (void)_this;
}
void CreateGameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateGameMessage& CreateGameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void CreateGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gameinfo_ != nullptr);
      gameinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&autoleave_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(autoleave_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CreateGameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameInfo gameInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool autoLeave = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_autoleave(&has_bits);
          autoleave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .NetGameInfo gameInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gameinfo(this), target, stream);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // optional bool autoLeave = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_autoleave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateGameMessage)
  return target;
}

size_t CreateGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CreateGameMessage)
  size_t total_size = 0;

  if (_internal_has_gameinfo()) {
    // required .NetGameInfo gameInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameinfo_);
  }

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  return total_size;
}
size_t CreateGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateGameMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .NetGameInfo gameInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameinfo_);

    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string password = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // optional bool autoLeave = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGameMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CreateGameMessage*>(
      &from));
}

void CreateGameMessage::MergeFrom(const CreateGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gameinfo()->::NetGameInfo::MergeFrom(from._internal_gameinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      autoleave_ = from.autoleave_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateGameMessage::CopyFrom(const CreateGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gameinfo()) {
    if (!gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void CreateGameMessage::InternalSwap(CreateGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateGameMessage, autoleave_)
      + sizeof(CreateGameMessage::autoleave_)
      - PROTOBUF_FIELD_OFFSET(CreateGameMessage, gameinfo_)>(
          reinterpret_cast<char*>(&gameinfo_),
          reinterpret_cast<char*>(&other->gameinfo_));
}

std::string CreateGameMessage::GetTypeName() const {
  return "CreateGameMessage";
}


// ===================================================================

void CreateGameFailedMessage::InitAsDefaultInstance() {
}
class CreateGameFailedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateGameFailedMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creategamefailurereason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CreateGameFailedMessage::CreateGameFailedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CreateGameFailedMessage)
}
CreateGameFailedMessage::CreateGameFailedMessage(const CreateGameFailedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&creategamefailurereason_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(creategamefailurereason_));
  // @@protoc_insertion_point(copy_constructor:CreateGameFailedMessage)
}

void CreateGameFailedMessage::SharedCtor() {
  requestid_ = 0u;
  creategamefailurereason_ = 1;
}

CreateGameFailedMessage::~CreateGameFailedMessage() {
  // @@protoc_insertion_point(destructor:CreateGameFailedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CreateGameFailedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateGameFailedMessage::ArenaDtor(void* object) {
  CreateGameFailedMessage* _this = reinterpret_cast< CreateGameFailedMessage* >(object);
  (void)_this;
}
void CreateGameFailedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateGameFailedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateGameFailedMessage& CreateGameFailedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateGameFailedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void CreateGameFailedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateGameFailedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    requestid_ = 0u;
    creategamefailurereason_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CreateGameFailedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CreateGameFailedMessage.CreateGameFailureReason createGameFailureReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CreateGameFailedMessage_CreateGameFailureReason_IsValid(val))) {
            _internal_set_creategamefailurereason(static_cast<::CreateGameFailedMessage_CreateGameFailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGameFailedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateGameFailedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .CreateGameFailedMessage.CreateGameFailureReason createGameFailureReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_creategamefailurereason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateGameFailedMessage)
  return target;
}

size_t CreateGameFailedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CreateGameFailedMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  if (_internal_has_creategamefailurereason()) {
    // required .CreateGameFailedMessage.CreateGameFailureReason createGameFailureReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_creategamefailurereason());
  }

  return total_size;
}
size_t CreateGameFailedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateGameFailedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());

    // required .CreateGameFailedMessage.CreateGameFailureReason createGameFailureReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_creategamefailurereason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGameFailedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CreateGameFailedMessage*>(
      &from));
}

void CreateGameFailedMessage::MergeFrom(const CreateGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateGameFailedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      creategamefailurereason_ = from.creategamefailurereason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateGameFailedMessage::CopyFrom(const CreateGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateGameFailedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameFailedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CreateGameFailedMessage::InternalSwap(CreateGameFailedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
  swap(creategamefailurereason_, other->creategamefailurereason_);
}

std::string CreateGameFailedMessage::GetTypeName() const {
  return "CreateGameFailedMessage";
}


// ===================================================================

void JoinGameMessage::InitAsDefaultInstance() {
}
class JoinGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinGameMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autoleave(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spectateonly(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

JoinGameMessage::JoinGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:JoinGameMessage)
}
JoinGameMessage::JoinGameMessage(const JoinGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&spectateonly_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
  // @@protoc_insertion_point(copy_constructor:JoinGameMessage)
}

void JoinGameMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinGameMessage_pokerth_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spectateonly_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
}

JoinGameMessage::~JoinGameMessage() {
  // @@protoc_insertion_point(destructor:JoinGameMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void JoinGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinGameMessage::ArenaDtor(void* object) {
  JoinGameMessage* _this = reinterpret_cast< JoinGameMessage* >(object);
  (void)_this;
}
void JoinGameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinGameMessage& JoinGameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void JoinGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spectateonly_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JoinGameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool autoLeave = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_autoleave(&has_bits);
          autoleave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool spectateOnly = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_spectateonly(&has_bits);
          spectateonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JoinGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // optional bool autoLeave = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_autoleave(), target);
  }

  // optional bool spectateOnly = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_spectateonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JoinGameMessage)
  return target;
}

size_t JoinGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameMessage)
  size_t total_size = 0;

  // required uint32 gameId = 1;
  if (_internal_has_gameid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string password = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional bool autoLeave = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool spectateOnly = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGameMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const JoinGameMessage*>(
      &from));
}

void JoinGameMessage::MergeFrom(const JoinGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      autoleave_ = from.autoleave_;
    }
    if (cached_has_bits & 0x00000008u) {
      spectateonly_ = from.spectateonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinGameMessage::CopyFrom(const JoinGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void JoinGameMessage::InternalSwap(JoinGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGameMessage, spectateonly_)
      + sizeof(JoinGameMessage::spectateonly_)
      - PROTOBUF_FIELD_OFFSET(JoinGameMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string JoinGameMessage::GetTypeName() const {
  return "JoinGameMessage";
}


// ===================================================================

void RejoinGameMessage::InitAsDefaultInstance() {
}
class RejoinGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RejoinGameMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autoleave(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RejoinGameMessage::RejoinGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RejoinGameMessage)
}
RejoinGameMessage::RejoinGameMessage(const RejoinGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autoleave_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(autoleave_));
  // @@protoc_insertion_point(copy_constructor:RejoinGameMessage)
}

void RejoinGameMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autoleave_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(autoleave_));
}

RejoinGameMessage::~RejoinGameMessage() {
  // @@protoc_insertion_point(destructor:RejoinGameMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RejoinGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RejoinGameMessage::ArenaDtor(void* object) {
  RejoinGameMessage* _this = reinterpret_cast< RejoinGameMessage* >(object);
  (void)_this;
}
void RejoinGameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RejoinGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RejoinGameMessage& RejoinGameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RejoinGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void RejoinGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejoinGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&autoleave_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(autoleave_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RejoinGameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool autoLeave = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_autoleave(&has_bits);
          autoleave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RejoinGameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RejoinGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // optional bool autoLeave = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_autoleave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RejoinGameMessage)
  return target;
}

size_t RejoinGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RejoinGameMessage)
  size_t total_size = 0;

  // required uint32 gameId = 1;
  if (_internal_has_gameid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool autoLeave = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RejoinGameMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RejoinGameMessage*>(
      &from));
}

void RejoinGameMessage::MergeFrom(const RejoinGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RejoinGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      autoleave_ = from.autoleave_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RejoinGameMessage::CopyFrom(const RejoinGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejoinGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejoinGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RejoinGameMessage::InternalSwap(RejoinGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RejoinGameMessage, autoleave_)
      + sizeof(RejoinGameMessage::autoleave_)
      - PROTOBUF_FIELD_OFFSET(RejoinGameMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string RejoinGameMessage::GetTypeName() const {
  return "RejoinGameMessage";
}


// ===================================================================

void JoinGameAckMessage::InitAsDefaultInstance() {
  ::_JoinGameAckMessage_default_instance_._instance.get_mutable()->gameinfo_ = const_cast< ::NetGameInfo*>(
      ::NetGameInfo::internal_default_instance());
}
class JoinGameAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinGameAckMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_areyougameadmin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::NetGameInfo& gameinfo(const JoinGameAckMessage* msg);
  static void set_has_gameinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spectateonly(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::NetGameInfo&
JoinGameAckMessage::_Internal::gameinfo(const JoinGameAckMessage* msg) {
  return *msg->gameinfo_;
}
JoinGameAckMessage::JoinGameAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:JoinGameAckMessage)
}
JoinGameAckMessage::JoinGameAckMessage(const JoinGameAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_gameinfo()) {
    gameinfo_ = new ::NetGameInfo(*from.gameinfo_);
  } else {
    gameinfo_ = nullptr;
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&spectateonly_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
  // @@protoc_insertion_point(copy_constructor:JoinGameAckMessage)
}

void JoinGameAckMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinGameAckMessage_pokerth_2eproto.base);
  ::memset(&gameinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spectateonly_) -
      reinterpret_cast<char*>(&gameinfo_)) + sizeof(spectateonly_));
}

JoinGameAckMessage::~JoinGameAckMessage() {
  // @@protoc_insertion_point(destructor:JoinGameAckMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void JoinGameAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gameinfo_;
}

void JoinGameAckMessage::ArenaDtor(void* object) {
  JoinGameAckMessage* _this = reinterpret_cast< JoinGameAckMessage* >(object);
  (void)_this;
}
void JoinGameAckMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGameAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinGameAckMessage& JoinGameAckMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinGameAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void JoinGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gameinfo_ != nullptr);
    gameinfo_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spectateonly_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JoinGameAckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool areYouGameAdmin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_areyougameadmin(&has_bits);
          areyougameadmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameInfo gameInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool spectateOnly = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_spectateonly(&has_bits);
          spectateonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGameAckMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JoinGameAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required bool areYouGameAdmin = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_areyougameadmin(), target);
  }

  // required .NetGameInfo gameInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gameinfo(this), target, stream);
  }

  // optional bool spectateOnly = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_spectateonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JoinGameAckMessage)
  return target;
}

size_t JoinGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:JoinGameAckMessage)
  size_t total_size = 0;

  if (_internal_has_gameinfo()) {
    // required .NetGameInfo gameInfo = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameinfo_);
  }

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_areyougameadmin()) {
    // required bool areYouGameAdmin = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t JoinGameAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameAckMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NetGameInfo gameInfo = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameinfo_);

    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required bool areYouGameAdmin = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool spectateOnly = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGameAckMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const JoinGameAckMessage*>(
      &from));
}

void JoinGameAckMessage::MergeFrom(const JoinGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinGameAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gameinfo()->::NetGameInfo::MergeFrom(from._internal_gameinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      areyougameadmin_ = from.areyougameadmin_;
    }
    if (cached_has_bits & 0x00000008u) {
      spectateonly_ = from.spectateonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinGameAckMessage::CopyFrom(const JoinGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gameinfo()) {
    if (!gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void JoinGameAckMessage::InternalSwap(JoinGameAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGameAckMessage, spectateonly_)
      + sizeof(JoinGameAckMessage::spectateonly_)
      - PROTOBUF_FIELD_OFFSET(JoinGameAckMessage, gameinfo_)>(
          reinterpret_cast<char*>(&gameinfo_),
          reinterpret_cast<char*>(&other->gameinfo_));
}

std::string JoinGameAckMessage::GetTypeName() const {
  return "JoinGameAckMessage";
}


// ===================================================================

void JoinGameFailedMessage::InitAsDefaultInstance() {
}
class JoinGameFailedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinGameFailedMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_joingamefailurereason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

JoinGameFailedMessage::JoinGameFailedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:JoinGameFailedMessage)
}
JoinGameFailedMessage::JoinGameFailedMessage(const JoinGameFailedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&joingamefailurereason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(joingamefailurereason_));
  // @@protoc_insertion_point(copy_constructor:JoinGameFailedMessage)
}

void JoinGameFailedMessage::SharedCtor() {
  gameid_ = 0u;
  joingamefailurereason_ = 1;
}

JoinGameFailedMessage::~JoinGameFailedMessage() {
  // @@protoc_insertion_point(destructor:JoinGameFailedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void JoinGameFailedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JoinGameFailedMessage::ArenaDtor(void* object) {
  JoinGameFailedMessage* _this = reinterpret_cast< JoinGameFailedMessage* >(object);
  (void)_this;
}
void JoinGameFailedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGameFailedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinGameFailedMessage& JoinGameFailedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinGameFailedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void JoinGameFailedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameFailedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    gameid_ = 0u;
    joingamefailurereason_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JoinGameFailedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::JoinGameFailedMessage_JoinGameFailureReason_IsValid(val))) {
            _internal_set_joingamefailurereason(static_cast<::JoinGameFailedMessage_JoinGameFailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGameFailedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JoinGameFailedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_joingamefailurereason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JoinGameFailedMessage)
  return target;
}

size_t JoinGameFailedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:JoinGameFailedMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_joingamefailurereason()) {
    // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_joingamefailurereason());
  }

  return total_size;
}
size_t JoinGameFailedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameFailedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_joingamefailurereason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGameFailedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const JoinGameFailedMessage*>(
      &from));
}

void JoinGameFailedMessage::MergeFrom(const JoinGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinGameFailedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      joingamefailurereason_ = from.joingamefailurereason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinGameFailedMessage::CopyFrom(const JoinGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameFailedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameFailedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void JoinGameFailedMessage::InternalSwap(JoinGameFailedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(joingamefailurereason_, other->joingamefailurereason_);
}

std::string JoinGameFailedMessage::GetTypeName() const {
  return "JoinGameFailedMessage";
}


// ===================================================================

void GamePlayerJoinedMessage::InitAsDefaultInstance() {
}
class GamePlayerJoinedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GamePlayerJoinedMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isgameadmin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GamePlayerJoinedMessage::GamePlayerJoinedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GamePlayerJoinedMessage)
}
GamePlayerJoinedMessage::GamePlayerJoinedMessage(const GamePlayerJoinedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isgameadmin_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(isgameadmin_));
  // @@protoc_insertion_point(copy_constructor:GamePlayerJoinedMessage)
}

void GamePlayerJoinedMessage::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isgameadmin_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(isgameadmin_));
}

GamePlayerJoinedMessage::~GamePlayerJoinedMessage() {
  // @@protoc_insertion_point(destructor:GamePlayerJoinedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GamePlayerJoinedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GamePlayerJoinedMessage::ArenaDtor(void* object) {
  GamePlayerJoinedMessage* _this = reinterpret_cast< GamePlayerJoinedMessage* >(object);
  (void)_this;
}
void GamePlayerJoinedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePlayerJoinedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePlayerJoinedMessage& GamePlayerJoinedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePlayerJoinedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GamePlayerJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerJoinedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isgameadmin_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(isgameadmin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GamePlayerJoinedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isGameAdmin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isgameadmin(&has_bits);
          isgameadmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePlayerJoinedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GamePlayerJoinedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required bool isGameAdmin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isgameadmin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GamePlayerJoinedMessage)
  return target;
}

size_t GamePlayerJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GamePlayerJoinedMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_isgameadmin()) {
    // required bool isGameAdmin = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GamePlayerJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerJoinedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required bool isGameAdmin = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePlayerJoinedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GamePlayerJoinedMessage*>(
      &from));
}

void GamePlayerJoinedMessage::MergeFrom(const GamePlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerJoinedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      isgameadmin_ = from.isgameadmin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GamePlayerJoinedMessage::CopyFrom(const GamePlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerJoinedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GamePlayerJoinedMessage::InternalSwap(GamePlayerJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GamePlayerJoinedMessage, isgameadmin_)
      + sizeof(GamePlayerJoinedMessage::isgameadmin_)
      - PROTOBUF_FIELD_OFFSET(GamePlayerJoinedMessage, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string GamePlayerJoinedMessage::GetTypeName() const {
  return "GamePlayerJoinedMessage";
}


// ===================================================================

void GamePlayerLeftMessage::InitAsDefaultInstance() {
}
class GamePlayerLeftMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GamePlayerLeftMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gameplayerleftreason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GamePlayerLeftMessage::GamePlayerLeftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GamePlayerLeftMessage)
}
GamePlayerLeftMessage::GamePlayerLeftMessage(const GamePlayerLeftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameplayerleftreason_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(gameplayerleftreason_));
  // @@protoc_insertion_point(copy_constructor:GamePlayerLeftMessage)
}

void GamePlayerLeftMessage::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameplayerleftreason_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(gameplayerleftreason_));
}

GamePlayerLeftMessage::~GamePlayerLeftMessage() {
  // @@protoc_insertion_point(destructor:GamePlayerLeftMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GamePlayerLeftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GamePlayerLeftMessage::ArenaDtor(void* object) {
  GamePlayerLeftMessage* _this = reinterpret_cast< GamePlayerLeftMessage* >(object);
  (void)_this;
}
void GamePlayerLeftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePlayerLeftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePlayerLeftMessage& GamePlayerLeftMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePlayerLeftMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GamePlayerLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerLeftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gameplayerleftreason_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(gameplayerleftreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GamePlayerLeftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(val))) {
            _internal_set_gameplayerleftreason(static_cast<::GamePlayerLeftMessage_GamePlayerLeftReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePlayerLeftMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GamePlayerLeftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gameplayerleftreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GamePlayerLeftMessage)
  return target;
}

size_t GamePlayerLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GamePlayerLeftMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_gameplayerleftreason()) {
    // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gameplayerleftreason());
  }

  return total_size;
}
size_t GamePlayerLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerLeftMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gameplayerleftreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePlayerLeftMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GamePlayerLeftMessage*>(
      &from));
}

void GamePlayerLeftMessage::MergeFrom(const GamePlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerLeftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gameplayerleftreason_ = from.gameplayerleftreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GamePlayerLeftMessage::CopyFrom(const GamePlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerLeftMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GamePlayerLeftMessage::InternalSwap(GamePlayerLeftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GamePlayerLeftMessage, gameplayerleftreason_)
      + sizeof(GamePlayerLeftMessage::gameplayerleftreason_)
      - PROTOBUF_FIELD_OFFSET(GamePlayerLeftMessage, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string GamePlayerLeftMessage::GetTypeName() const {
  return "GamePlayerLeftMessage";
}


// ===================================================================

void GameSpectatorJoinedMessage::InitAsDefaultInstance() {
}
class GameSpectatorJoinedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSpectatorJoinedMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameSpectatorJoinedMessage::GameSpectatorJoinedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameSpectatorJoinedMessage)
}
GameSpectatorJoinedMessage::GameSpectatorJoinedMessage(const GameSpectatorJoinedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:GameSpectatorJoinedMessage)
}

void GameSpectatorJoinedMessage::SharedCtor() {
  playerid_ = 0u;
}

GameSpectatorJoinedMessage::~GameSpectatorJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameSpectatorJoinedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameSpectatorJoinedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameSpectatorJoinedMessage::ArenaDtor(void* object) {
  GameSpectatorJoinedMessage* _this = reinterpret_cast< GameSpectatorJoinedMessage* >(object);
  (void)_this;
}
void GameSpectatorJoinedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSpectatorJoinedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSpectatorJoinedMessage& GameSpectatorJoinedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSpectatorJoinedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameSpectatorJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpectatorJoinedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameSpectatorJoinedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSpectatorJoinedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameSpectatorJoinedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpectatorJoinedMessage)
  return target;
}

size_t GameSpectatorJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpectatorJoinedMessage)
  size_t total_size = 0;

  // required uint32 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSpectatorJoinedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameSpectatorJoinedMessage*>(
      &from));
}

void GameSpectatorJoinedMessage::MergeFrom(const GameSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpectatorJoinedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void GameSpectatorJoinedMessage::CopyFrom(const GameSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpectatorJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSpectatorJoinedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameSpectatorJoinedMessage::InternalSwap(GameSpectatorJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
}

std::string GameSpectatorJoinedMessage::GetTypeName() const {
  return "GameSpectatorJoinedMessage";
}


// ===================================================================

void GameSpectatorLeftMessage::InitAsDefaultInstance() {
}
class GameSpectatorLeftMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSpectatorLeftMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamespectatorleftreason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameSpectatorLeftMessage::GameSpectatorLeftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameSpectatorLeftMessage)
}
GameSpectatorLeftMessage::GameSpectatorLeftMessage(const GameSpectatorLeftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamespectatorleftreason_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(gamespectatorleftreason_));
  // @@protoc_insertion_point(copy_constructor:GameSpectatorLeftMessage)
}

void GameSpectatorLeftMessage::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamespectatorleftreason_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(gamespectatorleftreason_));
}

GameSpectatorLeftMessage::~GameSpectatorLeftMessage() {
  // @@protoc_insertion_point(destructor:GameSpectatorLeftMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameSpectatorLeftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameSpectatorLeftMessage::ArenaDtor(void* object) {
  GameSpectatorLeftMessage* _this = reinterpret_cast< GameSpectatorLeftMessage* >(object);
  (void)_this;
}
void GameSpectatorLeftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSpectatorLeftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSpectatorLeftMessage& GameSpectatorLeftMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSpectatorLeftMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameSpectatorLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpectatorLeftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamespectatorleftreason_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(gamespectatorleftreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameSpectatorLeftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(val))) {
            _internal_set_gamespectatorleftreason(static_cast<::GamePlayerLeftMessage_GamePlayerLeftReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSpectatorLeftMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameSpectatorLeftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamespectatorleftreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSpectatorLeftMessage)
  return target;
}

size_t GameSpectatorLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameSpectatorLeftMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_gamespectatorleftreason()) {
    // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamespectatorleftreason());
  }

  return total_size;
}
size_t GameSpectatorLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpectatorLeftMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamespectatorleftreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSpectatorLeftMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameSpectatorLeftMessage*>(
      &from));
}

void GameSpectatorLeftMessage::MergeFrom(const GameSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpectatorLeftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamespectatorleftreason_ = from.gamespectatorleftreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameSpectatorLeftMessage::CopyFrom(const GameSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpectatorLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSpectatorLeftMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameSpectatorLeftMessage::InternalSwap(GameSpectatorLeftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameSpectatorLeftMessage, gamespectatorleftreason_)
      + sizeof(GameSpectatorLeftMessage::gamespectatorleftreason_)
      - PROTOBUF_FIELD_OFFSET(GameSpectatorLeftMessage, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string GameSpectatorLeftMessage::GetTypeName() const {
  return "GameSpectatorLeftMessage";
}


// ===================================================================

void GameAdminChangedMessage::InitAsDefaultInstance() {
}
class GameAdminChangedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAdminChangedMessage>()._has_bits_);
  static void set_has_newadminplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameAdminChangedMessage::GameAdminChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameAdminChangedMessage)
}
GameAdminChangedMessage::GameAdminChangedMessage(const GameAdminChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  newadminplayerid_ = from.newadminplayerid_;
  // @@protoc_insertion_point(copy_constructor:GameAdminChangedMessage)
}

void GameAdminChangedMessage::SharedCtor() {
  newadminplayerid_ = 0u;
}

GameAdminChangedMessage::~GameAdminChangedMessage() {
  // @@protoc_insertion_point(destructor:GameAdminChangedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameAdminChangedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameAdminChangedMessage::ArenaDtor(void* object) {
  GameAdminChangedMessage* _this = reinterpret_cast< GameAdminChangedMessage* >(object);
  (void)_this;
}
void GameAdminChangedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameAdminChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAdminChangedMessage& GameAdminChangedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAdminChangedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameAdminChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameAdminChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newadminplayerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameAdminChangedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 newAdminPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_newadminplayerid(&has_bits);
          newadminplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAdminChangedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameAdminChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 newAdminPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_newadminplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameAdminChangedMessage)
  return target;
}

size_t GameAdminChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameAdminChangedMessage)
  size_t total_size = 0;

  // required uint32 newAdminPlayerId = 1;
  if (_internal_has_newadminplayerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newadminplayerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAdminChangedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameAdminChangedMessage*>(
      &from));
}

void GameAdminChangedMessage::MergeFrom(const GameAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameAdminChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_newadminplayerid()) {
    _internal_set_newadminplayerid(from._internal_newadminplayerid());
  }
}

void GameAdminChangedMessage::CopyFrom(const GameAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameAdminChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAdminChangedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameAdminChangedMessage::InternalSwap(GameAdminChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(newadminplayerid_, other->newadminplayerid_);
}

std::string GameAdminChangedMessage::GetTypeName() const {
  return "GameAdminChangedMessage";
}


// ===================================================================

void RemovedFromGameMessage::InitAsDefaultInstance() {
}
class RemovedFromGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RemovedFromGameMessage>()._has_bits_);
  static void set_has_removedfromgamereason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RemovedFromGameMessage::RemovedFromGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RemovedFromGameMessage)
}
RemovedFromGameMessage::RemovedFromGameMessage(const RemovedFromGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  removedfromgamereason_ = from.removedfromgamereason_;
  // @@protoc_insertion_point(copy_constructor:RemovedFromGameMessage)
}

void RemovedFromGameMessage::SharedCtor() {
  removedfromgamereason_ = 0;
}

RemovedFromGameMessage::~RemovedFromGameMessage() {
  // @@protoc_insertion_point(destructor:RemovedFromGameMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RemovedFromGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemovedFromGameMessage::ArenaDtor(void* object) {
  RemovedFromGameMessage* _this = reinterpret_cast< RemovedFromGameMessage* >(object);
  (void)_this;
}
void RemovedFromGameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemovedFromGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovedFromGameMessage& RemovedFromGameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovedFromGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void RemovedFromGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RemovedFromGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removedfromgamereason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemovedFromGameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RemovedFromGameMessage_RemovedFromGameReason_IsValid(val))) {
            _internal_set_removedfromgamereason(static_cast<::RemovedFromGameMessage_RemovedFromGameReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovedFromGameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemovedFromGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_removedfromgamereason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemovedFromGameMessage)
  return target;
}

size_t RemovedFromGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemovedFromGameMessage)
  size_t total_size = 0;

  // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 1;
  if (_internal_has_removedfromgamereason()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_removedfromgamereason());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovedFromGameMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RemovedFromGameMessage*>(
      &from));
}

void RemovedFromGameMessage::MergeFrom(const RemovedFromGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemovedFromGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_removedfromgamereason()) {
    _internal_set_removedfromgamereason(from._internal_removedfromgamereason());
  }
}

void RemovedFromGameMessage::CopyFrom(const RemovedFromGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemovedFromGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovedFromGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RemovedFromGameMessage::InternalSwap(RemovedFromGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(removedfromgamereason_, other->removedfromgamereason_);
}

std::string RemovedFromGameMessage::GetTypeName() const {
  return "RemovedFromGameMessage";
}


// ===================================================================

void KickPlayerRequestMessage::InitAsDefaultInstance() {
}
class KickPlayerRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<KickPlayerRequestMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

KickPlayerRequestMessage::KickPlayerRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KickPlayerRequestMessage)
}
KickPlayerRequestMessage::KickPlayerRequestMessage(const KickPlayerRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:KickPlayerRequestMessage)
}

void KickPlayerRequestMessage::SharedCtor() {
  playerid_ = 0u;
}

KickPlayerRequestMessage::~KickPlayerRequestMessage() {
  // @@protoc_insertion_point(destructor:KickPlayerRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KickPlayerRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KickPlayerRequestMessage::ArenaDtor(void* object) {
  KickPlayerRequestMessage* _this = reinterpret_cast< KickPlayerRequestMessage* >(object);
  (void)_this;
}
void KickPlayerRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickPlayerRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickPlayerRequestMessage& KickPlayerRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickPlayerRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void KickPlayerRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPlayerRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KickPlayerRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickPlayerRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KickPlayerRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KickPlayerRequestMessage)
  return target;
}

size_t KickPlayerRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickPlayerRequestMessage)
  size_t total_size = 0;

  // required uint32 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickPlayerRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KickPlayerRequestMessage*>(
      &from));
}

void KickPlayerRequestMessage::MergeFrom(const KickPlayerRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickPlayerRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void KickPlayerRequestMessage::CopyFrom(const KickPlayerRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPlayerRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void KickPlayerRequestMessage::InternalSwap(KickPlayerRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
}

std::string KickPlayerRequestMessage::GetTypeName() const {
  return "KickPlayerRequestMessage";
}


// ===================================================================

void LeaveGameRequestMessage::InitAsDefaultInstance() {
}
class LeaveGameRequestMessage::_Internal {
 public:
};

LeaveGameRequestMessage::LeaveGameRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LeaveGameRequestMessage)
}
LeaveGameRequestMessage::LeaveGameRequestMessage(const LeaveGameRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LeaveGameRequestMessage)
}

void LeaveGameRequestMessage::SharedCtor() {
}

LeaveGameRequestMessage::~LeaveGameRequestMessage() {
  // @@protoc_insertion_point(destructor:LeaveGameRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LeaveGameRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeaveGameRequestMessage::ArenaDtor(void* object) {
  LeaveGameRequestMessage* _this = reinterpret_cast< LeaveGameRequestMessage* >(object);
  (void)_this;
}
void LeaveGameRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveGameRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveGameRequestMessage& LeaveGameRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveGameRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void LeaveGameRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LeaveGameRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LeaveGameRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveGameRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LeaveGameRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LeaveGameRequestMessage)
  return target;
}

size_t LeaveGameRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LeaveGameRequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveGameRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LeaveGameRequestMessage*>(
      &from));
}

void LeaveGameRequestMessage::MergeFrom(const LeaveGameRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LeaveGameRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LeaveGameRequestMessage::CopyFrom(const LeaveGameRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LeaveGameRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGameRequestMessage::IsInitialized() const {
  return true;
}

void LeaveGameRequestMessage::InternalSwap(LeaveGameRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LeaveGameRequestMessage::GetTypeName() const {
  return "LeaveGameRequestMessage";
}


// ===================================================================

void InvitePlayerToGameMessage::InitAsDefaultInstance() {
}
class InvitePlayerToGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<InvitePlayerToGameMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

InvitePlayerToGameMessage::InvitePlayerToGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InvitePlayerToGameMessage)
}
InvitePlayerToGameMessage::InvitePlayerToGameMessage(const InvitePlayerToGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:InvitePlayerToGameMessage)
}

void InvitePlayerToGameMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

InvitePlayerToGameMessage::~InvitePlayerToGameMessage() {
  // @@protoc_insertion_point(destructor:InvitePlayerToGameMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void InvitePlayerToGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InvitePlayerToGameMessage::ArenaDtor(void* object) {
  InvitePlayerToGameMessage* _this = reinterpret_cast< InvitePlayerToGameMessage* >(object);
  (void)_this;
}
void InvitePlayerToGameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvitePlayerToGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvitePlayerToGameMessage& InvitePlayerToGameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvitePlayerToGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void InvitePlayerToGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InvitePlayerToGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InvitePlayerToGameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvitePlayerToGameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InvitePlayerToGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InvitePlayerToGameMessage)
  return target;
}

size_t InvitePlayerToGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InvitePlayerToGameMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  return total_size;
}
size_t InvitePlayerToGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InvitePlayerToGameMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvitePlayerToGameMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InvitePlayerToGameMessage*>(
      &from));
}

void InvitePlayerToGameMessage::MergeFrom(const InvitePlayerToGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InvitePlayerToGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InvitePlayerToGameMessage::CopyFrom(const InvitePlayerToGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InvitePlayerToGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitePlayerToGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InvitePlayerToGameMessage::InternalSwap(InvitePlayerToGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvitePlayerToGameMessage, playerid_)
      + sizeof(InvitePlayerToGameMessage::playerid_)
      - PROTOBUF_FIELD_OFFSET(InvitePlayerToGameMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string InvitePlayerToGameMessage::GetTypeName() const {
  return "InvitePlayerToGameMessage";
}


// ===================================================================

void InviteNotifyMessage::InitAsDefaultInstance() {
}
class InviteNotifyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<InviteNotifyMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playeridwho(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playeridbywhom(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

InviteNotifyMessage::InviteNotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InviteNotifyMessage)
}
InviteNotifyMessage::InviteNotifyMessage(const InviteNotifyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playeridbywhom_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playeridbywhom_));
  // @@protoc_insertion_point(copy_constructor:InviteNotifyMessage)
}

void InviteNotifyMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playeridbywhom_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playeridbywhom_));
}

InviteNotifyMessage::~InviteNotifyMessage() {
  // @@protoc_insertion_point(destructor:InviteNotifyMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void InviteNotifyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InviteNotifyMessage::ArenaDtor(void* object) {
  InviteNotifyMessage* _this = reinterpret_cast< InviteNotifyMessage* >(object);
  (void)_this;
}
void InviteNotifyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InviteNotifyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InviteNotifyMessage& InviteNotifyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InviteNotifyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void InviteNotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InviteNotifyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playeridbywhom_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playeridbywhom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InviteNotifyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerIdWho = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playeridwho(&has_bits);
          playeridwho_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerIdByWhom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_playeridbywhom(&has_bits);
          playeridbywhom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InviteNotifyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InviteNotifyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerIdWho = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playeridwho(), target);
  }

  // required uint32 playerIdByWhom = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_playeridbywhom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InviteNotifyMessage)
  return target;
}

size_t InviteNotifyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InviteNotifyMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_playeridwho()) {
    // required uint32 playerIdWho = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playeridwho());
  }

  if (_internal_has_playeridbywhom()) {
    // required uint32 playerIdByWhom = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playeridbywhom());
  }

  return total_size;
}
size_t InviteNotifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InviteNotifyMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required uint32 playerIdWho = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playeridwho());

    // required uint32 playerIdByWhom = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playeridbywhom());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InviteNotifyMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InviteNotifyMessage*>(
      &from));
}

void InviteNotifyMessage::MergeFrom(const InviteNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InviteNotifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playeridwho_ = from.playeridwho_;
    }
    if (cached_has_bits & 0x00000004u) {
      playeridbywhom_ = from.playeridbywhom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InviteNotifyMessage::CopyFrom(const InviteNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InviteNotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteNotifyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InviteNotifyMessage::InternalSwap(InviteNotifyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InviteNotifyMessage, playeridbywhom_)
      + sizeof(InviteNotifyMessage::playeridbywhom_)
      - PROTOBUF_FIELD_OFFSET(InviteNotifyMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string InviteNotifyMessage::GetTypeName() const {
  return "InviteNotifyMessage";
}


// ===================================================================

void RejectGameInvitationMessage::InitAsDefaultInstance() {
}
class RejectGameInvitationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RejectGameInvitationMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_myrejectreason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RejectGameInvitationMessage::RejectGameInvitationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RejectGameInvitationMessage)
}
RejectGameInvitationMessage::RejectGameInvitationMessage(const RejectGameInvitationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&myrejectreason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(myrejectreason_));
  // @@protoc_insertion_point(copy_constructor:RejectGameInvitationMessage)
}

void RejectGameInvitationMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&myrejectreason_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(myrejectreason_));
}

RejectGameInvitationMessage::~RejectGameInvitationMessage() {
  // @@protoc_insertion_point(destructor:RejectGameInvitationMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RejectGameInvitationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RejectGameInvitationMessage::ArenaDtor(void* object) {
  RejectGameInvitationMessage* _this = reinterpret_cast< RejectGameInvitationMessage* >(object);
  (void)_this;
}
void RejectGameInvitationMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RejectGameInvitationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RejectGameInvitationMessage& RejectGameInvitationMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RejectGameInvitationMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void RejectGameInvitationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejectGameInvitationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&myrejectreason_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(myrejectreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RejectGameInvitationMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RejectGameInvitationMessage_RejectGameInvReason_IsValid(val))) {
            _internal_set_myrejectreason(static_cast<::RejectGameInvitationMessage_RejectGameInvReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RejectGameInvitationMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RejectGameInvitationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_myrejectreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RejectGameInvitationMessage)
  return target;
}

size_t RejectGameInvitationMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RejectGameInvitationMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_myrejectreason()) {
    // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_myrejectreason());
  }

  return total_size;
}
size_t RejectGameInvitationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RejectGameInvitationMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_myrejectreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RejectGameInvitationMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RejectGameInvitationMessage*>(
      &from));
}

void RejectGameInvitationMessage::MergeFrom(const RejectGameInvitationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RejectGameInvitationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      myrejectreason_ = from.myrejectreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RejectGameInvitationMessage::CopyFrom(const RejectGameInvitationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejectGameInvitationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectGameInvitationMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RejectGameInvitationMessage::InternalSwap(RejectGameInvitationMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RejectGameInvitationMessage, myrejectreason_)
      + sizeof(RejectGameInvitationMessage::myrejectreason_)
      - PROTOBUF_FIELD_OFFSET(RejectGameInvitationMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string RejectGameInvitationMessage::GetTypeName() const {
  return "RejectGameInvitationMessage";
}


// ===================================================================

void RejectInvNotifyMessage::InitAsDefaultInstance() {
}
class RejectInvNotifyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RejectInvNotifyMessage>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playerrejectreason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

RejectInvNotifyMessage::RejectInvNotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RejectInvNotifyMessage)
}
RejectInvNotifyMessage::RejectInvNotifyMessage(const RejectInvNotifyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerrejectreason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerrejectreason_));
  // @@protoc_insertion_point(copy_constructor:RejectInvNotifyMessage)
}

void RejectInvNotifyMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerrejectreason_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerrejectreason_));
}

RejectInvNotifyMessage::~RejectInvNotifyMessage() {
  // @@protoc_insertion_point(destructor:RejectInvNotifyMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RejectInvNotifyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RejectInvNotifyMessage::ArenaDtor(void* object) {
  RejectInvNotifyMessage* _this = reinterpret_cast< RejectInvNotifyMessage* >(object);
  (void)_this;
}
void RejectInvNotifyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RejectInvNotifyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RejectInvNotifyMessage& RejectInvNotifyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RejectInvNotifyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void RejectInvNotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejectInvNotifyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerrejectreason_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerrejectreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RejectInvNotifyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RejectGameInvitationMessage_RejectGameInvReason_IsValid(val))) {
            _internal_set_playerrejectreason(static_cast<::RejectGameInvitationMessage_RejectGameInvReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RejectInvNotifyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RejectInvNotifyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_playerrejectreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RejectInvNotifyMessage)
  return target;
}

size_t RejectInvNotifyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RejectInvNotifyMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_playerrejectreason()) {
    // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playerrejectreason());
  }

  return total_size;
}
size_t RejectInvNotifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RejectInvNotifyMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playerrejectreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RejectInvNotifyMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RejectInvNotifyMessage*>(
      &from));
}

void RejectInvNotifyMessage::MergeFrom(const RejectInvNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RejectInvNotifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerrejectreason_ = from.playerrejectreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RejectInvNotifyMessage::CopyFrom(const RejectInvNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejectInvNotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectInvNotifyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RejectInvNotifyMessage::InternalSwap(RejectInvNotifyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RejectInvNotifyMessage, playerrejectreason_)
      + sizeof(RejectInvNotifyMessage::playerrejectreason_)
      - PROTOBUF_FIELD_OFFSET(RejectInvNotifyMessage, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

std::string RejectInvNotifyMessage::GetTypeName() const {
  return "RejectInvNotifyMessage";
}


// ===================================================================

void StartEventMessage::InitAsDefaultInstance() {
}
class StartEventMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StartEventMessage>()._has_bits_);
  static void set_has_starteventtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fillwithcomputerplayers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StartEventMessage::StartEventMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StartEventMessage)
}
StartEventMessage::StartEventMessage(const StartEventMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&starteventtype_, &from.starteventtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&fillwithcomputerplayers_) -
    reinterpret_cast<char*>(&starteventtype_)) + sizeof(fillwithcomputerplayers_));
  // @@protoc_insertion_point(copy_constructor:StartEventMessage)
}

void StartEventMessage::SharedCtor() {
  ::memset(&starteventtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fillwithcomputerplayers_) -
      reinterpret_cast<char*>(&starteventtype_)) + sizeof(fillwithcomputerplayers_));
}

StartEventMessage::~StartEventMessage() {
  // @@protoc_insertion_point(destructor:StartEventMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartEventMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartEventMessage::ArenaDtor(void* object) {
  StartEventMessage* _this = reinterpret_cast< StartEventMessage* >(object);
  (void)_this;
}
void StartEventMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartEventMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartEventMessage& StartEventMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartEventMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StartEventMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartEventMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&starteventtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fillwithcomputerplayers_) -
        reinterpret_cast<char*>(&starteventtype_)) + sizeof(fillwithcomputerplayers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartEventMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .StartEventMessage.StartEventType startEventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::StartEventMessage_StartEventType_IsValid(val))) {
            _internal_set_starteventtype(static_cast<::StartEventMessage_StartEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool fillWithComputerPlayers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fillwithcomputerplayers(&has_bits);
          fillwithcomputerplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartEventMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartEventMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .StartEventMessage.StartEventType startEventType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_starteventtype(), target);
  }

  // optional bool fillWithComputerPlayers = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_fillwithcomputerplayers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartEventMessage)
  return target;
}

size_t StartEventMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartEventMessage)
  size_t total_size = 0;

  // required .StartEventMessage.StartEventType startEventType = 1;
  if (_internal_has_starteventtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_starteventtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool fillWithComputerPlayers = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartEventMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartEventMessage*>(
      &from));
}

void StartEventMessage::MergeFrom(const StartEventMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartEventMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      starteventtype_ = from.starteventtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      fillwithcomputerplayers_ = from.fillwithcomputerplayers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartEventMessage::CopyFrom(const StartEventMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartEventMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEventMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StartEventMessage::InternalSwap(StartEventMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartEventMessage, fillwithcomputerplayers_)
      + sizeof(StartEventMessage::fillwithcomputerplayers_)
      - PROTOBUF_FIELD_OFFSET(StartEventMessage, starteventtype_)>(
          reinterpret_cast<char*>(&starteventtype_),
          reinterpret_cast<char*>(&other->starteventtype_));
}

std::string StartEventMessage::GetTypeName() const {
  return "StartEventMessage";
}


// ===================================================================

void StartEventAckMessage::InitAsDefaultInstance() {
}
class StartEventAckMessage::_Internal {
 public:
};

StartEventAckMessage::StartEventAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StartEventAckMessage)
}
StartEventAckMessage::StartEventAckMessage(const StartEventAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StartEventAckMessage)
}

void StartEventAckMessage::SharedCtor() {
}

StartEventAckMessage::~StartEventAckMessage() {
  // @@protoc_insertion_point(destructor:StartEventAckMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartEventAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartEventAckMessage::ArenaDtor(void* object) {
  StartEventAckMessage* _this = reinterpret_cast< StartEventAckMessage* >(object);
  (void)_this;
}
void StartEventAckMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartEventAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartEventAckMessage& StartEventAckMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartEventAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StartEventAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartEventAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* StartEventAckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartEventAckMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartEventAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartEventAckMessage)
  return target;
}

size_t StartEventAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartEventAckMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartEventAckMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartEventAckMessage*>(
      &from));
}

void StartEventAckMessage::MergeFrom(const StartEventAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartEventAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartEventAckMessage::CopyFrom(const StartEventAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartEventAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEventAckMessage::IsInitialized() const {
  return true;
}

void StartEventAckMessage::InternalSwap(StartEventAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string StartEventAckMessage::GetTypeName() const {
  return "StartEventAckMessage";
}


// ===================================================================

void GameStartInitialMessage::InitAsDefaultInstance() {
}
class GameStartInitialMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameStartInitialMessage>()._has_bits_);
  static void set_has_startdealerplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameStartInitialMessage::GameStartInitialMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  playerseats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameStartInitialMessage)
}
GameStartInitialMessage::GameStartInitialMessage(const GameStartInitialMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      playerseats_(from.playerseats_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  startdealerplayerid_ = from.startdealerplayerid_;
  // @@protoc_insertion_point(copy_constructor:GameStartInitialMessage)
}

void GameStartInitialMessage::SharedCtor() {
  startdealerplayerid_ = 0u;
}

GameStartInitialMessage::~GameStartInitialMessage() {
  // @@protoc_insertion_point(destructor:GameStartInitialMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameStartInitialMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameStartInitialMessage::ArenaDtor(void* object) {
  GameStartInitialMessage* _this = reinterpret_cast< GameStartInitialMessage* >(object);
  (void)_this;
}
void GameStartInitialMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStartInitialMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartInitialMessage& GameStartInitialMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStartInitialMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameStartInitialMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartInitialMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerseats_.Clear();
  startdealerplayerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameStartInitialMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 startDealerPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_startdealerplayerid(&has_bits);
          startdealerplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 playerSeats = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_playerseats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_playerseats(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStartInitialMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStartInitialMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 startDealerPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startdealerplayerid(), target);
  }

  // repeated uint32 playerSeats = 2 [packed = true];
  {
    int byte_size = _playerseats_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_playerseats(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartInitialMessage)
  return target;
}

size_t GameStartInitialMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartInitialMessage)
  size_t total_size = 0;

  // required uint32 startDealerPlayerId = 1;
  if (_internal_has_startdealerplayerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startdealerplayerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerSeats = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->playerseats_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _playerseats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartInitialMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameStartInitialMessage*>(
      &from));
}

void GameStartInitialMessage::MergeFrom(const GameStartInitialMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartInitialMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerseats_.MergeFrom(from.playerseats_);
  if (from._internal_has_startdealerplayerid()) {
    _internal_set_startdealerplayerid(from._internal_startdealerplayerid());
  }
}

void GameStartInitialMessage::CopyFrom(const GameStartInitialMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartInitialMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartInitialMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameStartInitialMessage::InternalSwap(GameStartInitialMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerseats_.InternalSwap(&other->playerseats_);
  swap(startdealerplayerid_, other->startdealerplayerid_);
}

std::string GameStartInitialMessage::GetTypeName() const {
  return "GameStartInitialMessage";
}


// ===================================================================

void GameStartRejoinMessage_RejoinPlayerData::InitAsDefaultInstance() {
}
class GameStartRejoinMessage_RejoinPlayerData::_Internal {
 public:
  using HasBits = decltype(std::declval<GameStartRejoinMessage_RejoinPlayerData>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playermoney(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameStartRejoinMessage.RejoinPlayerData)
}
GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData(const GameStartRejoinMessage_RejoinPlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playermoney_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(playermoney_));
  // @@protoc_insertion_point(copy_constructor:GameStartRejoinMessage.RejoinPlayerData)
}

void GameStartRejoinMessage_RejoinPlayerData::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playermoney_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(playermoney_));
}

GameStartRejoinMessage_RejoinPlayerData::~GameStartRejoinMessage_RejoinPlayerData() {
  // @@protoc_insertion_point(destructor:GameStartRejoinMessage.RejoinPlayerData)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameStartRejoinMessage_RejoinPlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameStartRejoinMessage_RejoinPlayerData::ArenaDtor(void* object) {
  GameStartRejoinMessage_RejoinPlayerData* _this = reinterpret_cast< GameStartRejoinMessage_RejoinPlayerData* >(object);
  (void)_this;
}
void GameStartRejoinMessage_RejoinPlayerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStartRejoinMessage_RejoinPlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartRejoinMessage_RejoinPlayerData& GameStartRejoinMessage_RejoinPlayerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameStartRejoinMessage_RejoinPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartRejoinMessage.RejoinPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playermoney_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(playermoney_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameStartRejoinMessage_RejoinPlayerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playermoney(&has_bits);
          playermoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStartRejoinMessage_RejoinPlayerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStartRejoinMessage.RejoinPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required uint32 playerMoney = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playermoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartRejoinMessage.RejoinPlayerData)
  return target;
}

size_t GameStartRejoinMessage_RejoinPlayerData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartRejoinMessage.RejoinPlayerData)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_playermoney()) {
    // required uint32 playerMoney = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playermoney());
  }

  return total_size;
}
size_t GameStartRejoinMessage_RejoinPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartRejoinMessage.RejoinPlayerData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required uint32 playerMoney = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartRejoinMessage_RejoinPlayerData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameStartRejoinMessage_RejoinPlayerData*>(
      &from));
}

void GameStartRejoinMessage_RejoinPlayerData::MergeFrom(const GameStartRejoinMessage_RejoinPlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartRejoinMessage.RejoinPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playermoney_ = from.playermoney_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameStartRejoinMessage_RejoinPlayerData::CopyFrom(const GameStartRejoinMessage_RejoinPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartRejoinMessage.RejoinPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage_RejoinPlayerData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameStartRejoinMessage_RejoinPlayerData::InternalSwap(GameStartRejoinMessage_RejoinPlayerData* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStartRejoinMessage_RejoinPlayerData, playermoney_)
      + sizeof(GameStartRejoinMessage_RejoinPlayerData::playermoney_)
      - PROTOBUF_FIELD_OFFSET(GameStartRejoinMessage_RejoinPlayerData, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string GameStartRejoinMessage_RejoinPlayerData::GetTypeName() const {
  return "GameStartRejoinMessage.RejoinPlayerData";
}


// ===================================================================

void GameStartRejoinMessage::InitAsDefaultInstance() {
}
class GameStartRejoinMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameStartRejoinMessage>()._has_bits_);
  static void set_has_startdealerplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_handnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameStartRejoinMessage::GameStartRejoinMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  rejoinplayerdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameStartRejoinMessage)
}
GameStartRejoinMessage::GameStartRejoinMessage(const GameStartRejoinMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      rejoinplayerdata_(from.rejoinplayerdata_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&startdealerplayerid_, &from.startdealerplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&handnum_) -
    reinterpret_cast<char*>(&startdealerplayerid_)) + sizeof(handnum_));
  // @@protoc_insertion_point(copy_constructor:GameStartRejoinMessage)
}

void GameStartRejoinMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStartRejoinMessage_pokerth_2eproto.base);
  ::memset(&startdealerplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handnum_) -
      reinterpret_cast<char*>(&startdealerplayerid_)) + sizeof(handnum_));
}

GameStartRejoinMessage::~GameStartRejoinMessage() {
  // @@protoc_insertion_point(destructor:GameStartRejoinMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameStartRejoinMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameStartRejoinMessage::ArenaDtor(void* object) {
  GameStartRejoinMessage* _this = reinterpret_cast< GameStartRejoinMessage* >(object);
  (void)_this;
}
void GameStartRejoinMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStartRejoinMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartRejoinMessage& GameStartRejoinMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStartRejoinMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameStartRejoinMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartRejoinMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejoinplayerdata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&startdealerplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&handnum_) -
        reinterpret_cast<char*>(&startdealerplayerid_)) + sizeof(handnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameStartRejoinMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 startDealerPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_startdealerplayerid(&has_bits);
          startdealerplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 handNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_handnum(&has_bits);
          handnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rejoinplayerdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStartRejoinMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStartRejoinMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 startDealerPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startdealerplayerid(), target);
  }

  // required uint32 handNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_handnum(), target);
  }

  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rejoinplayerdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rejoinplayerdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartRejoinMessage)
  return target;
}

size_t GameStartRejoinMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartRejoinMessage)
  size_t total_size = 0;

  if (_internal_has_startdealerplayerid()) {
    // required uint32 startDealerPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startdealerplayerid());
  }

  if (_internal_has_handnum()) {
    // required uint32 handNum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_handnum());
  }

  return total_size;
}
size_t GameStartRejoinMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartRejoinMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 startDealerPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startdealerplayerid());

    // required uint32 handNum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_handnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 3;
  total_size += 1UL * this->_internal_rejoinplayerdata_size();
  for (const auto& msg : this->rejoinplayerdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartRejoinMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameStartRejoinMessage*>(
      &from));
}

void GameStartRejoinMessage::MergeFrom(const GameStartRejoinMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartRejoinMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rejoinplayerdata_.MergeFrom(from.rejoinplayerdata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      startdealerplayerid_ = from.startdealerplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      handnum_ = from.handnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameStartRejoinMessage::CopyFrom(const GameStartRejoinMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartRejoinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rejoinplayerdata_)) return false;
  return true;
}

void GameStartRejoinMessage::InternalSwap(GameStartRejoinMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rejoinplayerdata_.InternalSwap(&other->rejoinplayerdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStartRejoinMessage, handnum_)
      + sizeof(GameStartRejoinMessage::handnum_)
      - PROTOBUF_FIELD_OFFSET(GameStartRejoinMessage, startdealerplayerid_)>(
          reinterpret_cast<char*>(&startdealerplayerid_),
          reinterpret_cast<char*>(&other->startdealerplayerid_));
}

std::string GameStartRejoinMessage::GetTypeName() const {
  return "GameStartRejoinMessage";
}


// ===================================================================

void HandStartMessage_PlainCards::InitAsDefaultInstance() {
}
class HandStartMessage_PlainCards::_Internal {
 public:
  using HasBits = decltype(std::declval<HandStartMessage_PlainCards>()._has_bits_);
  static void set_has_plaincard1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plaincard2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

HandStartMessage_PlainCards::HandStartMessage_PlainCards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HandStartMessage.PlainCards)
}
HandStartMessage_PlainCards::HandStartMessage_PlainCards(const HandStartMessage_PlainCards& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&plaincard1_, &from.plaincard1_,
    static_cast<size_t>(reinterpret_cast<char*>(&plaincard2_) -
    reinterpret_cast<char*>(&plaincard1_)) + sizeof(plaincard2_));
  // @@protoc_insertion_point(copy_constructor:HandStartMessage.PlainCards)
}

void HandStartMessage_PlainCards::SharedCtor() {
  ::memset(&plaincard1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plaincard2_) -
      reinterpret_cast<char*>(&plaincard1_)) + sizeof(plaincard2_));
}

HandStartMessage_PlainCards::~HandStartMessage_PlainCards() {
  // @@protoc_insertion_point(destructor:HandStartMessage.PlainCards)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HandStartMessage_PlainCards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HandStartMessage_PlainCards::ArenaDtor(void* object) {
  HandStartMessage_PlainCards* _this = reinterpret_cast< HandStartMessage_PlainCards* >(object);
  (void)_this;
}
void HandStartMessage_PlainCards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HandStartMessage_PlainCards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandStartMessage_PlainCards& HandStartMessage_PlainCards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandStartMessage_PlainCards_pokerth_2eproto.base);
  return *internal_default_instance();
}


void HandStartMessage_PlainCards::Clear() {
// @@protoc_insertion_point(message_clear_start:HandStartMessage.PlainCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&plaincard1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&plaincard2_) -
        reinterpret_cast<char*>(&plaincard1_)) + sizeof(plaincard2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HandStartMessage_PlainCards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 plainCard1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_plaincard1(&has_bits);
          plaincard1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 plainCard2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_plaincard2(&has_bits);
          plaincard2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandStartMessage_PlainCards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HandStartMessage.PlainCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 plainCard1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_plaincard1(), target);
  }

  // required uint32 plainCard2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_plaincard2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HandStartMessage.PlainCards)
  return target;
}

size_t HandStartMessage_PlainCards::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HandStartMessage.PlainCards)
  size_t total_size = 0;

  if (_internal_has_plaincard1()) {
    // required uint32 plainCard1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plaincard1());
  }

  if (_internal_has_plaincard2()) {
    // required uint32 plainCard2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plaincard2());
  }

  return total_size;
}
size_t HandStartMessage_PlainCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HandStartMessage.PlainCards)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 plainCard1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plaincard1());

    // required uint32 plainCard2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plaincard2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandStartMessage_PlainCards::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HandStartMessage_PlainCards*>(
      &from));
}

void HandStartMessage_PlainCards::MergeFrom(const HandStartMessage_PlainCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HandStartMessage.PlainCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      plaincard1_ = from.plaincard1_;
    }
    if (cached_has_bits & 0x00000002u) {
      plaincard2_ = from.plaincard2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HandStartMessage_PlainCards::CopyFrom(const HandStartMessage_PlainCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandStartMessage.PlainCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage_PlainCards::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void HandStartMessage_PlainCards::InternalSwap(HandStartMessage_PlainCards* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HandStartMessage_PlainCards, plaincard2_)
      + sizeof(HandStartMessage_PlainCards::plaincard2_)
      - PROTOBUF_FIELD_OFFSET(HandStartMessage_PlainCards, plaincard1_)>(
          reinterpret_cast<char*>(&plaincard1_),
          reinterpret_cast<char*>(&other->plaincard1_));
}

std::string HandStartMessage_PlainCards::GetTypeName() const {
  return "HandStartMessage.PlainCards";
}


// ===================================================================

void HandStartMessage::InitAsDefaultInstance() {
  ::_HandStartMessage_default_instance_._instance.get_mutable()->plaincards_ = const_cast< ::HandStartMessage_PlainCards*>(
      ::HandStartMessage_PlainCards::internal_default_instance());
}
class HandStartMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<HandStartMessage>()._has_bits_);
  static const ::HandStartMessage_PlainCards& plaincards(const HandStartMessage* msg);
  static void set_has_plaincards(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encryptedcards(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_smallblind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dealerplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::HandStartMessage_PlainCards&
HandStartMessage::_Internal::plaincards(const HandStartMessage* msg) {
  return *msg->plaincards_;
}
HandStartMessage::HandStartMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  seatstates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HandStartMessage)
}
HandStartMessage::HandStartMessage(const HandStartMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      seatstates_(from.seatstates_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  encryptedcards_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encryptedcards()) {
    encryptedcards_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encryptedcards(),
      GetArena());
  }
  if (from._internal_has_plaincards()) {
    plaincards_ = new ::HandStartMessage_PlainCards(*from.plaincards_);
  } else {
    plaincards_ = nullptr;
  }
  ::memcpy(&smallblind_, &from.smallblind_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealerplayerid_) -
    reinterpret_cast<char*>(&smallblind_)) + sizeof(dealerplayerid_));
  // @@protoc_insertion_point(copy_constructor:HandStartMessage)
}

void HandStartMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HandStartMessage_pokerth_2eproto.base);
  encryptedcards_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&plaincards_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealerplayerid_) -
      reinterpret_cast<char*>(&plaincards_)) + sizeof(dealerplayerid_));
}

HandStartMessage::~HandStartMessage() {
  // @@protoc_insertion_point(destructor:HandStartMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HandStartMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encryptedcards_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plaincards_;
}

void HandStartMessage::ArenaDtor(void* object) {
  HandStartMessage* _this = reinterpret_cast< HandStartMessage* >(object);
  (void)_this;
}
void HandStartMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HandStartMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandStartMessage& HandStartMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandStartMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void HandStartMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HandStartMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seatstates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      encryptedcards_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(plaincards_ != nullptr);
      plaincards_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&smallblind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dealerplayerid_) -
        reinterpret_cast<char*>(&smallblind_)) + sizeof(dealerplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HandStartMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .HandStartMessage.PlainCards plainCards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plaincards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes encryptedCards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_encryptedcards();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 smallBlind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_smallblind(&has_bits);
          smallblind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NetPlayerState seatStates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::NetPlayerState_IsValid(val))) {
              _internal_add_seatstates(static_cast<::NetPlayerState>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_seatstates(), ptr, ctx, ::NetPlayerState_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dealerPlayerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dealerplayerid(&has_bits);
          dealerplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandStartMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HandStartMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .HandStartMessage.PlainCards plainCards = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plaincards(this), target, stream);
  }

  // optional bytes encryptedCards = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encryptedcards(), target);
  }

  // required uint32 smallBlind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_smallblind(), target);
  }

  // repeated .NetPlayerState seatStates = 4;
  for (int i = 0, n = this->_internal_seatstates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        4, this->_internal_seatstates(i), target);
  }

  // optional uint32 dealerPlayerId = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dealerplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HandStartMessage)
  return target;
}

size_t HandStartMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HandStartMessage)
  size_t total_size = 0;

  // required uint32 smallBlind = 3;
  if (_internal_has_smallblind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_smallblind());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NetPlayerState seatStates = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_seatstates_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_seatstates(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encryptedCards = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encryptedcards());
    }

    // optional .HandStartMessage.PlainCards plainCards = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plaincards_);
    }

  }
  // optional uint32 dealerPlayerId = 5;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dealerplayerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandStartMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HandStartMessage*>(
      &from));
}

void HandStartMessage::MergeFrom(const HandStartMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HandStartMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seatstates_.MergeFrom(from.seatstates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encryptedcards(from._internal_encryptedcards());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_plaincards()->::HandStartMessage_PlainCards::MergeFrom(from._internal_plaincards());
    }
    if (cached_has_bits & 0x00000004u) {
      smallblind_ = from.smallblind_;
    }
    if (cached_has_bits & 0x00000008u) {
      dealerplayerid_ = from.dealerplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HandStartMessage::CopyFrom(const HandStartMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandStartMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_plaincards()) {
    if (!plaincards_->IsInitialized()) return false;
  }
  return true;
}

void HandStartMessage::InternalSwap(HandStartMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  seatstates_.InternalSwap(&other->seatstates_);
  encryptedcards_.Swap(&other->encryptedcards_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HandStartMessage, dealerplayerid_)
      + sizeof(HandStartMessage::dealerplayerid_)
      - PROTOBUF_FIELD_OFFSET(HandStartMessage, plaincards_)>(
          reinterpret_cast<char*>(&plaincards_),
          reinterpret_cast<char*>(&other->plaincards_));
}

std::string HandStartMessage::GetTypeName() const {
  return "HandStartMessage";
}


// ===================================================================

void PlayersTurnMessage::InitAsDefaultInstance() {
}
class PlayersTurnMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayersTurnMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayersTurnMessage::PlayersTurnMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayersTurnMessage)
}
PlayersTurnMessage::PlayersTurnMessage(const PlayersTurnMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamestate_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(gamestate_));
  // @@protoc_insertion_point(copy_constructor:PlayersTurnMessage)
}

void PlayersTurnMessage::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamestate_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(gamestate_));
}

PlayersTurnMessage::~PlayersTurnMessage() {
  // @@protoc_insertion_point(destructor:PlayersTurnMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PlayersTurnMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayersTurnMessage::ArenaDtor(void* object) {
  PlayersTurnMessage* _this = reinterpret_cast< PlayersTurnMessage* >(object);
  (void)_this;
}
void PlayersTurnMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayersTurnMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayersTurnMessage& PlayersTurnMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayersTurnMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayersTurnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayersTurnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamestate_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(gamestate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayersTurnMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameState gameState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameState_IsValid(val))) {
            _internal_set_gamestate(static_cast<::NetGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayersTurnMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayersTurnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .NetGameState gameState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayersTurnMessage)
  return target;
}

size_t PlayersTurnMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayersTurnMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_gamestate()) {
    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  return total_size;
}
size_t PlayersTurnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayersTurnMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamestate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayersTurnMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayersTurnMessage*>(
      &from));
}

void PlayersTurnMessage::MergeFrom(const PlayersTurnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayersTurnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamestate_ = from.gamestate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayersTurnMessage::CopyFrom(const PlayersTurnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayersTurnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersTurnMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayersTurnMessage::InternalSwap(PlayersTurnMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayersTurnMessage, gamestate_)
      + sizeof(PlayersTurnMessage::gamestate_)
      - PROTOBUF_FIELD_OFFSET(PlayersTurnMessage, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string PlayersTurnMessage::GetTypeName() const {
  return "PlayersTurnMessage";
}


// ===================================================================

void MyActionRequestMessage::InitAsDefaultInstance() {
}
class MyActionRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<MyActionRequestMessage>()._has_bits_);
  static void set_has_handnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_myaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_myrelativebet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

MyActionRequestMessage::MyActionRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyActionRequestMessage)
}
MyActionRequestMessage::MyActionRequestMessage(const MyActionRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&handnum_, &from.handnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&myrelativebet_) -
    reinterpret_cast<char*>(&handnum_)) + sizeof(myrelativebet_));
  // @@protoc_insertion_point(copy_constructor:MyActionRequestMessage)
}

void MyActionRequestMessage::SharedCtor() {
  ::memset(&handnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&myrelativebet_) -
      reinterpret_cast<char*>(&handnum_)) + sizeof(myrelativebet_));
}

MyActionRequestMessage::~MyActionRequestMessage() {
  // @@protoc_insertion_point(destructor:MyActionRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MyActionRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MyActionRequestMessage::ArenaDtor(void* object) {
  MyActionRequestMessage* _this = reinterpret_cast< MyActionRequestMessage* >(object);
  (void)_this;
}
void MyActionRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MyActionRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyActionRequestMessage& MyActionRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyActionRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void MyActionRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MyActionRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&handnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&myrelativebet_) -
        reinterpret_cast<char*>(&handnum_)) + sizeof(myrelativebet_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MyActionRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 handNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handnum(&has_bits);
          handnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameState gameState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameState_IsValid(val))) {
            _internal_set_gamestate(static_cast<::NetGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .NetPlayerAction myAction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetPlayerAction_IsValid(val))) {
            _internal_set_myaction(static_cast<::NetPlayerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 myRelativeBet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_myrelativebet(&has_bits);
          myrelativebet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyActionRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyActionRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 handNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handnum(), target);
  }

  // required .NetGameState gameState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamestate(), target);
  }

  // required .NetPlayerAction myAction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_myaction(), target);
  }

  // required uint32 myRelativeBet = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_myrelativebet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyActionRequestMessage)
  return target;
}

size_t MyActionRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MyActionRequestMessage)
  size_t total_size = 0;

  if (_internal_has_handnum()) {
    // required uint32 handNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_handnum());
  }

  if (_internal_has_gamestate()) {
    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  if (_internal_has_myaction()) {
    // required .NetPlayerAction myAction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_myaction());
  }

  if (_internal_has_myrelativebet()) {
    // required uint32 myRelativeBet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_myrelativebet());
  }

  return total_size;
}
size_t MyActionRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyActionRequestMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 handNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_handnum());

    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamestate());

    // required .NetPlayerAction myAction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_myaction());

    // required uint32 myRelativeBet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_myrelativebet());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyActionRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MyActionRequestMessage*>(
      &from));
}

void MyActionRequestMessage::MergeFrom(const MyActionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyActionRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      handnum_ = from.handnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamestate_ = from.gamestate_;
    }
    if (cached_has_bits & 0x00000004u) {
      myaction_ = from.myaction_;
    }
    if (cached_has_bits & 0x00000008u) {
      myrelativebet_ = from.myrelativebet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MyActionRequestMessage::CopyFrom(const MyActionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyActionRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyActionRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MyActionRequestMessage::InternalSwap(MyActionRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyActionRequestMessage, myrelativebet_)
      + sizeof(MyActionRequestMessage::myrelativebet_)
      - PROTOBUF_FIELD_OFFSET(MyActionRequestMessage, handnum_)>(
          reinterpret_cast<char*>(&handnum_),
          reinterpret_cast<char*>(&other->handnum_));
}

std::string MyActionRequestMessage::GetTypeName() const {
  return "MyActionRequestMessage";
}


// ===================================================================

void YourActionRejectedMessage::InitAsDefaultInstance() {
}
class YourActionRejectedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<YourActionRejectedMessage>()._has_bits_);
  static void set_has_gamestate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_youraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yourrelativebet(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rejectionreason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

YourActionRejectedMessage::YourActionRejectedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:YourActionRejectedMessage)
}
YourActionRejectedMessage::YourActionRejectedMessage(const YourActionRejectedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&gamestate_, &from.gamestate_,
    static_cast<size_t>(reinterpret_cast<char*>(&rejectionreason_) -
    reinterpret_cast<char*>(&gamestate_)) + sizeof(rejectionreason_));
  // @@protoc_insertion_point(copy_constructor:YourActionRejectedMessage)
}

void YourActionRejectedMessage::SharedCtor() {
  ::memset(&gamestate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yourrelativebet_) -
      reinterpret_cast<char*>(&gamestate_)) + sizeof(yourrelativebet_));
  rejectionreason_ = 1;
}

YourActionRejectedMessage::~YourActionRejectedMessage() {
  // @@protoc_insertion_point(destructor:YourActionRejectedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void YourActionRejectedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void YourActionRejectedMessage::ArenaDtor(void* object) {
  YourActionRejectedMessage* _this = reinterpret_cast< YourActionRejectedMessage* >(object);
  (void)_this;
}
void YourActionRejectedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void YourActionRejectedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YourActionRejectedMessage& YourActionRejectedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_YourActionRejectedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void YourActionRejectedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:YourActionRejectedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&gamestate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yourrelativebet_) -
        reinterpret_cast<char*>(&gamestate_)) + sizeof(yourrelativebet_));
    rejectionreason_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* YourActionRejectedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .NetGameState gameState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameState_IsValid(val))) {
            _internal_set_gamestate(static_cast<::NetGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .NetPlayerAction yourAction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetPlayerAction_IsValid(val))) {
            _internal_set_youraction(static_cast<::NetPlayerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 yourRelativeBet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_yourrelativebet(&has_bits);
          yourrelativebet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .YourActionRejectedMessage.RejectionReason rejectionReason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::YourActionRejectedMessage_RejectionReason_IsValid(val))) {
            _internal_set_rejectionreason(static_cast<::YourActionRejectedMessage_RejectionReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* YourActionRejectedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YourActionRejectedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NetGameState gameState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gamestate(), target);
  }

  // required .NetPlayerAction yourAction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_youraction(), target);
  }

  // required uint32 yourRelativeBet = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_yourrelativebet(), target);
  }

  // required .YourActionRejectedMessage.RejectionReason rejectionReason = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rejectionreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YourActionRejectedMessage)
  return target;
}

size_t YourActionRejectedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:YourActionRejectedMessage)
  size_t total_size = 0;

  if (_internal_has_gamestate()) {
    // required .NetGameState gameState = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  if (_internal_has_youraction()) {
    // required .NetPlayerAction yourAction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_youraction());
  }

  if (_internal_has_yourrelativebet()) {
    // required uint32 yourRelativeBet = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yourrelativebet());
  }

  if (_internal_has_rejectionreason()) {
    // required .YourActionRejectedMessage.RejectionReason rejectionReason = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rejectionreason());
  }

  return total_size;
}
size_t YourActionRejectedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YourActionRejectedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .NetGameState gameState = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamestate());

    // required .NetPlayerAction yourAction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_youraction());

    // required uint32 yourRelativeBet = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yourrelativebet());

    // required .YourActionRejectedMessage.RejectionReason rejectionReason = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rejectionreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YourActionRejectedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const YourActionRejectedMessage*>(
      &from));
}

void YourActionRejectedMessage::MergeFrom(const YourActionRejectedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YourActionRejectedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      gamestate_ = from.gamestate_;
    }
    if (cached_has_bits & 0x00000002u) {
      youraction_ = from.youraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      yourrelativebet_ = from.yourrelativebet_;
    }
    if (cached_has_bits & 0x00000008u) {
      rejectionreason_ = from.rejectionreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YourActionRejectedMessage::CopyFrom(const YourActionRejectedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YourActionRejectedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YourActionRejectedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void YourActionRejectedMessage::InternalSwap(YourActionRejectedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(YourActionRejectedMessage, yourrelativebet_)
      + sizeof(YourActionRejectedMessage::yourrelativebet_)
      - PROTOBUF_FIELD_OFFSET(YourActionRejectedMessage, gamestate_)>(
          reinterpret_cast<char*>(&gamestate_),
          reinterpret_cast<char*>(&other->gamestate_));
  swap(rejectionreason_, other->rejectionreason_);
}

std::string YourActionRejectedMessage::GetTypeName() const {
  return "YourActionRejectedMessage";
}


// ===================================================================

void PlayersActionDoneMessage::InitAsDefaultInstance() {
}
class PlayersActionDoneMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayersActionDoneMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamestate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playeraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_totalplayerbet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playermoney(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_highestset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_minimumraise(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

PlayersActionDoneMessage::PlayersActionDoneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayersActionDoneMessage)
}
PlayersActionDoneMessage::PlayersActionDoneMessage(const PlayersActionDoneMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&minimumraise_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(minimumraise_));
  // @@protoc_insertion_point(copy_constructor:PlayersActionDoneMessage)
}

void PlayersActionDoneMessage::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minimumraise_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(minimumraise_));
}

PlayersActionDoneMessage::~PlayersActionDoneMessage() {
  // @@protoc_insertion_point(destructor:PlayersActionDoneMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PlayersActionDoneMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayersActionDoneMessage::ArenaDtor(void* object) {
  PlayersActionDoneMessage* _this = reinterpret_cast< PlayersActionDoneMessage* >(object);
  (void)_this;
}
void PlayersActionDoneMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayersActionDoneMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayersActionDoneMessage& PlayersActionDoneMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayersActionDoneMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayersActionDoneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayersActionDoneMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minimumraise_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(minimumraise_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayersActionDoneMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .NetGameState gameState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetGameState_IsValid(val))) {
            _internal_set_gamestate(static_cast<::NetGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .NetPlayerAction playerAction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NetPlayerAction_IsValid(val))) {
            _internal_set_playeraction(static_cast<::NetPlayerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 totalPlayerBet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_totalplayerbet(&has_bits);
          totalplayerbet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerMoney = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_playermoney(&has_bits);
          playermoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 highestSet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_highestset(&has_bits);
          highestset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 minimumRaise = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_minimumraise(&has_bits);
          minimumraise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayersActionDoneMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayersActionDoneMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .NetGameState gameState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gamestate(), target);
  }

  // required .NetPlayerAction playerAction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_playeraction(), target);
  }

  // required uint32 totalPlayerBet = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_totalplayerbet(), target);
  }

  // required uint32 playerMoney = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_playermoney(), target);
  }

  // required uint32 highestSet = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_highestset(), target);
  }

  // required uint32 minimumRaise = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_minimumraise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayersActionDoneMessage)
  return target;
}

size_t PlayersActionDoneMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayersActionDoneMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_gamestate()) {
    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  if (_internal_has_playeraction()) {
    // required .NetPlayerAction playerAction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playeraction());
  }

  if (_internal_has_totalplayerbet()) {
    // required uint32 totalPlayerBet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalplayerbet());
  }

  if (_internal_has_playermoney()) {
    // required uint32 playerMoney = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playermoney());
  }

  if (_internal_has_highestset()) {
    // required uint32 highestSet = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_highestset());
  }

  if (_internal_has_minimumraise()) {
    // required uint32 minimumRaise = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minimumraise());
  }

  return total_size;
}
size_t PlayersActionDoneMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayersActionDoneMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamestate());

    // required .NetPlayerAction playerAction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playeraction());

    // required uint32 totalPlayerBet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalplayerbet());

    // required uint32 playerMoney = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playermoney());

    // required uint32 highestSet = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_highestset());

    // required uint32 minimumRaise = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minimumraise());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayersActionDoneMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayersActionDoneMessage*>(
      &from));
}

void PlayersActionDoneMessage::MergeFrom(const PlayersActionDoneMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayersActionDoneMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamestate_ = from.gamestate_;
    }
    if (cached_has_bits & 0x00000004u) {
      playeraction_ = from.playeraction_;
    }
    if (cached_has_bits & 0x00000008u) {
      totalplayerbet_ = from.totalplayerbet_;
    }
    if (cached_has_bits & 0x00000010u) {
      playermoney_ = from.playermoney_;
    }
    if (cached_has_bits & 0x00000020u) {
      highestset_ = from.highestset_;
    }
    if (cached_has_bits & 0x00000040u) {
      minimumraise_ = from.minimumraise_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayersActionDoneMessage::CopyFrom(const PlayersActionDoneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayersActionDoneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersActionDoneMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayersActionDoneMessage::InternalSwap(PlayersActionDoneMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayersActionDoneMessage, minimumraise_)
      + sizeof(PlayersActionDoneMessage::minimumraise_)
      - PROTOBUF_FIELD_OFFSET(PlayersActionDoneMessage, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string PlayersActionDoneMessage::GetTypeName() const {
  return "PlayersActionDoneMessage";
}


// ===================================================================

void DealFlopCardsMessage::InitAsDefaultInstance() {
}
class DealFlopCardsMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DealFlopCardsMessage>()._has_bits_);
  static void set_has_flopcard1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flopcard2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flopcard3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

DealFlopCardsMessage::DealFlopCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DealFlopCardsMessage)
}
DealFlopCardsMessage::DealFlopCardsMessage(const DealFlopCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&flopcard1_, &from.flopcard1_,
    static_cast<size_t>(reinterpret_cast<char*>(&flopcard3_) -
    reinterpret_cast<char*>(&flopcard1_)) + sizeof(flopcard3_));
  // @@protoc_insertion_point(copy_constructor:DealFlopCardsMessage)
}

void DealFlopCardsMessage::SharedCtor() {
  ::memset(&flopcard1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flopcard3_) -
      reinterpret_cast<char*>(&flopcard1_)) + sizeof(flopcard3_));
}

DealFlopCardsMessage::~DealFlopCardsMessage() {
  // @@protoc_insertion_point(destructor:DealFlopCardsMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DealFlopCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DealFlopCardsMessage::ArenaDtor(void* object) {
  DealFlopCardsMessage* _this = reinterpret_cast< DealFlopCardsMessage* >(object);
  (void)_this;
}
void DealFlopCardsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DealFlopCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealFlopCardsMessage& DealFlopCardsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DealFlopCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void DealFlopCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealFlopCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&flopcard1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flopcard3_) -
        reinterpret_cast<char*>(&flopcard1_)) + sizeof(flopcard3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DealFlopCardsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 flopCard1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flopcard1(&has_bits);
          flopcard1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 flopCard2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flopcard2(&has_bits);
          flopcard2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 flopCard3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flopcard3(&has_bits);
          flopcard3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DealFlopCardsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DealFlopCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 flopCard1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flopcard1(), target);
  }

  // required uint32 flopCard2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flopcard2(), target);
  }

  // required uint32 flopCard3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flopcard3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DealFlopCardsMessage)
  return target;
}

size_t DealFlopCardsMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DealFlopCardsMessage)
  size_t total_size = 0;

  if (_internal_has_flopcard1()) {
    // required uint32 flopCard1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flopcard1());
  }

  if (_internal_has_flopcard2()) {
    // required uint32 flopCard2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flopcard2());
  }

  if (_internal_has_flopcard3()) {
    // required uint32 flopCard3 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flopcard3());
  }

  return total_size;
}
size_t DealFlopCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DealFlopCardsMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 flopCard1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flopcard1());

    // required uint32 flopCard2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flopcard2());

    // required uint32 flopCard3 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flopcard3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealFlopCardsMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DealFlopCardsMessage*>(
      &from));
}

void DealFlopCardsMessage::MergeFrom(const DealFlopCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DealFlopCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      flopcard1_ = from.flopcard1_;
    }
    if (cached_has_bits & 0x00000002u) {
      flopcard2_ = from.flopcard2_;
    }
    if (cached_has_bits & 0x00000004u) {
      flopcard3_ = from.flopcard3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DealFlopCardsMessage::CopyFrom(const DealFlopCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealFlopCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealFlopCardsMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DealFlopCardsMessage::InternalSwap(DealFlopCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DealFlopCardsMessage, flopcard3_)
      + sizeof(DealFlopCardsMessage::flopcard3_)
      - PROTOBUF_FIELD_OFFSET(DealFlopCardsMessage, flopcard1_)>(
          reinterpret_cast<char*>(&flopcard1_),
          reinterpret_cast<char*>(&other->flopcard1_));
}

std::string DealFlopCardsMessage::GetTypeName() const {
  return "DealFlopCardsMessage";
}


// ===================================================================

void DealTurnCardMessage::InitAsDefaultInstance() {
}
class DealTurnCardMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DealTurnCardMessage>()._has_bits_);
  static void set_has_turncard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DealTurnCardMessage::DealTurnCardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DealTurnCardMessage)
}
DealTurnCardMessage::DealTurnCardMessage(const DealTurnCardMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  turncard_ = from.turncard_;
  // @@protoc_insertion_point(copy_constructor:DealTurnCardMessage)
}

void DealTurnCardMessage::SharedCtor() {
  turncard_ = 0u;
}

DealTurnCardMessage::~DealTurnCardMessage() {
  // @@protoc_insertion_point(destructor:DealTurnCardMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DealTurnCardMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DealTurnCardMessage::ArenaDtor(void* object) {
  DealTurnCardMessage* _this = reinterpret_cast< DealTurnCardMessage* >(object);
  (void)_this;
}
void DealTurnCardMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DealTurnCardMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealTurnCardMessage& DealTurnCardMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DealTurnCardMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void DealTurnCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealTurnCardMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  turncard_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DealTurnCardMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 turnCard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_turncard(&has_bits);
          turncard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DealTurnCardMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DealTurnCardMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 turnCard = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_turncard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DealTurnCardMessage)
  return target;
}

size_t DealTurnCardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DealTurnCardMessage)
  size_t total_size = 0;

  // required uint32 turnCard = 1;
  if (_internal_has_turncard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_turncard());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealTurnCardMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DealTurnCardMessage*>(
      &from));
}

void DealTurnCardMessage::MergeFrom(const DealTurnCardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DealTurnCardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turncard()) {
    _internal_set_turncard(from._internal_turncard());
  }
}

void DealTurnCardMessage::CopyFrom(const DealTurnCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealTurnCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealTurnCardMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DealTurnCardMessage::InternalSwap(DealTurnCardMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(turncard_, other->turncard_);
}

std::string DealTurnCardMessage::GetTypeName() const {
  return "DealTurnCardMessage";
}


// ===================================================================

void DealRiverCardMessage::InitAsDefaultInstance() {
}
class DealRiverCardMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DealRiverCardMessage>()._has_bits_);
  static void set_has_rivercard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DealRiverCardMessage::DealRiverCardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DealRiverCardMessage)
}
DealRiverCardMessage::DealRiverCardMessage(const DealRiverCardMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  rivercard_ = from.rivercard_;
  // @@protoc_insertion_point(copy_constructor:DealRiverCardMessage)
}

void DealRiverCardMessage::SharedCtor() {
  rivercard_ = 0u;
}

DealRiverCardMessage::~DealRiverCardMessage() {
  // @@protoc_insertion_point(destructor:DealRiverCardMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DealRiverCardMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DealRiverCardMessage::ArenaDtor(void* object) {
  DealRiverCardMessage* _this = reinterpret_cast< DealRiverCardMessage* >(object);
  (void)_this;
}
void DealRiverCardMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DealRiverCardMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealRiverCardMessage& DealRiverCardMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DealRiverCardMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void DealRiverCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealRiverCardMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rivercard_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DealRiverCardMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 riverCard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rivercard(&has_bits);
          rivercard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DealRiverCardMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DealRiverCardMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 riverCard = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rivercard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DealRiverCardMessage)
  return target;
}

size_t DealRiverCardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DealRiverCardMessage)
  size_t total_size = 0;

  // required uint32 riverCard = 1;
  if (_internal_has_rivercard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rivercard());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealRiverCardMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DealRiverCardMessage*>(
      &from));
}

void DealRiverCardMessage::MergeFrom(const DealRiverCardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DealRiverCardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rivercard()) {
    _internal_set_rivercard(from._internal_rivercard());
  }
}

void DealRiverCardMessage::CopyFrom(const DealRiverCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealRiverCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealRiverCardMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DealRiverCardMessage::InternalSwap(DealRiverCardMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rivercard_, other->rivercard_);
}

std::string DealRiverCardMessage::GetTypeName() const {
  return "DealRiverCardMessage";
}


// ===================================================================

void AllInShowCardsMessage_PlayerAllIn::InitAsDefaultInstance() {
}
class AllInShowCardsMessage_PlayerAllIn::_Internal {
 public:
  using HasBits = decltype(std::declval<AllInShowCardsMessage_PlayerAllIn>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allincard1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allincard2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AllInShowCardsMessage.PlayerAllIn)
}
AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn(const AllInShowCardsMessage_PlayerAllIn& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&allincard2_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(allincard2_));
  // @@protoc_insertion_point(copy_constructor:AllInShowCardsMessage.PlayerAllIn)
}

void AllInShowCardsMessage_PlayerAllIn::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allincard2_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(allincard2_));
}

AllInShowCardsMessage_PlayerAllIn::~AllInShowCardsMessage_PlayerAllIn() {
  // @@protoc_insertion_point(destructor:AllInShowCardsMessage.PlayerAllIn)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AllInShowCardsMessage_PlayerAllIn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllInShowCardsMessage_PlayerAllIn::ArenaDtor(void* object) {
  AllInShowCardsMessage_PlayerAllIn* _this = reinterpret_cast< AllInShowCardsMessage_PlayerAllIn* >(object);
  (void)_this;
}
void AllInShowCardsMessage_PlayerAllIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllInShowCardsMessage_PlayerAllIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllInShowCardsMessage_PlayerAllIn& AllInShowCardsMessage_PlayerAllIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AllInShowCardsMessage_PlayerAllIn::Clear() {
// @@protoc_insertion_point(message_clear_start:AllInShowCardsMessage.PlayerAllIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allincard2_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(allincard2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AllInShowCardsMessage_PlayerAllIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 allInCard1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_allincard1(&has_bits);
          allincard1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 allInCard2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_allincard2(&has_bits);
          allincard2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllInShowCardsMessage_PlayerAllIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllInShowCardsMessage.PlayerAllIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required uint32 allInCard1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_allincard1(), target);
  }

  // required uint32 allInCard2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_allincard2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllInShowCardsMessage.PlayerAllIn)
  return target;
}

size_t AllInShowCardsMessage_PlayerAllIn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AllInShowCardsMessage.PlayerAllIn)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_allincard1()) {
    // required uint32 allInCard1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_allincard1());
  }

  if (_internal_has_allincard2()) {
    // required uint32 allInCard2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_allincard2());
  }

  return total_size;
}
size_t AllInShowCardsMessage_PlayerAllIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AllInShowCardsMessage.PlayerAllIn)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required uint32 allInCard1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_allincard1());

    // required uint32 allInCard2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_allincard2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllInShowCardsMessage_PlayerAllIn::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AllInShowCardsMessage_PlayerAllIn*>(
      &from));
}

void AllInShowCardsMessage_PlayerAllIn::MergeFrom(const AllInShowCardsMessage_PlayerAllIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AllInShowCardsMessage.PlayerAllIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      allincard1_ = from.allincard1_;
    }
    if (cached_has_bits & 0x00000004u) {
      allincard2_ = from.allincard2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AllInShowCardsMessage_PlayerAllIn::CopyFrom(const AllInShowCardsMessage_PlayerAllIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllInShowCardsMessage.PlayerAllIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage_PlayerAllIn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AllInShowCardsMessage_PlayerAllIn::InternalSwap(AllInShowCardsMessage_PlayerAllIn* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllInShowCardsMessage_PlayerAllIn, allincard2_)
      + sizeof(AllInShowCardsMessage_PlayerAllIn::allincard2_)
      - PROTOBUF_FIELD_OFFSET(AllInShowCardsMessage_PlayerAllIn, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string AllInShowCardsMessage_PlayerAllIn::GetTypeName() const {
  return "AllInShowCardsMessage.PlayerAllIn";
}


// ===================================================================

void AllInShowCardsMessage::InitAsDefaultInstance() {
}
class AllInShowCardsMessage::_Internal {
 public:
};

AllInShowCardsMessage::AllInShowCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  playersallin_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AllInShowCardsMessage)
}
AllInShowCardsMessage::AllInShowCardsMessage(const AllInShowCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      playersallin_(from.playersallin_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AllInShowCardsMessage)
}

void AllInShowCardsMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllInShowCardsMessage_pokerth_2eproto.base);
}

AllInShowCardsMessage::~AllInShowCardsMessage() {
  // @@protoc_insertion_point(destructor:AllInShowCardsMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AllInShowCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllInShowCardsMessage::ArenaDtor(void* object) {
  AllInShowCardsMessage* _this = reinterpret_cast< AllInShowCardsMessage* >(object);
  (void)_this;
}
void AllInShowCardsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllInShowCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllInShowCardsMessage& AllInShowCardsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllInShowCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AllInShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AllInShowCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersallin_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AllInShowCardsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playersallin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllInShowCardsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllInShowCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playersallin_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_playersallin(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllInShowCardsMessage)
  return target;
}

size_t AllInShowCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AllInShowCardsMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 1;
  total_size += 1UL * this->_internal_playersallin_size();
  for (const auto& msg : this->playersallin_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllInShowCardsMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AllInShowCardsMessage*>(
      &from));
}

void AllInShowCardsMessage::MergeFrom(const AllInShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AllInShowCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playersallin_.MergeFrom(from.playersallin_);
}

void AllInShowCardsMessage::CopyFrom(const AllInShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllInShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(playersallin_)) return false;
  return true;
}

void AllInShowCardsMessage::InternalSwap(AllInShowCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  playersallin_.InternalSwap(&other->playersallin_);
}

std::string AllInShowCardsMessage::GetTypeName() const {
  return "AllInShowCardsMessage";
}


// ===================================================================

void EndOfHandShowCardsMessage::InitAsDefaultInstance() {
}
class EndOfHandShowCardsMessage::_Internal {
 public:
};

EndOfHandShowCardsMessage::EndOfHandShowCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  playerresults_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EndOfHandShowCardsMessage)
}
EndOfHandShowCardsMessage::EndOfHandShowCardsMessage(const EndOfHandShowCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      playerresults_(from.playerresults_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EndOfHandShowCardsMessage)
}

void EndOfHandShowCardsMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndOfHandShowCardsMessage_pokerth_2eproto.base);
}

EndOfHandShowCardsMessage::~EndOfHandShowCardsMessage() {
  // @@protoc_insertion_point(destructor:EndOfHandShowCardsMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EndOfHandShowCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EndOfHandShowCardsMessage::ArenaDtor(void* object) {
  EndOfHandShowCardsMessage* _this = reinterpret_cast< EndOfHandShowCardsMessage* >(object);
  (void)_this;
}
void EndOfHandShowCardsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndOfHandShowCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndOfHandShowCardsMessage& EndOfHandShowCardsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndOfHandShowCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void EndOfHandShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfHandShowCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerresults_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EndOfHandShowCardsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlayerResult playerResults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndOfHandShowCardsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndOfHandShowCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerResult playerResults = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerresults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_playerresults(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndOfHandShowCardsMessage)
  return target;
}

size_t EndOfHandShowCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfHandShowCardsMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerResult playerResults = 1;
  total_size += 1UL * this->_internal_playerresults_size();
  for (const auto& msg : this->playerresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndOfHandShowCardsMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EndOfHandShowCardsMessage*>(
      &from));
}

void EndOfHandShowCardsMessage::MergeFrom(const EndOfHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndOfHandShowCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerresults_.MergeFrom(from.playerresults_);
}

void EndOfHandShowCardsMessage::CopyFrom(const EndOfHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfHandShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandShowCardsMessage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(playerresults_)) return false;
  return true;
}

void EndOfHandShowCardsMessage::InternalSwap(EndOfHandShowCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  playerresults_.InternalSwap(&other->playerresults_);
}

std::string EndOfHandShowCardsMessage::GetTypeName() const {
  return "EndOfHandShowCardsMessage";
}


// ===================================================================

void EndOfHandHideCardsMessage::InitAsDefaultInstance() {
}
class EndOfHandHideCardsMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<EndOfHandHideCardsMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moneywon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playermoney(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

EndOfHandHideCardsMessage::EndOfHandHideCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EndOfHandHideCardsMessage)
}
EndOfHandHideCardsMessage::EndOfHandHideCardsMessage(const EndOfHandHideCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playermoney_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(playermoney_));
  // @@protoc_insertion_point(copy_constructor:EndOfHandHideCardsMessage)
}

void EndOfHandHideCardsMessage::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playermoney_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(playermoney_));
}

EndOfHandHideCardsMessage::~EndOfHandHideCardsMessage() {
  // @@protoc_insertion_point(destructor:EndOfHandHideCardsMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EndOfHandHideCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EndOfHandHideCardsMessage::ArenaDtor(void* object) {
  EndOfHandHideCardsMessage* _this = reinterpret_cast< EndOfHandHideCardsMessage* >(object);
  (void)_this;
}
void EndOfHandHideCardsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndOfHandHideCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndOfHandHideCardsMessage& EndOfHandHideCardsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndOfHandHideCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void EndOfHandHideCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfHandHideCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playermoney_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(playermoney_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EndOfHandHideCardsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 moneyWon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_moneywon(&has_bits);
          moneywon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 playerMoney = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_playermoney(&has_bits);
          playermoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndOfHandHideCardsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndOfHandHideCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required uint32 moneyWon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_moneywon(), target);
  }

  // required uint32 playerMoney = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_playermoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndOfHandHideCardsMessage)
  return target;
}

size_t EndOfHandHideCardsMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndOfHandHideCardsMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_moneywon()) {
    // required uint32 moneyWon = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moneywon());
  }

  if (_internal_has_playermoney()) {
    // required uint32 playerMoney = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playermoney());
  }

  return total_size;
}
size_t EndOfHandHideCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfHandHideCardsMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required uint32 moneyWon = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moneywon());

    // required uint32 playerMoney = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndOfHandHideCardsMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EndOfHandHideCardsMessage*>(
      &from));
}

void EndOfHandHideCardsMessage::MergeFrom(const EndOfHandHideCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndOfHandHideCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      moneywon_ = from.moneywon_;
    }
    if (cached_has_bits & 0x00000004u) {
      playermoney_ = from.playermoney_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EndOfHandHideCardsMessage::CopyFrom(const EndOfHandHideCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfHandHideCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandHideCardsMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EndOfHandHideCardsMessage::InternalSwap(EndOfHandHideCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndOfHandHideCardsMessage, playermoney_)
      + sizeof(EndOfHandHideCardsMessage::playermoney_)
      - PROTOBUF_FIELD_OFFSET(EndOfHandHideCardsMessage, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string EndOfHandHideCardsMessage::GetTypeName() const {
  return "EndOfHandHideCardsMessage";
}


// ===================================================================

void ShowMyCardsRequestMessage::InitAsDefaultInstance() {
}
class ShowMyCardsRequestMessage::_Internal {
 public:
};

ShowMyCardsRequestMessage::ShowMyCardsRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ShowMyCardsRequestMessage)
}
ShowMyCardsRequestMessage::ShowMyCardsRequestMessage(const ShowMyCardsRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ShowMyCardsRequestMessage)
}

void ShowMyCardsRequestMessage::SharedCtor() {
}

ShowMyCardsRequestMessage::~ShowMyCardsRequestMessage() {
  // @@protoc_insertion_point(destructor:ShowMyCardsRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowMyCardsRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShowMyCardsRequestMessage::ArenaDtor(void* object) {
  ShowMyCardsRequestMessage* _this = reinterpret_cast< ShowMyCardsRequestMessage* >(object);
  (void)_this;
}
void ShowMyCardsRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowMyCardsRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowMyCardsRequestMessage& ShowMyCardsRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowMyCardsRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ShowMyCardsRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ShowMyCardsRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ShowMyCardsRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowMyCardsRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShowMyCardsRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShowMyCardsRequestMessage)
  return target;
}

size_t ShowMyCardsRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShowMyCardsRequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowMyCardsRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowMyCardsRequestMessage*>(
      &from));
}

void ShowMyCardsRequestMessage::MergeFrom(const ShowMyCardsRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShowMyCardsRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ShowMyCardsRequestMessage::CopyFrom(const ShowMyCardsRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShowMyCardsRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowMyCardsRequestMessage::IsInitialized() const {
  return true;
}

void ShowMyCardsRequestMessage::InternalSwap(ShowMyCardsRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ShowMyCardsRequestMessage::GetTypeName() const {
  return "ShowMyCardsRequestMessage";
}


// ===================================================================

void AfterHandShowCardsMessage::InitAsDefaultInstance() {
  ::_AfterHandShowCardsMessage_default_instance_._instance.get_mutable()->playerresult_ = const_cast< ::PlayerResult*>(
      ::PlayerResult::internal_default_instance());
}
class AfterHandShowCardsMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AfterHandShowCardsMessage>()._has_bits_);
  static const ::PlayerResult& playerresult(const AfterHandShowCardsMessage* msg);
  static void set_has_playerresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::PlayerResult&
AfterHandShowCardsMessage::_Internal::playerresult(const AfterHandShowCardsMessage* msg) {
  return *msg->playerresult_;
}
AfterHandShowCardsMessage::AfterHandShowCardsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AfterHandShowCardsMessage)
}
AfterHandShowCardsMessage::AfterHandShowCardsMessage(const AfterHandShowCardsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_playerresult()) {
    playerresult_ = new ::PlayerResult(*from.playerresult_);
  } else {
    playerresult_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AfterHandShowCardsMessage)
}

void AfterHandShowCardsMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AfterHandShowCardsMessage_pokerth_2eproto.base);
  playerresult_ = nullptr;
}

AfterHandShowCardsMessage::~AfterHandShowCardsMessage() {
  // @@protoc_insertion_point(destructor:AfterHandShowCardsMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AfterHandShowCardsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete playerresult_;
}

void AfterHandShowCardsMessage::ArenaDtor(void* object) {
  AfterHandShowCardsMessage* _this = reinterpret_cast< AfterHandShowCardsMessage* >(object);
  (void)_this;
}
void AfterHandShowCardsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AfterHandShowCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AfterHandShowCardsMessage& AfterHandShowCardsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AfterHandShowCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AfterHandShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AfterHandShowCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(playerresult_ != nullptr);
    playerresult_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AfterHandShowCardsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .PlayerResult playerResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerresult(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfterHandShowCardsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AfterHandShowCardsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PlayerResult playerResult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerresult(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AfterHandShowCardsMessage)
  return target;
}

size_t AfterHandShowCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AfterHandShowCardsMessage)
  size_t total_size = 0;

  // required .PlayerResult playerResult = 1;
  if (_internal_has_playerresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerresult_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfterHandShowCardsMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AfterHandShowCardsMessage*>(
      &from));
}

void AfterHandShowCardsMessage::MergeFrom(const AfterHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AfterHandShowCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerresult()) {
    _internal_mutable_playerresult()->::PlayerResult::MergeFrom(from._internal_playerresult());
  }
}

void AfterHandShowCardsMessage::CopyFrom(const AfterHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AfterHandShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfterHandShowCardsMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_playerresult()) {
    if (!playerresult_->IsInitialized()) return false;
  }
  return true;
}

void AfterHandShowCardsMessage::InternalSwap(AfterHandShowCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerresult_, other->playerresult_);
}

std::string AfterHandShowCardsMessage::GetTypeName() const {
  return "AfterHandShowCardsMessage";
}


// ===================================================================

void EndOfGameMessage::InitAsDefaultInstance() {
}
class EndOfGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<EndOfGameMessage>()._has_bits_);
  static void set_has_winnerplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EndOfGameMessage::EndOfGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EndOfGameMessage)
}
EndOfGameMessage::EndOfGameMessage(const EndOfGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  winnerplayerid_ = from.winnerplayerid_;
  // @@protoc_insertion_point(copy_constructor:EndOfGameMessage)
}

void EndOfGameMessage::SharedCtor() {
  winnerplayerid_ = 0u;
}

EndOfGameMessage::~EndOfGameMessage() {
  // @@protoc_insertion_point(destructor:EndOfGameMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EndOfGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EndOfGameMessage::ArenaDtor(void* object) {
  EndOfGameMessage* _this = reinterpret_cast< EndOfGameMessage* >(object);
  (void)_this;
}
void EndOfGameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndOfGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndOfGameMessage& EndOfGameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndOfGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void EndOfGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winnerplayerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EndOfGameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 winnerPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_winnerplayerid(&has_bits);
          winnerplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndOfGameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndOfGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 winnerPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_winnerplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndOfGameMessage)
  return target;
}

size_t EndOfGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfGameMessage)
  size_t total_size = 0;

  // required uint32 winnerPlayerId = 1;
  if (_internal_has_winnerplayerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_winnerplayerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndOfGameMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EndOfGameMessage*>(
      &from));
}

void EndOfGameMessage::MergeFrom(const EndOfGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndOfGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_winnerplayerid()) {
    _internal_set_winnerplayerid(from._internal_winnerplayerid());
  }
}

void EndOfGameMessage::CopyFrom(const EndOfGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EndOfGameMessage::InternalSwap(EndOfGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(winnerplayerid_, other->winnerplayerid_);
}

std::string EndOfGameMessage::GetTypeName() const {
  return "EndOfGameMessage";
}


// ===================================================================

void PlayerIdChangedMessage::InitAsDefaultInstance() {
}
class PlayerIdChangedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerIdChangedMessage>()._has_bits_);
  static void set_has_oldplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PlayerIdChangedMessage::PlayerIdChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerIdChangedMessage)
}
PlayerIdChangedMessage::PlayerIdChangedMessage(const PlayerIdChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&oldplayerid_, &from.oldplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newplayerid_) -
    reinterpret_cast<char*>(&oldplayerid_)) + sizeof(newplayerid_));
  // @@protoc_insertion_point(copy_constructor:PlayerIdChangedMessage)
}

void PlayerIdChangedMessage::SharedCtor() {
  ::memset(&oldplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newplayerid_) -
      reinterpret_cast<char*>(&oldplayerid_)) + sizeof(newplayerid_));
}

PlayerIdChangedMessage::~PlayerIdChangedMessage() {
  // @@protoc_insertion_point(destructor:PlayerIdChangedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PlayerIdChangedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerIdChangedMessage::ArenaDtor(void* object) {
  PlayerIdChangedMessage* _this = reinterpret_cast< PlayerIdChangedMessage* >(object);
  (void)_this;
}
void PlayerIdChangedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerIdChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerIdChangedMessage& PlayerIdChangedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerIdChangedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerIdChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerIdChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&oldplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newplayerid_) -
        reinterpret_cast<char*>(&oldplayerid_)) + sizeof(newplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayerIdChangedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 oldPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_oldplayerid(&has_bits);
          oldplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 newPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_newplayerid(&has_bits);
          newplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerIdChangedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerIdChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 oldPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_oldplayerid(), target);
  }

  // required uint32 newPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_newplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerIdChangedMessage)
  return target;
}

size_t PlayerIdChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerIdChangedMessage)
  size_t total_size = 0;

  if (_internal_has_oldplayerid()) {
    // required uint32 oldPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oldplayerid());
  }

  if (_internal_has_newplayerid()) {
    // required uint32 newPlayerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newplayerid());
  }

  return total_size;
}
size_t PlayerIdChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerIdChangedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 oldPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oldplayerid());

    // required uint32 newPlayerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerIdChangedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerIdChangedMessage*>(
      &from));
}

void PlayerIdChangedMessage::MergeFrom(const PlayerIdChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerIdChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      oldplayerid_ = from.oldplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      newplayerid_ = from.newplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerIdChangedMessage::CopyFrom(const PlayerIdChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerIdChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerIdChangedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerIdChangedMessage::InternalSwap(PlayerIdChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerIdChangedMessage, newplayerid_)
      + sizeof(PlayerIdChangedMessage::newplayerid_)
      - PROTOBUF_FIELD_OFFSET(PlayerIdChangedMessage, oldplayerid_)>(
          reinterpret_cast<char*>(&oldplayerid_),
          reinterpret_cast<char*>(&other->oldplayerid_));
}

std::string PlayerIdChangedMessage::GetTypeName() const {
  return "PlayerIdChangedMessage";
}


// ===================================================================

void AskKickPlayerMessage::InitAsDefaultInstance() {
}
class AskKickPlayerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AskKickPlayerMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AskKickPlayerMessage::AskKickPlayerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AskKickPlayerMessage)
}
AskKickPlayerMessage::AskKickPlayerMessage(const AskKickPlayerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:AskKickPlayerMessage)
}

void AskKickPlayerMessage::SharedCtor() {
  playerid_ = 0u;
}

AskKickPlayerMessage::~AskKickPlayerMessage() {
  // @@protoc_insertion_point(destructor:AskKickPlayerMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AskKickPlayerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AskKickPlayerMessage::ArenaDtor(void* object) {
  AskKickPlayerMessage* _this = reinterpret_cast< AskKickPlayerMessage* >(object);
  (void)_this;
}
void AskKickPlayerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AskKickPlayerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskKickPlayerMessage& AskKickPlayerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AskKickPlayerMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AskKickPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AskKickPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AskKickPlayerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AskKickPlayerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AskKickPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AskKickPlayerMessage)
  return target;
}

size_t AskKickPlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AskKickPlayerMessage)
  size_t total_size = 0;

  // required uint32 playerId = 1;
  if (_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskKickPlayerMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AskKickPlayerMessage*>(
      &from));
}

void AskKickPlayerMessage::MergeFrom(const AskKickPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AskKickPlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerid()) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void AskKickPlayerMessage::CopyFrom(const AskKickPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AskKickPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickPlayerMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AskKickPlayerMessage::InternalSwap(AskKickPlayerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
}

std::string AskKickPlayerMessage::GetTypeName() const {
  return "AskKickPlayerMessage";
}


// ===================================================================

void AskKickDeniedMessage::InitAsDefaultInstance() {
}
class AskKickDeniedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AskKickDeniedMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kickdeniedreason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AskKickDeniedMessage::AskKickDeniedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AskKickDeniedMessage)
}
AskKickDeniedMessage::AskKickDeniedMessage(const AskKickDeniedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&kickdeniedreason_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(kickdeniedreason_));
  // @@protoc_insertion_point(copy_constructor:AskKickDeniedMessage)
}

void AskKickDeniedMessage::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kickdeniedreason_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(kickdeniedreason_));
}

AskKickDeniedMessage::~AskKickDeniedMessage() {
  // @@protoc_insertion_point(destructor:AskKickDeniedMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AskKickDeniedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AskKickDeniedMessage::ArenaDtor(void* object) {
  AskKickDeniedMessage* _this = reinterpret_cast< AskKickDeniedMessage* >(object);
  (void)_this;
}
void AskKickDeniedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AskKickDeniedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskKickDeniedMessage& AskKickDeniedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AskKickDeniedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AskKickDeniedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AskKickDeniedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kickdeniedreason_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(kickdeniedreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AskKickDeniedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AskKickDeniedMessage_KickDeniedReason_IsValid(val))) {
            _internal_set_kickdeniedreason(static_cast<::AskKickDeniedMessage_KickDeniedReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AskKickDeniedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AskKickDeniedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kickdeniedreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AskKickDeniedMessage)
  return target;
}

size_t AskKickDeniedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AskKickDeniedMessage)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (_internal_has_kickdeniedreason()) {
    // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kickdeniedreason());
  }

  return total_size;
}
size_t AskKickDeniedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AskKickDeniedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());

    // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kickdeniedreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskKickDeniedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AskKickDeniedMessage*>(
      &from));
}

void AskKickDeniedMessage::MergeFrom(const AskKickDeniedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AskKickDeniedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      kickdeniedreason_ = from.kickdeniedreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AskKickDeniedMessage::CopyFrom(const AskKickDeniedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AskKickDeniedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickDeniedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AskKickDeniedMessage::InternalSwap(AskKickDeniedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AskKickDeniedMessage, kickdeniedreason_)
      + sizeof(AskKickDeniedMessage::kickdeniedreason_)
      - PROTOBUF_FIELD_OFFSET(AskKickDeniedMessage, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string AskKickDeniedMessage::GetTypeName() const {
  return "AskKickDeniedMessage";
}


// ===================================================================

void StartKickPetitionMessage::InitAsDefaultInstance() {
}
class StartKickPetitionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StartKickPetitionMessage>()._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proposingplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kickplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kicktimeoutsec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_numvotesneededtokick(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

StartKickPetitionMessage::StartKickPetitionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StartKickPetitionMessage)
}
StartKickPetitionMessage::StartKickPetitionMessage(const StartKickPetitionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&petitionid_, &from.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numvotesneededtokick_) -
    reinterpret_cast<char*>(&petitionid_)) + sizeof(numvotesneededtokick_));
  // @@protoc_insertion_point(copy_constructor:StartKickPetitionMessage)
}

void StartKickPetitionMessage::SharedCtor() {
  ::memset(&petitionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numvotesneededtokick_) -
      reinterpret_cast<char*>(&petitionid_)) + sizeof(numvotesneededtokick_));
}

StartKickPetitionMessage::~StartKickPetitionMessage() {
  // @@protoc_insertion_point(destructor:StartKickPetitionMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartKickPetitionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartKickPetitionMessage::ArenaDtor(void* object) {
  StartKickPetitionMessage* _this = reinterpret_cast< StartKickPetitionMessage* >(object);
  (void)_this;
}
void StartKickPetitionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartKickPetitionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartKickPetitionMessage& StartKickPetitionMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartKickPetitionMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StartKickPetitionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartKickPetitionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numvotesneededtokick_) -
        reinterpret_cast<char*>(&petitionid_)) + sizeof(numvotesneededtokick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartKickPetitionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 proposingPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_proposingplayerid(&has_bits);
          proposingplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 kickPlayerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_kickplayerid(&has_bits);
          kickplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 kickTimeoutSec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_kicktimeoutsec(&has_bits);
          kicktimeoutsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 numVotesNeededToKick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_numvotesneededtokick(&has_bits);
          numvotesneededtokick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartKickPetitionMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartKickPetitionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required uint32 proposingPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_proposingplayerid(), target);
  }

  // required uint32 kickPlayerId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kickplayerid(), target);
  }

  // required uint32 kickTimeoutSec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kicktimeoutsec(), target);
  }

  // required uint32 numVotesNeededToKick = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_numvotesneededtokick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartKickPetitionMessage)
  return target;
}

size_t StartKickPetitionMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StartKickPetitionMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());
  }

  if (_internal_has_proposingplayerid()) {
    // required uint32 proposingPlayerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proposingplayerid());
  }

  if (_internal_has_kickplayerid()) {
    // required uint32 kickPlayerId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kickplayerid());
  }

  if (_internal_has_kicktimeoutsec()) {
    // required uint32 kickTimeoutSec = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kicktimeoutsec());
  }

  if (_internal_has_numvotesneededtokick()) {
    // required uint32 numVotesNeededToKick = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesneededtokick());
  }

  return total_size;
}
size_t StartKickPetitionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartKickPetitionMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());

    // required uint32 proposingPlayerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proposingplayerid());

    // required uint32 kickPlayerId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kickplayerid());

    // required uint32 kickTimeoutSec = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kicktimeoutsec());

    // required uint32 numVotesNeededToKick = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesneededtokick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartKickPetitionMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartKickPetitionMessage*>(
      &from));
}

void StartKickPetitionMessage::MergeFrom(const StartKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartKickPetitionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      proposingplayerid_ = from.proposingplayerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      kickplayerid_ = from.kickplayerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      kicktimeoutsec_ = from.kicktimeoutsec_;
    }
    if (cached_has_bits & 0x00000010u) {
      numvotesneededtokick_ = from.numvotesneededtokick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartKickPetitionMessage::CopyFrom(const StartKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartKickPetitionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartKickPetitionMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StartKickPetitionMessage::InternalSwap(StartKickPetitionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartKickPetitionMessage, numvotesneededtokick_)
      + sizeof(StartKickPetitionMessage::numvotesneededtokick_)
      - PROTOBUF_FIELD_OFFSET(StartKickPetitionMessage, petitionid_)>(
          reinterpret_cast<char*>(&petitionid_),
          reinterpret_cast<char*>(&other->petitionid_));
}

std::string StartKickPetitionMessage::GetTypeName() const {
  return "StartKickPetitionMessage";
}


// ===================================================================

void VoteKickRequestMessage::InitAsDefaultInstance() {
}
class VoteKickRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<VoteKickRequestMessage>()._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_votekick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VoteKickRequestMessage::VoteKickRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VoteKickRequestMessage)
}
VoteKickRequestMessage::VoteKickRequestMessage(const VoteKickRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&petitionid_, &from.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&votekick_) -
    reinterpret_cast<char*>(&petitionid_)) + sizeof(votekick_));
  // @@protoc_insertion_point(copy_constructor:VoteKickRequestMessage)
}

void VoteKickRequestMessage::SharedCtor() {
  ::memset(&petitionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votekick_) -
      reinterpret_cast<char*>(&petitionid_)) + sizeof(votekick_));
}

VoteKickRequestMessage::~VoteKickRequestMessage() {
  // @@protoc_insertion_point(destructor:VoteKickRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void VoteKickRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VoteKickRequestMessage::ArenaDtor(void* object) {
  VoteKickRequestMessage* _this = reinterpret_cast< VoteKickRequestMessage* >(object);
  (void)_this;
}
void VoteKickRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteKickRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteKickRequestMessage& VoteKickRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteKickRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void VoteKickRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VoteKickRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&votekick_) -
        reinterpret_cast<char*>(&petitionid_)) + sizeof(votekick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VoteKickRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool voteKick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_votekick(&has_bits);
          votekick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteKickRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoteKickRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required bool voteKick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_votekick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoteKickRequestMessage)
  return target;
}

size_t VoteKickRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VoteKickRequestMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());
  }

  if (_internal_has_votekick()) {
    // required bool voteKick = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t VoteKickRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoteKickRequestMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());

    // required bool voteKick = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteKickRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VoteKickRequestMessage*>(
      &from));
}

void VoteKickRequestMessage::MergeFrom(const VoteKickRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoteKickRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      votekick_ = from.votekick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoteKickRequestMessage::CopyFrom(const VoteKickRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoteKickRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VoteKickRequestMessage::InternalSwap(VoteKickRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteKickRequestMessage, votekick_)
      + sizeof(VoteKickRequestMessage::votekick_)
      - PROTOBUF_FIELD_OFFSET(VoteKickRequestMessage, petitionid_)>(
          reinterpret_cast<char*>(&petitionid_),
          reinterpret_cast<char*>(&other->petitionid_));
}

std::string VoteKickRequestMessage::GetTypeName() const {
  return "VoteKickRequestMessage";
}


// ===================================================================

void VoteKickReplyMessage::InitAsDefaultInstance() {
}
class VoteKickReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<VoteKickReplyMessage>()._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_votekickreplytype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VoteKickReplyMessage::VoteKickReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VoteKickReplyMessage)
}
VoteKickReplyMessage::VoteKickReplyMessage(const VoteKickReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&petitionid_, &from.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&votekickreplytype_) -
    reinterpret_cast<char*>(&petitionid_)) + sizeof(votekickreplytype_));
  // @@protoc_insertion_point(copy_constructor:VoteKickReplyMessage)
}

void VoteKickReplyMessage::SharedCtor() {
  ::memset(&petitionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votekickreplytype_) -
      reinterpret_cast<char*>(&petitionid_)) + sizeof(votekickreplytype_));
}

VoteKickReplyMessage::~VoteKickReplyMessage() {
  // @@protoc_insertion_point(destructor:VoteKickReplyMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void VoteKickReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VoteKickReplyMessage::ArenaDtor(void* object) {
  VoteKickReplyMessage* _this = reinterpret_cast< VoteKickReplyMessage* >(object);
  (void)_this;
}
void VoteKickReplyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteKickReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteKickReplyMessage& VoteKickReplyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteKickReplyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void VoteKickReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VoteKickReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&votekickreplytype_) -
        reinterpret_cast<char*>(&petitionid_)) + sizeof(votekickreplytype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VoteKickReplyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::VoteKickReplyMessage_VoteKickReplyType_IsValid(val))) {
            _internal_set_votekickreplytype(static_cast<::VoteKickReplyMessage_VoteKickReplyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteKickReplyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoteKickReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_votekickreplytype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoteKickReplyMessage)
  return target;
}

size_t VoteKickReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VoteKickReplyMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());
  }

  if (_internal_has_votekickreplytype()) {
    // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_votekickreplytype());
  }

  return total_size;
}
size_t VoteKickReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoteKickReplyMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());

    // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_votekickreplytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteKickReplyMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VoteKickReplyMessage*>(
      &from));
}

void VoteKickReplyMessage::MergeFrom(const VoteKickReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoteKickReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      votekickreplytype_ = from.votekickreplytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoteKickReplyMessage::CopyFrom(const VoteKickReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoteKickReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VoteKickReplyMessage::InternalSwap(VoteKickReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteKickReplyMessage, votekickreplytype_)
      + sizeof(VoteKickReplyMessage::votekickreplytype_)
      - PROTOBUF_FIELD_OFFSET(VoteKickReplyMessage, petitionid_)>(
          reinterpret_cast<char*>(&petitionid_),
          reinterpret_cast<char*>(&other->petitionid_));
}

std::string VoteKickReplyMessage::GetTypeName() const {
  return "VoteKickReplyMessage";
}


// ===================================================================

void KickPetitionUpdateMessage::InitAsDefaultInstance() {
}
class KickPetitionUpdateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<KickPetitionUpdateMessage>()._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numvotesagainstkicking(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numvotesinfavourofkicking(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_numvotesneededtokick(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

KickPetitionUpdateMessage::KickPetitionUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KickPetitionUpdateMessage)
}
KickPetitionUpdateMessage::KickPetitionUpdateMessage(const KickPetitionUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&petitionid_, &from.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numvotesneededtokick_) -
    reinterpret_cast<char*>(&petitionid_)) + sizeof(numvotesneededtokick_));
  // @@protoc_insertion_point(copy_constructor:KickPetitionUpdateMessage)
}

void KickPetitionUpdateMessage::SharedCtor() {
  ::memset(&petitionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numvotesneededtokick_) -
      reinterpret_cast<char*>(&petitionid_)) + sizeof(numvotesneededtokick_));
}

KickPetitionUpdateMessage::~KickPetitionUpdateMessage() {
  // @@protoc_insertion_point(destructor:KickPetitionUpdateMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KickPetitionUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KickPetitionUpdateMessage::ArenaDtor(void* object) {
  KickPetitionUpdateMessage* _this = reinterpret_cast< KickPetitionUpdateMessage* >(object);
  (void)_this;
}
void KickPetitionUpdateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickPetitionUpdateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickPetitionUpdateMessage& KickPetitionUpdateMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickPetitionUpdateMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void KickPetitionUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPetitionUpdateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numvotesneededtokick_) -
        reinterpret_cast<char*>(&petitionid_)) + sizeof(numvotesneededtokick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KickPetitionUpdateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 numVotesAgainstKicking = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_numvotesagainstkicking(&has_bits);
          numvotesagainstkicking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 numVotesInFavourOfKicking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_numvotesinfavourofkicking(&has_bits);
          numvotesinfavourofkicking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 numVotesNeededToKick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_numvotesneededtokick(&has_bits);
          numvotesneededtokick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickPetitionUpdateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KickPetitionUpdateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required uint32 numVotesAgainstKicking = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numvotesagainstkicking(), target);
  }

  // required uint32 numVotesInFavourOfKicking = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numvotesinfavourofkicking(), target);
  }

  // required uint32 numVotesNeededToKick = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_numvotesneededtokick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KickPetitionUpdateMessage)
  return target;
}

size_t KickPetitionUpdateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KickPetitionUpdateMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());
  }

  if (_internal_has_numvotesagainstkicking()) {
    // required uint32 numVotesAgainstKicking = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesagainstkicking());
  }

  if (_internal_has_numvotesinfavourofkicking()) {
    // required uint32 numVotesInFavourOfKicking = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesinfavourofkicking());
  }

  if (_internal_has_numvotesneededtokick()) {
    // required uint32 numVotesNeededToKick = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesneededtokick());
  }

  return total_size;
}
size_t KickPetitionUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickPetitionUpdateMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());

    // required uint32 numVotesAgainstKicking = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesagainstkicking());

    // required uint32 numVotesInFavourOfKicking = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesinfavourofkicking());

    // required uint32 numVotesNeededToKick = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesneededtokick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickPetitionUpdateMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KickPetitionUpdateMessage*>(
      &from));
}

void KickPetitionUpdateMessage::MergeFrom(const KickPetitionUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickPetitionUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      numvotesagainstkicking_ = from.numvotesagainstkicking_;
    }
    if (cached_has_bits & 0x00000004u) {
      numvotesinfavourofkicking_ = from.numvotesinfavourofkicking_;
    }
    if (cached_has_bits & 0x00000008u) {
      numvotesneededtokick_ = from.numvotesneededtokick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KickPetitionUpdateMessage::CopyFrom(const KickPetitionUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPetitionUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPetitionUpdateMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void KickPetitionUpdateMessage::InternalSwap(KickPetitionUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KickPetitionUpdateMessage, numvotesneededtokick_)
      + sizeof(KickPetitionUpdateMessage::numvotesneededtokick_)
      - PROTOBUF_FIELD_OFFSET(KickPetitionUpdateMessage, petitionid_)>(
          reinterpret_cast<char*>(&petitionid_),
          reinterpret_cast<char*>(&other->petitionid_));
}

std::string KickPetitionUpdateMessage::GetTypeName() const {
  return "KickPetitionUpdateMessage";
}


// ===================================================================

void EndKickPetitionMessage::InitAsDefaultInstance() {
}
class EndKickPetitionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<EndKickPetitionMessage>()._has_bits_);
  static void set_has_petitionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numvotesagainstkicking(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numvotesinfavourofkicking(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_resultplayerkicked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_petitionendreason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

EndKickPetitionMessage::EndKickPetitionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EndKickPetitionMessage)
}
EndKickPetitionMessage::EndKickPetitionMessage(const EndKickPetitionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&petitionid_, &from.petitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&petitionendreason_) -
    reinterpret_cast<char*>(&petitionid_)) + sizeof(petitionendreason_));
  // @@protoc_insertion_point(copy_constructor:EndKickPetitionMessage)
}

void EndKickPetitionMessage::SharedCtor() {
  ::memset(&petitionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&petitionendreason_) -
      reinterpret_cast<char*>(&petitionid_)) + sizeof(petitionendreason_));
}

EndKickPetitionMessage::~EndKickPetitionMessage() {
  // @@protoc_insertion_point(destructor:EndKickPetitionMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EndKickPetitionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EndKickPetitionMessage::ArenaDtor(void* object) {
  EndKickPetitionMessage* _this = reinterpret_cast< EndKickPetitionMessage* >(object);
  (void)_this;
}
void EndKickPetitionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndKickPetitionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndKickPetitionMessage& EndKickPetitionMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndKickPetitionMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void EndKickPetitionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndKickPetitionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&petitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&petitionendreason_) -
        reinterpret_cast<char*>(&petitionid_)) + sizeof(petitionendreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EndKickPetitionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 petitionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_petitionid(&has_bits);
          petitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 numVotesAgainstKicking = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_numvotesagainstkicking(&has_bits);
          numvotesagainstkicking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 numVotesInFavourOfKicking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_numvotesinfavourofkicking(&has_bits);
          numvotesinfavourofkicking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 resultPlayerKicked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_resultplayerkicked(&has_bits);
          resultplayerkicked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EndKickPetitionMessage_PetitionEndReason_IsValid(val))) {
            _internal_set_petitionendreason(static_cast<::EndKickPetitionMessage_PetitionEndReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndKickPetitionMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndKickPetitionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 petitionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_petitionid(), target);
  }

  // required uint32 numVotesAgainstKicking = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numvotesagainstkicking(), target);
  }

  // required uint32 numVotesInFavourOfKicking = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numvotesinfavourofkicking(), target);
  }

  // required uint32 resultPlayerKicked = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_resultplayerkicked(), target);
  }

  // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_petitionendreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndKickPetitionMessage)
  return target;
}

size_t EndKickPetitionMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndKickPetitionMessage)
  size_t total_size = 0;

  if (_internal_has_petitionid()) {
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());
  }

  if (_internal_has_numvotesagainstkicking()) {
    // required uint32 numVotesAgainstKicking = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesagainstkicking());
  }

  if (_internal_has_numvotesinfavourofkicking()) {
    // required uint32 numVotesInFavourOfKicking = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesinfavourofkicking());
  }

  if (_internal_has_resultplayerkicked()) {
    // required uint32 resultPlayerKicked = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resultplayerkicked());
  }

  if (_internal_has_petitionendreason()) {
    // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_petitionendreason());
  }

  return total_size;
}
size_t EndKickPetitionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndKickPetitionMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 petitionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_petitionid());

    // required uint32 numVotesAgainstKicking = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesagainstkicking());

    // required uint32 numVotesInFavourOfKicking = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvotesinfavourofkicking());

    // required uint32 resultPlayerKicked = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resultplayerkicked());

    // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_petitionendreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndKickPetitionMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EndKickPetitionMessage*>(
      &from));
}

void EndKickPetitionMessage::MergeFrom(const EndKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndKickPetitionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      numvotesagainstkicking_ = from.numvotesagainstkicking_;
    }
    if (cached_has_bits & 0x00000004u) {
      numvotesinfavourofkicking_ = from.numvotesinfavourofkicking_;
    }
    if (cached_has_bits & 0x00000008u) {
      resultplayerkicked_ = from.resultplayerkicked_;
    }
    if (cached_has_bits & 0x00000010u) {
      petitionendreason_ = from.petitionendreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EndKickPetitionMessage::CopyFrom(const EndKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndKickPetitionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndKickPetitionMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EndKickPetitionMessage::InternalSwap(EndKickPetitionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndKickPetitionMessage, petitionendreason_)
      + sizeof(EndKickPetitionMessage::petitionendreason_)
      - PROTOBUF_FIELD_OFFSET(EndKickPetitionMessage, petitionid_)>(
          reinterpret_cast<char*>(&petitionid_),
          reinterpret_cast<char*>(&other->petitionid_));
}

std::string EndKickPetitionMessage::GetTypeName() const {
  return "EndKickPetitionMessage";
}


// ===================================================================

void StatisticsMessage_StatisticsData::InitAsDefaultInstance() {
}
class StatisticsMessage_StatisticsData::_Internal {
 public:
  using HasBits = decltype(std::declval<StatisticsMessage_StatisticsData>()._has_bits_);
  static void set_has_statisticstype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_statisticsvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StatisticsMessage.StatisticsData)
}
StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData(const StatisticsMessage_StatisticsData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&statisticsvalue_, &from.statisticsvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&statisticstype_) -
    reinterpret_cast<char*>(&statisticsvalue_)) + sizeof(statisticstype_));
  // @@protoc_insertion_point(copy_constructor:StatisticsMessage.StatisticsData)
}

void StatisticsMessage_StatisticsData::SharedCtor() {
  statisticsvalue_ = 0u;
  statisticstype_ = 1;
}

StatisticsMessage_StatisticsData::~StatisticsMessage_StatisticsData() {
  // @@protoc_insertion_point(destructor:StatisticsMessage.StatisticsData)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StatisticsMessage_StatisticsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatisticsMessage_StatisticsData::ArenaDtor(void* object) {
  StatisticsMessage_StatisticsData* _this = reinterpret_cast< StatisticsMessage_StatisticsData* >(object);
  (void)_this;
}
void StatisticsMessage_StatisticsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatisticsMessage_StatisticsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatisticsMessage_StatisticsData& StatisticsMessage_StatisticsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatisticsMessage_StatisticsData_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StatisticsMessage_StatisticsData::Clear() {
// @@protoc_insertion_point(message_clear_start:StatisticsMessage.StatisticsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    statisticsvalue_ = 0u;
    statisticstype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StatisticsMessage_StatisticsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::StatisticsMessage_StatisticsData_StatisticsType_IsValid(val))) {
            _internal_set_statisticstype(static_cast<::StatisticsMessage_StatisticsData_StatisticsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 statisticsValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_statisticsvalue(&has_bits);
          statisticsvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatisticsMessage_StatisticsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatisticsMessage.StatisticsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_statisticstype(), target);
  }

  // required uint32 statisticsValue = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_statisticsvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatisticsMessage.StatisticsData)
  return target;
}

size_t StatisticsMessage_StatisticsData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StatisticsMessage.StatisticsData)
  size_t total_size = 0;

  if (_internal_has_statisticsvalue()) {
    // required uint32 statisticsValue = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statisticsvalue());
  }

  if (_internal_has_statisticstype()) {
    // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statisticstype());
  }

  return total_size;
}
size_t StatisticsMessage_StatisticsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatisticsMessage.StatisticsData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 statisticsValue = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statisticsvalue());

    // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statisticstype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticsMessage_StatisticsData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StatisticsMessage_StatisticsData*>(
      &from));
}

void StatisticsMessage_StatisticsData::MergeFrom(const StatisticsMessage_StatisticsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatisticsMessage.StatisticsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      statisticsvalue_ = from.statisticsvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      statisticstype_ = from.statisticstype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatisticsMessage_StatisticsData::CopyFrom(const StatisticsMessage_StatisticsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatisticsMessage.StatisticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage_StatisticsData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StatisticsMessage_StatisticsData::InternalSwap(StatisticsMessage_StatisticsData* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(statisticsvalue_, other->statisticsvalue_);
  swap(statisticstype_, other->statisticstype_);
}

std::string StatisticsMessage_StatisticsData::GetTypeName() const {
  return "StatisticsMessage.StatisticsData";
}


// ===================================================================

void StatisticsMessage::InitAsDefaultInstance() {
}
class StatisticsMessage::_Internal {
 public:
};

StatisticsMessage::StatisticsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  statisticsdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StatisticsMessage)
}
StatisticsMessage::StatisticsMessage(const StatisticsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      statisticsdata_(from.statisticsdata_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StatisticsMessage)
}

void StatisticsMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatisticsMessage_pokerth_2eproto.base);
}

StatisticsMessage::~StatisticsMessage() {
  // @@protoc_insertion_point(destructor:StatisticsMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StatisticsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatisticsMessage::ArenaDtor(void* object) {
  StatisticsMessage* _this = reinterpret_cast< StatisticsMessage* >(object);
  (void)_this;
}
void StatisticsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatisticsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatisticsMessage& StatisticsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatisticsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StatisticsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StatisticsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statisticsdata_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StatisticsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statisticsdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatisticsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatisticsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statisticsdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_statisticsdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatisticsMessage)
  return target;
}

size_t StatisticsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatisticsMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  total_size += 1UL * this->_internal_statisticsdata_size();
  for (const auto& msg : this->statisticsdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticsMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StatisticsMessage*>(
      &from));
}

void StatisticsMessage::MergeFrom(const StatisticsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatisticsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statisticsdata_.MergeFrom(from.statisticsdata_);
}

void StatisticsMessage::CopyFrom(const StatisticsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatisticsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(statisticsdata_)) return false;
  return true;
}

void StatisticsMessage::InternalSwap(StatisticsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  statisticsdata_.InternalSwap(&other->statisticsdata_);
}

std::string StatisticsMessage::GetTypeName() const {
  return "StatisticsMessage";
}


// ===================================================================

void ChatRequestMessage::InitAsDefaultInstance() {
}
class ChatRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatRequestMessage>()._has_bits_);
  static void set_has_targetplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chattext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ChatRequestMessage::ChatRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatRequestMessage)
}
ChatRequestMessage::ChatRequestMessage(const ChatRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  chattext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chattext()) {
    chattext_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chattext(),
      GetArena());
  }
  targetplayerid_ = from.targetplayerid_;
  // @@protoc_insertion_point(copy_constructor:ChatRequestMessage)
}

void ChatRequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatRequestMessage_pokerth_2eproto.base);
  chattext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetplayerid_ = 0u;
}

ChatRequestMessage::~ChatRequestMessage() {
  // @@protoc_insertion_point(destructor:ChatRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChatRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chattext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatRequestMessage::ArenaDtor(void* object) {
  ChatRequestMessage* _this = reinterpret_cast< ChatRequestMessage* >(object);
  (void)_this;
}
void ChatRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRequestMessage& ChatRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ChatRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chattext_.ClearNonDefaultToEmpty();
  }
  targetplayerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChatRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 targetPlayerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_targetplayerid(&has_bits);
          targetplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string chatText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chattext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 targetPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_targetplayerid(), target);
  }

  // required string chatText = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chattext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRequestMessage)
  return target;
}

size_t ChatRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRequestMessage)
  size_t total_size = 0;

  // required string chatText = 3;
  if (_internal_has_chattext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chattext());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 targetPlayerId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_targetplayerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChatRequestMessage*>(
      &from));
}

void ChatRequestMessage::MergeFrom(const ChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chattext(from._internal_chattext());
    }
    if (cached_has_bits & 0x00000002u) {
      targetplayerid_ = from.targetplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRequestMessage::CopyFrom(const ChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChatRequestMessage::InternalSwap(ChatRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chattext_.Swap(&other->chattext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(targetplayerid_, other->targetplayerid_);
}

std::string ChatRequestMessage::GetTypeName() const {
  return "ChatRequestMessage";
}


// ===================================================================

void ChatMessage::InitAsDefaultInstance() {
}
class ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatMessage>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chattype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chattext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  chattext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chattext()) {
    chattext_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chattext(),
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chattype_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(chattype_));
  // @@protoc_insertion_point(copy_constructor:ChatMessage)
}

void ChatMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatMessage_pokerth_2eproto.base);
  chattext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chattype_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(chattype_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:ChatMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chattext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatMessage::ArenaDtor(void* object) {
  ChatMessage* _this = reinterpret_cast< ChatMessage* >(object);
  (void)_this;
}
void ChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMessage& ChatMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chattext_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chattype_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(chattype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ChatMessage.ChatType chatType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ChatMessage_ChatType_IsValid(val))) {
            _internal_set_chattype(static_cast<::ChatMessage_ChatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string chatText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chattext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required .ChatMessage.ChatType chatType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_chattype(), target);
  }

  // required string chatText = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chattext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessage)
  return target;
}

size_t ChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChatMessage)
  size_t total_size = 0;

  if (_internal_has_chattext()) {
    // required string chatText = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chattext());
  }

  if (_internal_has_chattype()) {
    // required .ChatMessage.ChatType chatType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chattype());
  }

  return total_size;
}
size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string chatText = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chattext());

    // required .ChatMessage.ChatType chatType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chattype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 playerId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChatMessage*>(
      &from));
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chattext(from._internal_chattext());
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chattype_ = from.chattype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chattext_.Swap(&other->chattext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, chattype_)
      + sizeof(ChatMessage::chattype_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

std::string ChatMessage::GetTypeName() const {
  return "ChatMessage";
}


// ===================================================================

void ChatRejectMessage::InitAsDefaultInstance() {
}
class ChatRejectMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatRejectMessage>()._has_bits_);
  static void set_has_chattext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ChatRejectMessage::ChatRejectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatRejectMessage)
}
ChatRejectMessage::ChatRejectMessage(const ChatRejectMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  chattext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chattext()) {
    chattext_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chattext(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ChatRejectMessage)
}

void ChatRejectMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatRejectMessage_pokerth_2eproto.base);
  chattext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatRejectMessage::~ChatRejectMessage() {
  // @@protoc_insertion_point(destructor:ChatRejectMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChatRejectMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chattext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatRejectMessage::ArenaDtor(void* object) {
  ChatRejectMessage* _this = reinterpret_cast< ChatRejectMessage* >(object);
  (void)_this;
}
void ChatRejectMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatRejectMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRejectMessage& ChatRejectMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatRejectMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ChatRejectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRejectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chattext_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChatRejectMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string chatText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chattext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatRejectMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRejectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string chatText = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chattext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRejectMessage)
  return target;
}

size_t ChatRejectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRejectMessage)
  size_t total_size = 0;

  // required string chatText = 1;
  if (_internal_has_chattext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chattext());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRejectMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChatRejectMessage*>(
      &from));
}

void ChatRejectMessage::MergeFrom(const ChatRejectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatRejectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chattext()) {
    _internal_set_chattext(from._internal_chattext());
  }
}

void ChatRejectMessage::CopyFrom(const ChatRejectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRejectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRejectMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChatRejectMessage::InternalSwap(ChatRejectMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chattext_.Swap(&other->chattext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string ChatRejectMessage::GetTypeName() const {
  return "ChatRejectMessage";
}


// ===================================================================

void DialogMessage::InitAsDefaultInstance() {
}
class DialogMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DialogMessage>()._has_bits_);
  static void set_has_notificationtext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DialogMessage::DialogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DialogMessage)
}
DialogMessage::DialogMessage(const DialogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  notificationtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notificationtext()) {
    notificationtext_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notificationtext(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DialogMessage)
}

void DialogMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DialogMessage_pokerth_2eproto.base);
  notificationtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DialogMessage::~DialogMessage() {
  // @@protoc_insertion_point(destructor:DialogMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DialogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  notificationtext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DialogMessage::ArenaDtor(void* object) {
  DialogMessage* _this = reinterpret_cast< DialogMessage* >(object);
  (void)_this;
}
void DialogMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DialogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DialogMessage& DialogMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DialogMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void DialogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DialogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    notificationtext_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DialogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string notificationText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_notificationtext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DialogMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DialogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string notificationText = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notificationtext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DialogMessage)
  return target;
}

size_t DialogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DialogMessage)
  size_t total_size = 0;

  // required string notificationText = 1;
  if (_internal_has_notificationtext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notificationtext());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DialogMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DialogMessage*>(
      &from));
}

void DialogMessage::MergeFrom(const DialogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DialogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_notificationtext()) {
    _internal_set_notificationtext(from._internal_notificationtext());
  }
}

void DialogMessage::CopyFrom(const DialogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DialogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DialogMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DialogMessage::InternalSwap(DialogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notificationtext_.Swap(&other->notificationtext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DialogMessage::GetTypeName() const {
  return "DialogMessage";
}


// ===================================================================

void TimeoutWarningMessage::InitAsDefaultInstance() {
}
class TimeoutWarningMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeoutWarningMessage>()._has_bits_);
  static void set_has_timeoutreason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remainingseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TimeoutWarningMessage::TimeoutWarningMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TimeoutWarningMessage)
}
TimeoutWarningMessage::TimeoutWarningMessage(const TimeoutWarningMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&timeoutreason_, &from.timeoutreason_,
    static_cast<size_t>(reinterpret_cast<char*>(&remainingseconds_) -
    reinterpret_cast<char*>(&timeoutreason_)) + sizeof(remainingseconds_));
  // @@protoc_insertion_point(copy_constructor:TimeoutWarningMessage)
}

void TimeoutWarningMessage::SharedCtor() {
  ::memset(&timeoutreason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remainingseconds_) -
      reinterpret_cast<char*>(&timeoutreason_)) + sizeof(remainingseconds_));
}

TimeoutWarningMessage::~TimeoutWarningMessage() {
  // @@protoc_insertion_point(destructor:TimeoutWarningMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TimeoutWarningMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimeoutWarningMessage::ArenaDtor(void* object) {
  TimeoutWarningMessage* _this = reinterpret_cast< TimeoutWarningMessage* >(object);
  (void)_this;
}
void TimeoutWarningMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeoutWarningMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeoutWarningMessage& TimeoutWarningMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeoutWarningMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void TimeoutWarningMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TimeoutWarningMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timeoutreason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remainingseconds_) -
        reinterpret_cast<char*>(&timeoutreason_)) + sizeof(remainingseconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TimeoutWarningMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TimeoutWarningMessage_TimeoutReason_IsValid(val))) {
            _internal_set_timeoutreason(static_cast<::TimeoutWarningMessage_TimeoutReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 remainingSeconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_remainingseconds(&has_bits);
          remainingseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeoutWarningMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimeoutWarningMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_timeoutreason(), target);
  }

  // required uint32 remainingSeconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remainingseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimeoutWarningMessage)
  return target;
}

size_t TimeoutWarningMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TimeoutWarningMessage)
  size_t total_size = 0;

  if (_internal_has_timeoutreason()) {
    // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeoutreason());
  }

  if (_internal_has_remainingseconds()) {
    // required uint32 remainingSeconds = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remainingseconds());
  }

  return total_size;
}
size_t TimeoutWarningMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TimeoutWarningMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeoutreason());

    // required uint32 remainingSeconds = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remainingseconds());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeoutWarningMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TimeoutWarningMessage*>(
      &from));
}

void TimeoutWarningMessage::MergeFrom(const TimeoutWarningMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TimeoutWarningMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timeoutreason_ = from.timeoutreason_;
    }
    if (cached_has_bits & 0x00000002u) {
      remainingseconds_ = from.remainingseconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeoutWarningMessage::CopyFrom(const TimeoutWarningMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TimeoutWarningMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutWarningMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TimeoutWarningMessage::InternalSwap(TimeoutWarningMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeoutWarningMessage, remainingseconds_)
      + sizeof(TimeoutWarningMessage::remainingseconds_)
      - PROTOBUF_FIELD_OFFSET(TimeoutWarningMessage, timeoutreason_)>(
          reinterpret_cast<char*>(&timeoutreason_),
          reinterpret_cast<char*>(&other->timeoutreason_));
}

std::string TimeoutWarningMessage::GetTypeName() const {
  return "TimeoutWarningMessage";
}


// ===================================================================

void ResetTimeoutMessage::InitAsDefaultInstance() {
}
class ResetTimeoutMessage::_Internal {
 public:
};

ResetTimeoutMessage::ResetTimeoutMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ResetTimeoutMessage)
}
ResetTimeoutMessage::ResetTimeoutMessage(const ResetTimeoutMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ResetTimeoutMessage)
}

void ResetTimeoutMessage::SharedCtor() {
}

ResetTimeoutMessage::~ResetTimeoutMessage() {
  // @@protoc_insertion_point(destructor:ResetTimeoutMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ResetTimeoutMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResetTimeoutMessage::ArenaDtor(void* object) {
  ResetTimeoutMessage* _this = reinterpret_cast< ResetTimeoutMessage* >(object);
  (void)_this;
}
void ResetTimeoutMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetTimeoutMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetTimeoutMessage& ResetTimeoutMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetTimeoutMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ResetTimeoutMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ResetTimeoutMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ResetTimeoutMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetTimeoutMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResetTimeoutMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResetTimeoutMessage)
  return target;
}

size_t ResetTimeoutMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResetTimeoutMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetTimeoutMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ResetTimeoutMessage*>(
      &from));
}

void ResetTimeoutMessage::MergeFrom(const ResetTimeoutMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResetTimeoutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetTimeoutMessage::CopyFrom(const ResetTimeoutMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResetTimeoutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetTimeoutMessage::IsInitialized() const {
  return true;
}

void ResetTimeoutMessage::InternalSwap(ResetTimeoutMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ResetTimeoutMessage::GetTypeName() const {
  return "ResetTimeoutMessage";
}


// ===================================================================

void ReportAvatarMessage::InitAsDefaultInstance() {
}
class ReportAvatarMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportAvatarMessage>()._has_bits_);
  static void set_has_reportedplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reportedavatarhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ReportAvatarMessage::ReportAvatarMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReportAvatarMessage)
}
ReportAvatarMessage::ReportAvatarMessage(const ReportAvatarMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  reportedavatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reportedavatarhash()) {
    reportedavatarhash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reportedavatarhash(),
      GetArena());
  }
  reportedplayerid_ = from.reportedplayerid_;
  // @@protoc_insertion_point(copy_constructor:ReportAvatarMessage)
}

void ReportAvatarMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportAvatarMessage_pokerth_2eproto.base);
  reportedavatarhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reportedplayerid_ = 0u;
}

ReportAvatarMessage::~ReportAvatarMessage() {
  // @@protoc_insertion_point(destructor:ReportAvatarMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ReportAvatarMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reportedavatarhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportAvatarMessage::ArenaDtor(void* object) {
  ReportAvatarMessage* _this = reinterpret_cast< ReportAvatarMessage* >(object);
  (void)_this;
}
void ReportAvatarMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportAvatarMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportAvatarMessage& ReportAvatarMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportAvatarMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ReportAvatarMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportAvatarMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reportedavatarhash_.ClearNonDefaultToEmpty();
  }
  reportedplayerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReportAvatarMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 reportedPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reportedplayerid(&has_bits);
          reportedplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes reportedAvatarHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reportedavatarhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportAvatarMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportAvatarMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 reportedPlayerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reportedplayerid(), target);
  }

  // required bytes reportedAvatarHash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_reportedavatarhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportAvatarMessage)
  return target;
}

size_t ReportAvatarMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportAvatarMessage)
  size_t total_size = 0;

  if (_internal_has_reportedavatarhash()) {
    // required bytes reportedAvatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reportedavatarhash());
  }

  if (_internal_has_reportedplayerid()) {
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportedplayerid());
  }

  return total_size;
}
size_t ReportAvatarMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportAvatarMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes reportedAvatarHash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reportedavatarhash());

    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportedplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportAvatarMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReportAvatarMessage*>(
      &from));
}

void ReportAvatarMessage::MergeFrom(const ReportAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportAvatarMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reportedavatarhash(from._internal_reportedavatarhash());
    }
    if (cached_has_bits & 0x00000002u) {
      reportedplayerid_ = from.reportedplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportAvatarMessage::CopyFrom(const ReportAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportAvatarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ReportAvatarMessage::InternalSwap(ReportAvatarMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reportedavatarhash_.Swap(&other->reportedavatarhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(reportedplayerid_, other->reportedplayerid_);
}

std::string ReportAvatarMessage::GetTypeName() const {
  return "ReportAvatarMessage";
}


// ===================================================================

void ReportAvatarAckMessage::InitAsDefaultInstance() {
}
class ReportAvatarAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportAvatarAckMessage>()._has_bits_);
  static void set_has_reportedplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reportavatarresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ReportAvatarAckMessage::ReportAvatarAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReportAvatarAckMessage)
}
ReportAvatarAckMessage::ReportAvatarAckMessage(const ReportAvatarAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&reportedplayerid_, &from.reportedplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reportavatarresult_) -
    reinterpret_cast<char*>(&reportedplayerid_)) + sizeof(reportavatarresult_));
  // @@protoc_insertion_point(copy_constructor:ReportAvatarAckMessage)
}

void ReportAvatarAckMessage::SharedCtor() {
  ::memset(&reportedplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportavatarresult_) -
      reinterpret_cast<char*>(&reportedplayerid_)) + sizeof(reportavatarresult_));
}

ReportAvatarAckMessage::~ReportAvatarAckMessage() {
  // @@protoc_insertion_point(destructor:ReportAvatarAckMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ReportAvatarAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReportAvatarAckMessage::ArenaDtor(void* object) {
  ReportAvatarAckMessage* _this = reinterpret_cast< ReportAvatarAckMessage* >(object);
  (void)_this;
}
void ReportAvatarAckMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportAvatarAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportAvatarAckMessage& ReportAvatarAckMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportAvatarAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ReportAvatarAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportAvatarAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reportedplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reportavatarresult_) -
        reinterpret_cast<char*>(&reportedplayerid_)) + sizeof(reportavatarresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReportAvatarAckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 reportedPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reportedplayerid(&has_bits);
          reportedplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ReportAvatarAckMessage_ReportAvatarResult_IsValid(val))) {
            _internal_set_reportavatarresult(static_cast<::ReportAvatarAckMessage_ReportAvatarResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportAvatarAckMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportAvatarAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 reportedPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reportedplayerid(), target);
  }

  // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reportavatarresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportAvatarAckMessage)
  return target;
}

size_t ReportAvatarAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportAvatarAckMessage)
  size_t total_size = 0;

  if (_internal_has_reportedplayerid()) {
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportedplayerid());
  }

  if (_internal_has_reportavatarresult()) {
    // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reportavatarresult());
  }

  return total_size;
}
size_t ReportAvatarAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportAvatarAckMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportedplayerid());

    // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reportavatarresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportAvatarAckMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReportAvatarAckMessage*>(
      &from));
}

void ReportAvatarAckMessage::MergeFrom(const ReportAvatarAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportAvatarAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reportedplayerid_ = from.reportedplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      reportavatarresult_ = from.reportavatarresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportAvatarAckMessage::CopyFrom(const ReportAvatarAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportAvatarAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ReportAvatarAckMessage::InternalSwap(ReportAvatarAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportAvatarAckMessage, reportavatarresult_)
      + sizeof(ReportAvatarAckMessage::reportavatarresult_)
      - PROTOBUF_FIELD_OFFSET(ReportAvatarAckMessage, reportedplayerid_)>(
          reinterpret_cast<char*>(&reportedplayerid_),
          reinterpret_cast<char*>(&other->reportedplayerid_));
}

std::string ReportAvatarAckMessage::GetTypeName() const {
  return "ReportAvatarAckMessage";
}


// ===================================================================

void ReportGameMessage::InitAsDefaultInstance() {
}
class ReportGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportGameMessage>()._has_bits_);
  static void set_has_reportedgameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ReportGameMessage::ReportGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReportGameMessage)
}
ReportGameMessage::ReportGameMessage(const ReportGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  reportedgameid_ = from.reportedgameid_;
  // @@protoc_insertion_point(copy_constructor:ReportGameMessage)
}

void ReportGameMessage::SharedCtor() {
  reportedgameid_ = 0u;
}

ReportGameMessage::~ReportGameMessage() {
  // @@protoc_insertion_point(destructor:ReportGameMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ReportGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReportGameMessage::ArenaDtor(void* object) {
  ReportGameMessage* _this = reinterpret_cast< ReportGameMessage* >(object);
  (void)_this;
}
void ReportGameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportGameMessage& ReportGameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ReportGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reportedgameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReportGameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 reportedGameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reportedgameid(&has_bits);
          reportedgameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportGameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 reportedGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reportedgameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportGameMessage)
  return target;
}

size_t ReportGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportGameMessage)
  size_t total_size = 0;

  // required uint32 reportedGameId = 1;
  if (_internal_has_reportedgameid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportedgameid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportGameMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReportGameMessage*>(
      &from));
}

void ReportGameMessage::MergeFrom(const ReportGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reportedgameid()) {
    _internal_set_reportedgameid(from._internal_reportedgameid());
  }
}

void ReportGameMessage::CopyFrom(const ReportGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ReportGameMessage::InternalSwap(ReportGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reportedgameid_, other->reportedgameid_);
}

std::string ReportGameMessage::GetTypeName() const {
  return "ReportGameMessage";
}


// ===================================================================

void ReportGameAckMessage::InitAsDefaultInstance() {
}
class ReportGameAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportGameAckMessage>()._has_bits_);
  static void set_has_reportedgameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reportgameresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ReportGameAckMessage::ReportGameAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReportGameAckMessage)
}
ReportGameAckMessage::ReportGameAckMessage(const ReportGameAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&reportedgameid_, &from.reportedgameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reportgameresult_) -
    reinterpret_cast<char*>(&reportedgameid_)) + sizeof(reportgameresult_));
  // @@protoc_insertion_point(copy_constructor:ReportGameAckMessage)
}

void ReportGameAckMessage::SharedCtor() {
  ::memset(&reportedgameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportgameresult_) -
      reinterpret_cast<char*>(&reportedgameid_)) + sizeof(reportgameresult_));
}

ReportGameAckMessage::~ReportGameAckMessage() {
  // @@protoc_insertion_point(destructor:ReportGameAckMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ReportGameAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReportGameAckMessage::ArenaDtor(void* object) {
  ReportGameAckMessage* _this = reinterpret_cast< ReportGameAckMessage* >(object);
  (void)_this;
}
void ReportGameAckMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportGameAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportGameAckMessage& ReportGameAckMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportGameAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ReportGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportGameAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reportedgameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reportgameresult_) -
        reinterpret_cast<char*>(&reportedgameid_)) + sizeof(reportgameresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReportGameAckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 reportedGameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reportedgameid(&has_bits);
          reportedgameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ReportGameAckMessage_ReportGameResult_IsValid(val))) {
            _internal_set_reportgameresult(static_cast<::ReportGameAckMessage_ReportGameResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportGameAckMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportGameAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 reportedGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reportedgameid(), target);
  }

  // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reportgameresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportGameAckMessage)
  return target;
}

size_t ReportGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportGameAckMessage)
  size_t total_size = 0;

  if (_internal_has_reportedgameid()) {
    // required uint32 reportedGameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportedgameid());
  }

  if (_internal_has_reportgameresult()) {
    // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reportgameresult());
  }

  return total_size;
}
size_t ReportGameAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportGameAckMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 reportedGameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportedgameid());

    // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reportgameresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportGameAckMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReportGameAckMessage*>(
      &from));
}

void ReportGameAckMessage::MergeFrom(const ReportGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportGameAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reportedgameid_ = from.reportedgameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      reportgameresult_ = from.reportgameresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportGameAckMessage::CopyFrom(const ReportGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ReportGameAckMessage::InternalSwap(ReportGameAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportGameAckMessage, reportgameresult_)
      + sizeof(ReportGameAckMessage::reportgameresult_)
      - PROTOBUF_FIELD_OFFSET(ReportGameAckMessage, reportedgameid_)>(
          reinterpret_cast<char*>(&reportedgameid_),
          reinterpret_cast<char*>(&other->reportedgameid_));
}

std::string ReportGameAckMessage::GetTypeName() const {
  return "ReportGameAckMessage";
}


// ===================================================================

void ErrorMessage::InitAsDefaultInstance() {
}
class ErrorMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorMessage>()._has_bits_);
  static void set_has_errorreason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ErrorMessage::ErrorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ErrorMessage)
}
ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  errorreason_ = from.errorreason_;
  // @@protoc_insertion_point(copy_constructor:ErrorMessage)
}

void ErrorMessage::SharedCtor() {
  errorreason_ = 0;
}

ErrorMessage::~ErrorMessage() {
  // @@protoc_insertion_point(destructor:ErrorMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ErrorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ErrorMessage::ArenaDtor(void* object) {
  ErrorMessage* _this = reinterpret_cast< ErrorMessage* >(object);
  (void)_this;
}
void ErrorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorMessage& ErrorMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ErrorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorreason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ErrorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ErrorMessage.ErrorReason errorReason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorMessage_ErrorReason_IsValid(val))) {
            _internal_set_errorreason(static_cast<::ErrorMessage_ErrorReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ErrorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ErrorMessage)
  return target;
}

size_t ErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ErrorMessage)
  size_t total_size = 0;

  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (_internal_has_errorreason()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errorreason());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ErrorMessage*>(
      &from));
}

void ErrorMessage::MergeFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorreason()) {
    _internal_set_errorreason(from._internal_errorreason());
  }
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ErrorMessage::InternalSwap(ErrorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errorreason_, other->errorreason_);
}

std::string ErrorMessage::GetTypeName() const {
  return "ErrorMessage";
}


// ===================================================================

void AdminRemoveGameMessage::InitAsDefaultInstance() {
}
class AdminRemoveGameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AdminRemoveGameMessage>()._has_bits_);
  static void set_has_removegameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AdminRemoveGameMessage::AdminRemoveGameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AdminRemoveGameMessage)
}
AdminRemoveGameMessage::AdminRemoveGameMessage(const AdminRemoveGameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  removegameid_ = from.removegameid_;
  // @@protoc_insertion_point(copy_constructor:AdminRemoveGameMessage)
}

void AdminRemoveGameMessage::SharedCtor() {
  removegameid_ = 0u;
}

AdminRemoveGameMessage::~AdminRemoveGameMessage() {
  // @@protoc_insertion_point(destructor:AdminRemoveGameMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AdminRemoveGameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdminRemoveGameMessage::ArenaDtor(void* object) {
  AdminRemoveGameMessage* _this = reinterpret_cast< AdminRemoveGameMessage* >(object);
  (void)_this;
}
void AdminRemoveGameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminRemoveGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminRemoveGameMessage& AdminRemoveGameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminRemoveGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AdminRemoveGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminRemoveGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removegameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AdminRemoveGameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 removeGameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_removegameid(&has_bits);
          removegameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminRemoveGameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminRemoveGameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 removeGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_removegameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminRemoveGameMessage)
  return target;
}

size_t AdminRemoveGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminRemoveGameMessage)
  size_t total_size = 0;

  // required uint32 removeGameId = 1;
  if (_internal_has_removegameid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_removegameid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminRemoveGameMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AdminRemoveGameMessage*>(
      &from));
}

void AdminRemoveGameMessage::MergeFrom(const AdminRemoveGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminRemoveGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_removegameid()) {
    _internal_set_removegameid(from._internal_removegameid());
  }
}

void AdminRemoveGameMessage::CopyFrom(const AdminRemoveGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminRemoveGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRemoveGameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AdminRemoveGameMessage::InternalSwap(AdminRemoveGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(removegameid_, other->removegameid_);
}

std::string AdminRemoveGameMessage::GetTypeName() const {
  return "AdminRemoveGameMessage";
}


// ===================================================================

void AdminRemoveGameAckMessage::InitAsDefaultInstance() {
}
class AdminRemoveGameAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AdminRemoveGameAckMessage>()._has_bits_);
  static void set_has_removegameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_removegameresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AdminRemoveGameAckMessage::AdminRemoveGameAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AdminRemoveGameAckMessage)
}
AdminRemoveGameAckMessage::AdminRemoveGameAckMessage(const AdminRemoveGameAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&removegameid_, &from.removegameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&removegameresult_) -
    reinterpret_cast<char*>(&removegameid_)) + sizeof(removegameresult_));
  // @@protoc_insertion_point(copy_constructor:AdminRemoveGameAckMessage)
}

void AdminRemoveGameAckMessage::SharedCtor() {
  ::memset(&removegameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&removegameresult_) -
      reinterpret_cast<char*>(&removegameid_)) + sizeof(removegameresult_));
}

AdminRemoveGameAckMessage::~AdminRemoveGameAckMessage() {
  // @@protoc_insertion_point(destructor:AdminRemoveGameAckMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AdminRemoveGameAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdminRemoveGameAckMessage::ArenaDtor(void* object) {
  AdminRemoveGameAckMessage* _this = reinterpret_cast< AdminRemoveGameAckMessage* >(object);
  (void)_this;
}
void AdminRemoveGameAckMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminRemoveGameAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminRemoveGameAckMessage& AdminRemoveGameAckMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminRemoveGameAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AdminRemoveGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminRemoveGameAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&removegameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&removegameresult_) -
        reinterpret_cast<char*>(&removegameid_)) + sizeof(removegameresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AdminRemoveGameAckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 removeGameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_removegameid(&has_bits);
          removegameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(val))) {
            _internal_set_removegameresult(static_cast<::AdminRemoveGameAckMessage_AdminRemoveGameResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminRemoveGameAckMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminRemoveGameAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 removeGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_removegameid(), target);
  }

  // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_removegameresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminRemoveGameAckMessage)
  return target;
}

size_t AdminRemoveGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AdminRemoveGameAckMessage)
  size_t total_size = 0;

  if (_internal_has_removegameid()) {
    // required uint32 removeGameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_removegameid());
  }

  if (_internal_has_removegameresult()) {
    // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_removegameresult());
  }

  return total_size;
}
size_t AdminRemoveGameAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminRemoveGameAckMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 removeGameId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_removegameid());

    // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_removegameresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminRemoveGameAckMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AdminRemoveGameAckMessage*>(
      &from));
}

void AdminRemoveGameAckMessage::MergeFrom(const AdminRemoveGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminRemoveGameAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      removegameid_ = from.removegameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      removegameresult_ = from.removegameresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdminRemoveGameAckMessage::CopyFrom(const AdminRemoveGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminRemoveGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRemoveGameAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AdminRemoveGameAckMessage::InternalSwap(AdminRemoveGameAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdminRemoveGameAckMessage, removegameresult_)
      + sizeof(AdminRemoveGameAckMessage::removegameresult_)
      - PROTOBUF_FIELD_OFFSET(AdminRemoveGameAckMessage, removegameid_)>(
          reinterpret_cast<char*>(&removegameid_),
          reinterpret_cast<char*>(&other->removegameid_));
}

std::string AdminRemoveGameAckMessage::GetTypeName() const {
  return "AdminRemoveGameAckMessage";
}


// ===================================================================

void AdminBanPlayerMessage::InitAsDefaultInstance() {
}
class AdminBanPlayerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AdminBanPlayerMessage>()._has_bits_);
  static void set_has_banplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AdminBanPlayerMessage::AdminBanPlayerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AdminBanPlayerMessage)
}
AdminBanPlayerMessage::AdminBanPlayerMessage(const AdminBanPlayerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  banplayerid_ = from.banplayerid_;
  // @@protoc_insertion_point(copy_constructor:AdminBanPlayerMessage)
}

void AdminBanPlayerMessage::SharedCtor() {
  banplayerid_ = 0u;
}

AdminBanPlayerMessage::~AdminBanPlayerMessage() {
  // @@protoc_insertion_point(destructor:AdminBanPlayerMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AdminBanPlayerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdminBanPlayerMessage::ArenaDtor(void* object) {
  AdminBanPlayerMessage* _this = reinterpret_cast< AdminBanPlayerMessage* >(object);
  (void)_this;
}
void AdminBanPlayerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminBanPlayerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminBanPlayerMessage& AdminBanPlayerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminBanPlayerMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AdminBanPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminBanPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  banplayerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AdminBanPlayerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 banPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_banplayerid(&has_bits);
          banplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminBanPlayerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminBanPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 banPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_banplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminBanPlayerMessage)
  return target;
}

size_t AdminBanPlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminBanPlayerMessage)
  size_t total_size = 0;

  // required uint32 banPlayerId = 1;
  if (_internal_has_banplayerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_banplayerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminBanPlayerMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AdminBanPlayerMessage*>(
      &from));
}

void AdminBanPlayerMessage::MergeFrom(const AdminBanPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminBanPlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_banplayerid()) {
    _internal_set_banplayerid(from._internal_banplayerid());
  }
}

void AdminBanPlayerMessage::CopyFrom(const AdminBanPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminBanPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminBanPlayerMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AdminBanPlayerMessage::InternalSwap(AdminBanPlayerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(banplayerid_, other->banplayerid_);
}

std::string AdminBanPlayerMessage::GetTypeName() const {
  return "AdminBanPlayerMessage";
}


// ===================================================================

void AdminBanPlayerAckMessage::InitAsDefaultInstance() {
}
class AdminBanPlayerAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AdminBanPlayerAckMessage>()._has_bits_);
  static void set_has_banplayerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_banplayerresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AdminBanPlayerAckMessage::AdminBanPlayerAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AdminBanPlayerAckMessage)
}
AdminBanPlayerAckMessage::AdminBanPlayerAckMessage(const AdminBanPlayerAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&banplayerid_, &from.banplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&banplayerresult_) -
    reinterpret_cast<char*>(&banplayerid_)) + sizeof(banplayerresult_));
  // @@protoc_insertion_point(copy_constructor:AdminBanPlayerAckMessage)
}

void AdminBanPlayerAckMessage::SharedCtor() {
  ::memset(&banplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banplayerresult_) -
      reinterpret_cast<char*>(&banplayerid_)) + sizeof(banplayerresult_));
}

AdminBanPlayerAckMessage::~AdminBanPlayerAckMessage() {
  // @@protoc_insertion_point(destructor:AdminBanPlayerAckMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AdminBanPlayerAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdminBanPlayerAckMessage::ArenaDtor(void* object) {
  AdminBanPlayerAckMessage* _this = reinterpret_cast< AdminBanPlayerAckMessage* >(object);
  (void)_this;
}
void AdminBanPlayerAckMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminBanPlayerAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminBanPlayerAckMessage& AdminBanPlayerAckMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminBanPlayerAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AdminBanPlayerAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminBanPlayerAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&banplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banplayerresult_) -
        reinterpret_cast<char*>(&banplayerid_)) + sizeof(banplayerresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AdminBanPlayerAckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 banPlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_banplayerid(&has_bits);
          banplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(val))) {
            _internal_set_banplayerresult(static_cast<::AdminBanPlayerAckMessage_AdminBanPlayerResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminBanPlayerAckMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminBanPlayerAckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 banPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_banplayerid(), target);
  }

  // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_banplayerresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminBanPlayerAckMessage)
  return target;
}

size_t AdminBanPlayerAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AdminBanPlayerAckMessage)
  size_t total_size = 0;

  if (_internal_has_banplayerid()) {
    // required uint32 banPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_banplayerid());
  }

  if (_internal_has_banplayerresult()) {
    // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_banplayerresult());
  }

  return total_size;
}
size_t AdminBanPlayerAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminBanPlayerAckMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 banPlayerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_banplayerid());

    // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_banplayerresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminBanPlayerAckMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AdminBanPlayerAckMessage*>(
      &from));
}

void AdminBanPlayerAckMessage::MergeFrom(const AdminBanPlayerAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminBanPlayerAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      banplayerid_ = from.banplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      banplayerresult_ = from.banplayerresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdminBanPlayerAckMessage::CopyFrom(const AdminBanPlayerAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminBanPlayerAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminBanPlayerAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AdminBanPlayerAckMessage::InternalSwap(AdminBanPlayerAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdminBanPlayerAckMessage, banplayerresult_)
      + sizeof(AdminBanPlayerAckMessage::banplayerresult_)
      - PROTOBUF_FIELD_OFFSET(AdminBanPlayerAckMessage, banplayerid_)>(
          reinterpret_cast<char*>(&banplayerid_),
          reinterpret_cast<char*>(&other->banplayerid_));
}

std::string AdminBanPlayerAckMessage::GetTypeName() const {
  return "AdminBanPlayerAckMessage";
}


// ===================================================================

void AuthMessage::InitAsDefaultInstance() {
  ::_AuthMessage_default_instance_._instance.get_mutable()->authclientrequestmessage_ = const_cast< ::AuthClientRequestMessage*>(
      ::AuthClientRequestMessage::internal_default_instance());
  ::_AuthMessage_default_instance_._instance.get_mutable()->authserverchallengemessage_ = const_cast< ::AuthServerChallengeMessage*>(
      ::AuthServerChallengeMessage::internal_default_instance());
  ::_AuthMessage_default_instance_._instance.get_mutable()->authclientresponsemessage_ = const_cast< ::AuthClientResponseMessage*>(
      ::AuthClientResponseMessage::internal_default_instance());
  ::_AuthMessage_default_instance_._instance.get_mutable()->authserververificationmessage_ = const_cast< ::AuthServerVerificationMessage*>(
      ::AuthServerVerificationMessage::internal_default_instance());
  ::_AuthMessage_default_instance_._instance.get_mutable()->errormessage_ = const_cast< ::ErrorMessage*>(
      ::ErrorMessage::internal_default_instance());
}
class AuthMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthMessage>()._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::AuthClientRequestMessage& authclientrequestmessage(const AuthMessage* msg);
  static void set_has_authclientrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AuthServerChallengeMessage& authserverchallengemessage(const AuthMessage* msg);
  static void set_has_authserverchallengemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::AuthClientResponseMessage& authclientresponsemessage(const AuthMessage* msg);
  static void set_has_authclientresponsemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::AuthServerVerificationMessage& authserververificationmessage(const AuthMessage* msg);
  static void set_has_authserververificationmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ErrorMessage& errormessage(const AuthMessage* msg);
  static void set_has_errormessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::AuthClientRequestMessage&
AuthMessage::_Internal::authclientrequestmessage(const AuthMessage* msg) {
  return *msg->authclientrequestmessage_;
}
const ::AuthServerChallengeMessage&
AuthMessage::_Internal::authserverchallengemessage(const AuthMessage* msg) {
  return *msg->authserverchallengemessage_;
}
const ::AuthClientResponseMessage&
AuthMessage::_Internal::authclientresponsemessage(const AuthMessage* msg) {
  return *msg->authclientresponsemessage_;
}
const ::AuthServerVerificationMessage&
AuthMessage::_Internal::authserververificationmessage(const AuthMessage* msg) {
  return *msg->authserververificationmessage_;
}
const ::ErrorMessage&
AuthMessage::_Internal::errormessage(const AuthMessage* msg) {
  return *msg->errormessage_;
}
AuthMessage::AuthMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AuthMessage)
}
AuthMessage::AuthMessage(const AuthMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_authclientrequestmessage()) {
    authclientrequestmessage_ = new ::AuthClientRequestMessage(*from.authclientrequestmessage_);
  } else {
    authclientrequestmessage_ = nullptr;
  }
  if (from._internal_has_authserverchallengemessage()) {
    authserverchallengemessage_ = new ::AuthServerChallengeMessage(*from.authserverchallengemessage_);
  } else {
    authserverchallengemessage_ = nullptr;
  }
  if (from._internal_has_authclientresponsemessage()) {
    authclientresponsemessage_ = new ::AuthClientResponseMessage(*from.authclientresponsemessage_);
  } else {
    authclientresponsemessage_ = nullptr;
  }
  if (from._internal_has_authserververificationmessage()) {
    authserververificationmessage_ = new ::AuthServerVerificationMessage(*from.authserververificationmessage_);
  } else {
    authserververificationmessage_ = nullptr;
  }
  if (from._internal_has_errormessage()) {
    errormessage_ = new ::ErrorMessage(*from.errormessage_);
  } else {
    errormessage_ = nullptr;
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:AuthMessage)
}

void AuthMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthMessage_pokerth_2eproto.base);
  ::memset(&authclientrequestmessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errormessage_) -
      reinterpret_cast<char*>(&authclientrequestmessage_)) + sizeof(errormessage_));
  messagetype_ = 1;
}

AuthMessage::~AuthMessage() {
  // @@protoc_insertion_point(destructor:AuthMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AuthMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete authclientrequestmessage_;
  if (this != internal_default_instance()) delete authserverchallengemessage_;
  if (this != internal_default_instance()) delete authclientresponsemessage_;
  if (this != internal_default_instance()) delete authserververificationmessage_;
  if (this != internal_default_instance()) delete errormessage_;
}

void AuthMessage::ArenaDtor(void* object) {
  AuthMessage* _this = reinterpret_cast< AuthMessage* >(object);
  (void)_this;
}
void AuthMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthMessage& AuthMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AuthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(authclientrequestmessage_ != nullptr);
      authclientrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(authserverchallengemessage_ != nullptr);
      authserverchallengemessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(authclientresponsemessage_ != nullptr);
      authclientresponsemessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(authserververificationmessage_ != nullptr);
      authserververificationmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(errormessage_ != nullptr);
      errormessage_->Clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .AuthMessage.AuthMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AuthMessage_AuthMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::AuthMessage_AuthMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .AuthClientRequestMessage authClientRequestMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_authclientrequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AuthServerChallengeMessage authServerChallengeMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_authserverchallengemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AuthClientResponseMessage authClientResponseMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_authclientresponsemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AuthServerVerificationMessage authServerVerificationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_authserververificationmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorMessage errorMessage = 1025;
      case 1025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errormessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .AuthMessage.AuthMessageType messageType = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .AuthClientRequestMessage authClientRequestMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::authclientrequestmessage(this), target, stream);
  }

  // optional .AuthServerChallengeMessage authServerChallengeMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::authserverchallengemessage(this), target, stream);
  }

  // optional .AuthClientResponseMessage authClientResponseMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::authclientresponsemessage(this), target, stream);
  }

  // optional .AuthServerVerificationMessage authServerVerificationMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::authserververificationmessage(this), target, stream);
  }

  // optional .ErrorMessage errorMessage = 1025;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1025, _Internal::errormessage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthMessage)
  return target;
}

size_t AuthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthMessage)
  size_t total_size = 0;

  // required .AuthMessage.AuthMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .AuthClientRequestMessage authClientRequestMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authclientrequestmessage_);
    }

    // optional .AuthServerChallengeMessage authServerChallengeMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authserverchallengemessage_);
    }

    // optional .AuthClientResponseMessage authClientResponseMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authclientresponsemessage_);
    }

    // optional .AuthServerVerificationMessage authServerVerificationMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authserververificationmessage_);
    }

    // optional .ErrorMessage errorMessage = 1025;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *errormessage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AuthMessage*>(
      &from));
}

void AuthMessage::MergeFrom(const AuthMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_authclientrequestmessage()->::AuthClientRequestMessage::MergeFrom(from._internal_authclientrequestmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_authserverchallengemessage()->::AuthServerChallengeMessage::MergeFrom(from._internal_authserverchallengemessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_authclientresponsemessage()->::AuthClientResponseMessage::MergeFrom(from._internal_authclientresponsemessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_authserververificationmessage()->::AuthServerVerificationMessage::MergeFrom(from._internal_authserververificationmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_errormessage()->::ErrorMessage::MergeFrom(from._internal_errormessage());
    }
    if (cached_has_bits & 0x00000020u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthMessage::CopyFrom(const AuthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_authclientrequestmessage()) {
    if (!authclientrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_authserverchallengemessage()) {
    if (!authserverchallengemessage_->IsInitialized()) return false;
  }
  if (_internal_has_authclientresponsemessage()) {
    if (!authclientresponsemessage_->IsInitialized()) return false;
  }
  if (_internal_has_authserververificationmessage()) {
    if (!authserververificationmessage_->IsInitialized()) return false;
  }
  if (_internal_has_errormessage()) {
    if (!errormessage_->IsInitialized()) return false;
  }
  return true;
}

void AuthMessage::InternalSwap(AuthMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthMessage, errormessage_)
      + sizeof(AuthMessage::errormessage_)
      - PROTOBUF_FIELD_OFFSET(AuthMessage, authclientrequestmessage_)>(
          reinterpret_cast<char*>(&authclientrequestmessage_),
          reinterpret_cast<char*>(&other->authclientrequestmessage_));
  swap(messagetype_, other->messagetype_);
}

std::string AuthMessage::GetTypeName() const {
  return "AuthMessage";
}


// ===================================================================

void LobbyMessage::InitAsDefaultInstance() {
  ::_LobbyMessage_default_instance_._instance.get_mutable()->initdonemessage_ = const_cast< ::InitDoneMessage*>(
      ::InitDoneMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->avatarrequestmessage_ = const_cast< ::AvatarRequestMessage*>(
      ::AvatarRequestMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->avatarheadermessage_ = const_cast< ::AvatarHeaderMessage*>(
      ::AvatarHeaderMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->avatardatamessage_ = const_cast< ::AvatarDataMessage*>(
      ::AvatarDataMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->avatarendmessage_ = const_cast< ::AvatarEndMessage*>(
      ::AvatarEndMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->unknownavatarmessage_ = const_cast< ::UnknownAvatarMessage*>(
      ::UnknownAvatarMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->playerlistmessage_ = const_cast< ::PlayerListMessage*>(
      ::PlayerListMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->gamelistnewmessage_ = const_cast< ::GameListNewMessage*>(
      ::GameListNewMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->gamelistupdatemessage_ = const_cast< ::GameListUpdateMessage*>(
      ::GameListUpdateMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->gamelistplayerjoinedmessage_ = const_cast< ::GameListPlayerJoinedMessage*>(
      ::GameListPlayerJoinedMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->gamelistplayerleftmessage_ = const_cast< ::GameListPlayerLeftMessage*>(
      ::GameListPlayerLeftMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->gamelistspectatorjoinedmessage_ = const_cast< ::GameListSpectatorJoinedMessage*>(
      ::GameListSpectatorJoinedMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->gamelistspectatorleftmessage_ = const_cast< ::GameListSpectatorLeftMessage*>(
      ::GameListSpectatorLeftMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->gamelistadminchangedmessage_ = const_cast< ::GameListAdminChangedMessage*>(
      ::GameListAdminChangedMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->playerinforequestmessage_ = const_cast< ::PlayerInfoRequestMessage*>(
      ::PlayerInfoRequestMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->playerinforeplymessage_ = const_cast< ::PlayerInfoReplyMessage*>(
      ::PlayerInfoReplyMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->subscriptionrequestmessage_ = const_cast< ::SubscriptionRequestMessage*>(
      ::SubscriptionRequestMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->subscriptionreplymessage_ = const_cast< ::SubscriptionReplyMessage*>(
      ::SubscriptionReplyMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->creategamemessage_ = const_cast< ::CreateGameMessage*>(
      ::CreateGameMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->creategamefailedmessage_ = const_cast< ::CreateGameFailedMessage*>(
      ::CreateGameFailedMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->joingamemessage_ = const_cast< ::JoinGameMessage*>(
      ::JoinGameMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->rejoingamemessage_ = const_cast< ::RejoinGameMessage*>(
      ::RejoinGameMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->joingameackmessage_ = const_cast< ::JoinGameAckMessage*>(
      ::JoinGameAckMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->joingamefailedmessage_ = const_cast< ::JoinGameFailedMessage*>(
      ::JoinGameFailedMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->invitenotifymessage_ = const_cast< ::InviteNotifyMessage*>(
      ::InviteNotifyMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->rejectgameinvitationmessage_ = const_cast< ::RejectGameInvitationMessage*>(
      ::RejectGameInvitationMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->rejectinvnotifymessage_ = const_cast< ::RejectInvNotifyMessage*>(
      ::RejectInvNotifyMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->statisticsmessage_ = const_cast< ::StatisticsMessage*>(
      ::StatisticsMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->chatrequestmessage_ = const_cast< ::ChatRequestMessage*>(
      ::ChatRequestMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->chatmessage_ = const_cast< ::ChatMessage*>(
      ::ChatMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->chatrejectmessage_ = const_cast< ::ChatRejectMessage*>(
      ::ChatRejectMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->dialogmessage_ = const_cast< ::DialogMessage*>(
      ::DialogMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->timeoutwarningmessage_ = const_cast< ::TimeoutWarningMessage*>(
      ::TimeoutWarningMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->resettimeoutmessage_ = const_cast< ::ResetTimeoutMessage*>(
      ::ResetTimeoutMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->reportavatarmessage_ = const_cast< ::ReportAvatarMessage*>(
      ::ReportAvatarMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->reportavatarackmessage_ = const_cast< ::ReportAvatarAckMessage*>(
      ::ReportAvatarAckMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->reportgamemessage_ = const_cast< ::ReportGameMessage*>(
      ::ReportGameMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->reportgameackmessage_ = const_cast< ::ReportGameAckMessage*>(
      ::ReportGameAckMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->adminremovegamemessage_ = const_cast< ::AdminRemoveGameMessage*>(
      ::AdminRemoveGameMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->adminremovegameackmessage_ = const_cast< ::AdminRemoveGameAckMessage*>(
      ::AdminRemoveGameAckMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->adminbanplayermessage_ = const_cast< ::AdminBanPlayerMessage*>(
      ::AdminBanPlayerMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->adminbanplayerackmessage_ = const_cast< ::AdminBanPlayerAckMessage*>(
      ::AdminBanPlayerAckMessage::internal_default_instance());
  ::_LobbyMessage_default_instance_._instance.get_mutable()->errormessage_ = const_cast< ::ErrorMessage*>(
      ::ErrorMessage::internal_default_instance());
}
class LobbyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LobbyMessage>()._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::InitDoneMessage& initdonemessage(const LobbyMessage* msg);
  static void set_has_initdonemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AvatarRequestMessage& avatarrequestmessage(const LobbyMessage* msg);
  static void set_has_avatarrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::AvatarHeaderMessage& avatarheadermessage(const LobbyMessage* msg);
  static void set_has_avatarheadermessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::AvatarDataMessage& avatardatamessage(const LobbyMessage* msg);
  static void set_has_avatardatamessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::AvatarEndMessage& avatarendmessage(const LobbyMessage* msg);
  static void set_has_avatarendmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::UnknownAvatarMessage& unknownavatarmessage(const LobbyMessage* msg);
  static void set_has_unknownavatarmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PlayerListMessage& playerlistmessage(const LobbyMessage* msg);
  static void set_has_playerlistmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::GameListNewMessage& gamelistnewmessage(const LobbyMessage* msg);
  static void set_has_gamelistnewmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::GameListUpdateMessage& gamelistupdatemessage(const LobbyMessage* msg);
  static void set_has_gamelistupdatemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::GameListPlayerJoinedMessage& gamelistplayerjoinedmessage(const LobbyMessage* msg);
  static void set_has_gamelistplayerjoinedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::GameListPlayerLeftMessage& gamelistplayerleftmessage(const LobbyMessage* msg);
  static void set_has_gamelistplayerleftmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::GameListSpectatorJoinedMessage& gamelistspectatorjoinedmessage(const LobbyMessage* msg);
  static void set_has_gamelistspectatorjoinedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::GameListSpectatorLeftMessage& gamelistspectatorleftmessage(const LobbyMessage* msg);
  static void set_has_gamelistspectatorleftmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::GameListAdminChangedMessage& gamelistadminchangedmessage(const LobbyMessage* msg);
  static void set_has_gamelistadminchangedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::PlayerInfoRequestMessage& playerinforequestmessage(const LobbyMessage* msg);
  static void set_has_playerinforequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::PlayerInfoReplyMessage& playerinforeplymessage(const LobbyMessage* msg);
  static void set_has_playerinforeplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::SubscriptionRequestMessage& subscriptionrequestmessage(const LobbyMessage* msg);
  static void set_has_subscriptionrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::SubscriptionReplyMessage& subscriptionreplymessage(const LobbyMessage* msg);
  static void set_has_subscriptionreplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::CreateGameMessage& creategamemessage(const LobbyMessage* msg);
  static void set_has_creategamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::CreateGameFailedMessage& creategamefailedmessage(const LobbyMessage* msg);
  static void set_has_creategamefailedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::JoinGameMessage& joingamemessage(const LobbyMessage* msg);
  static void set_has_joingamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::RejoinGameMessage& rejoingamemessage(const LobbyMessage* msg);
  static void set_has_rejoingamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::JoinGameAckMessage& joingameackmessage(const LobbyMessage* msg);
  static void set_has_joingameackmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::JoinGameFailedMessage& joingamefailedmessage(const LobbyMessage* msg);
  static void set_has_joingamefailedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::InviteNotifyMessage& invitenotifymessage(const LobbyMessage* msg);
  static void set_has_invitenotifymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::RejectGameInvitationMessage& rejectgameinvitationmessage(const LobbyMessage* msg);
  static void set_has_rejectgameinvitationmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::RejectInvNotifyMessage& rejectinvnotifymessage(const LobbyMessage* msg);
  static void set_has_rejectinvnotifymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::StatisticsMessage& statisticsmessage(const LobbyMessage* msg);
  static void set_has_statisticsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::ChatRequestMessage& chatrequestmessage(const LobbyMessage* msg);
  static void set_has_chatrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::ChatMessage& chatmessage(const LobbyMessage* msg);
  static void set_has_chatmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::ChatRejectMessage& chatrejectmessage(const LobbyMessage* msg);
  static void set_has_chatrejectmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::DialogMessage& dialogmessage(const LobbyMessage* msg);
  static void set_has_dialogmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TimeoutWarningMessage& timeoutwarningmessage(const LobbyMessage* msg);
  static void set_has_timeoutwarningmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::ResetTimeoutMessage& resettimeoutmessage(const LobbyMessage* msg);
  static void set_has_resettimeoutmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::ReportAvatarMessage& reportavatarmessage(const LobbyMessage* msg);
  static void set_has_reportavatarmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::ReportAvatarAckMessage& reportavatarackmessage(const LobbyMessage* msg);
  static void set_has_reportavatarackmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::ReportGameMessage& reportgamemessage(const LobbyMessage* msg);
  static void set_has_reportgamemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::ReportGameAckMessage& reportgameackmessage(const LobbyMessage* msg);
  static void set_has_reportgameackmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::AdminRemoveGameMessage& adminremovegamemessage(const LobbyMessage* msg);
  static void set_has_adminremovegamemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::AdminRemoveGameAckMessage& adminremovegameackmessage(const LobbyMessage* msg);
  static void set_has_adminremovegameackmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::AdminBanPlayerMessage& adminbanplayermessage(const LobbyMessage* msg);
  static void set_has_adminbanplayermessage(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::AdminBanPlayerAckMessage& adminbanplayerackmessage(const LobbyMessage* msg);
  static void set_has_adminbanplayerackmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::ErrorMessage& errormessage(const LobbyMessage* msg);
  static void set_has_errormessage(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[1] & 0x00000800) ^ 0x00000800) != 0;
  }
};

const ::InitDoneMessage&
LobbyMessage::_Internal::initdonemessage(const LobbyMessage* msg) {
  return *msg->initdonemessage_;
}
const ::AvatarRequestMessage&
LobbyMessage::_Internal::avatarrequestmessage(const LobbyMessage* msg) {
  return *msg->avatarrequestmessage_;
}
const ::AvatarHeaderMessage&
LobbyMessage::_Internal::avatarheadermessage(const LobbyMessage* msg) {
  return *msg->avatarheadermessage_;
}
const ::AvatarDataMessage&
LobbyMessage::_Internal::avatardatamessage(const LobbyMessage* msg) {
  return *msg->avatardatamessage_;
}
const ::AvatarEndMessage&
LobbyMessage::_Internal::avatarendmessage(const LobbyMessage* msg) {
  return *msg->avatarendmessage_;
}
const ::UnknownAvatarMessage&
LobbyMessage::_Internal::unknownavatarmessage(const LobbyMessage* msg) {
  return *msg->unknownavatarmessage_;
}
const ::PlayerListMessage&
LobbyMessage::_Internal::playerlistmessage(const LobbyMessage* msg) {
  return *msg->playerlistmessage_;
}
const ::GameListNewMessage&
LobbyMessage::_Internal::gamelistnewmessage(const LobbyMessage* msg) {
  return *msg->gamelistnewmessage_;
}
const ::GameListUpdateMessage&
LobbyMessage::_Internal::gamelistupdatemessage(const LobbyMessage* msg) {
  return *msg->gamelistupdatemessage_;
}
const ::GameListPlayerJoinedMessage&
LobbyMessage::_Internal::gamelistplayerjoinedmessage(const LobbyMessage* msg) {
  return *msg->gamelistplayerjoinedmessage_;
}
const ::GameListPlayerLeftMessage&
LobbyMessage::_Internal::gamelistplayerleftmessage(const LobbyMessage* msg) {
  return *msg->gamelistplayerleftmessage_;
}
const ::GameListSpectatorJoinedMessage&
LobbyMessage::_Internal::gamelistspectatorjoinedmessage(const LobbyMessage* msg) {
  return *msg->gamelistspectatorjoinedmessage_;
}
const ::GameListSpectatorLeftMessage&
LobbyMessage::_Internal::gamelistspectatorleftmessage(const LobbyMessage* msg) {
  return *msg->gamelistspectatorleftmessage_;
}
const ::GameListAdminChangedMessage&
LobbyMessage::_Internal::gamelistadminchangedmessage(const LobbyMessage* msg) {
  return *msg->gamelistadminchangedmessage_;
}
const ::PlayerInfoRequestMessage&
LobbyMessage::_Internal::playerinforequestmessage(const LobbyMessage* msg) {
  return *msg->playerinforequestmessage_;
}
const ::PlayerInfoReplyMessage&
LobbyMessage::_Internal::playerinforeplymessage(const LobbyMessage* msg) {
  return *msg->playerinforeplymessage_;
}
const ::SubscriptionRequestMessage&
LobbyMessage::_Internal::subscriptionrequestmessage(const LobbyMessage* msg) {
  return *msg->subscriptionrequestmessage_;
}
const ::SubscriptionReplyMessage&
LobbyMessage::_Internal::subscriptionreplymessage(const LobbyMessage* msg) {
  return *msg->subscriptionreplymessage_;
}
const ::CreateGameMessage&
LobbyMessage::_Internal::creategamemessage(const LobbyMessage* msg) {
  return *msg->creategamemessage_;
}
const ::CreateGameFailedMessage&
LobbyMessage::_Internal::creategamefailedmessage(const LobbyMessage* msg) {
  return *msg->creategamefailedmessage_;
}
const ::JoinGameMessage&
LobbyMessage::_Internal::joingamemessage(const LobbyMessage* msg) {
  return *msg->joingamemessage_;
}
const ::RejoinGameMessage&
LobbyMessage::_Internal::rejoingamemessage(const LobbyMessage* msg) {
  return *msg->rejoingamemessage_;
}
const ::JoinGameAckMessage&
LobbyMessage::_Internal::joingameackmessage(const LobbyMessage* msg) {
  return *msg->joingameackmessage_;
}
const ::JoinGameFailedMessage&
LobbyMessage::_Internal::joingamefailedmessage(const LobbyMessage* msg) {
  return *msg->joingamefailedmessage_;
}
const ::InviteNotifyMessage&
LobbyMessage::_Internal::invitenotifymessage(const LobbyMessage* msg) {
  return *msg->invitenotifymessage_;
}
const ::RejectGameInvitationMessage&
LobbyMessage::_Internal::rejectgameinvitationmessage(const LobbyMessage* msg) {
  return *msg->rejectgameinvitationmessage_;
}
const ::RejectInvNotifyMessage&
LobbyMessage::_Internal::rejectinvnotifymessage(const LobbyMessage* msg) {
  return *msg->rejectinvnotifymessage_;
}
const ::StatisticsMessage&
LobbyMessage::_Internal::statisticsmessage(const LobbyMessage* msg) {
  return *msg->statisticsmessage_;
}
const ::ChatRequestMessage&
LobbyMessage::_Internal::chatrequestmessage(const LobbyMessage* msg) {
  return *msg->chatrequestmessage_;
}
const ::ChatMessage&
LobbyMessage::_Internal::chatmessage(const LobbyMessage* msg) {
  return *msg->chatmessage_;
}
const ::ChatRejectMessage&
LobbyMessage::_Internal::chatrejectmessage(const LobbyMessage* msg) {
  return *msg->chatrejectmessage_;
}
const ::DialogMessage&
LobbyMessage::_Internal::dialogmessage(const LobbyMessage* msg) {
  return *msg->dialogmessage_;
}
const ::TimeoutWarningMessage&
LobbyMessage::_Internal::timeoutwarningmessage(const LobbyMessage* msg) {
  return *msg->timeoutwarningmessage_;
}
const ::ResetTimeoutMessage&
LobbyMessage::_Internal::resettimeoutmessage(const LobbyMessage* msg) {
  return *msg->resettimeoutmessage_;
}
const ::ReportAvatarMessage&
LobbyMessage::_Internal::reportavatarmessage(const LobbyMessage* msg) {
  return *msg->reportavatarmessage_;
}
const ::ReportAvatarAckMessage&
LobbyMessage::_Internal::reportavatarackmessage(const LobbyMessage* msg) {
  return *msg->reportavatarackmessage_;
}
const ::ReportGameMessage&
LobbyMessage::_Internal::reportgamemessage(const LobbyMessage* msg) {
  return *msg->reportgamemessage_;
}
const ::ReportGameAckMessage&
LobbyMessage::_Internal::reportgameackmessage(const LobbyMessage* msg) {
  return *msg->reportgameackmessage_;
}
const ::AdminRemoveGameMessage&
LobbyMessage::_Internal::adminremovegamemessage(const LobbyMessage* msg) {
  return *msg->adminremovegamemessage_;
}
const ::AdminRemoveGameAckMessage&
LobbyMessage::_Internal::adminremovegameackmessage(const LobbyMessage* msg) {
  return *msg->adminremovegameackmessage_;
}
const ::AdminBanPlayerMessage&
LobbyMessage::_Internal::adminbanplayermessage(const LobbyMessage* msg) {
  return *msg->adminbanplayermessage_;
}
const ::AdminBanPlayerAckMessage&
LobbyMessage::_Internal::adminbanplayerackmessage(const LobbyMessage* msg) {
  return *msg->adminbanplayerackmessage_;
}
const ::ErrorMessage&
LobbyMessage::_Internal::errormessage(const LobbyMessage* msg) {
  return *msg->errormessage_;
}
LobbyMessage::LobbyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LobbyMessage)
}
LobbyMessage::LobbyMessage(const LobbyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_initdonemessage()) {
    initdonemessage_ = new ::InitDoneMessage(*from.initdonemessage_);
  } else {
    initdonemessage_ = nullptr;
  }
  if (from._internal_has_avatarrequestmessage()) {
    avatarrequestmessage_ = new ::AvatarRequestMessage(*from.avatarrequestmessage_);
  } else {
    avatarrequestmessage_ = nullptr;
  }
  if (from._internal_has_avatarheadermessage()) {
    avatarheadermessage_ = new ::AvatarHeaderMessage(*from.avatarheadermessage_);
  } else {
    avatarheadermessage_ = nullptr;
  }
  if (from._internal_has_avatardatamessage()) {
    avatardatamessage_ = new ::AvatarDataMessage(*from.avatardatamessage_);
  } else {
    avatardatamessage_ = nullptr;
  }
  if (from._internal_has_avatarendmessage()) {
    avatarendmessage_ = new ::AvatarEndMessage(*from.avatarendmessage_);
  } else {
    avatarendmessage_ = nullptr;
  }
  if (from._internal_has_unknownavatarmessage()) {
    unknownavatarmessage_ = new ::UnknownAvatarMessage(*from.unknownavatarmessage_);
  } else {
    unknownavatarmessage_ = nullptr;
  }
  if (from._internal_has_playerlistmessage()) {
    playerlistmessage_ = new ::PlayerListMessage(*from.playerlistmessage_);
  } else {
    playerlistmessage_ = nullptr;
  }
  if (from._internal_has_gamelistnewmessage()) {
    gamelistnewmessage_ = new ::GameListNewMessage(*from.gamelistnewmessage_);
  } else {
    gamelistnewmessage_ = nullptr;
  }
  if (from._internal_has_gamelistupdatemessage()) {
    gamelistupdatemessage_ = new ::GameListUpdateMessage(*from.gamelistupdatemessage_);
  } else {
    gamelistupdatemessage_ = nullptr;
  }
  if (from._internal_has_gamelistplayerjoinedmessage()) {
    gamelistplayerjoinedmessage_ = new ::GameListPlayerJoinedMessage(*from.gamelistplayerjoinedmessage_);
  } else {
    gamelistplayerjoinedmessage_ = nullptr;
  }
  if (from._internal_has_gamelistplayerleftmessage()) {
    gamelistplayerleftmessage_ = new ::GameListPlayerLeftMessage(*from.gamelistplayerleftmessage_);
  } else {
    gamelistplayerleftmessage_ = nullptr;
  }
  if (from._internal_has_gamelistspectatorjoinedmessage()) {
    gamelistspectatorjoinedmessage_ = new ::GameListSpectatorJoinedMessage(*from.gamelistspectatorjoinedmessage_);
  } else {
    gamelistspectatorjoinedmessage_ = nullptr;
  }
  if (from._internal_has_gamelistspectatorleftmessage()) {
    gamelistspectatorleftmessage_ = new ::GameListSpectatorLeftMessage(*from.gamelistspectatorleftmessage_);
  } else {
    gamelistspectatorleftmessage_ = nullptr;
  }
  if (from._internal_has_gamelistadminchangedmessage()) {
    gamelistadminchangedmessage_ = new ::GameListAdminChangedMessage(*from.gamelistadminchangedmessage_);
  } else {
    gamelistadminchangedmessage_ = nullptr;
  }
  if (from._internal_has_playerinforequestmessage()) {
    playerinforequestmessage_ = new ::PlayerInfoRequestMessage(*from.playerinforequestmessage_);
  } else {
    playerinforequestmessage_ = nullptr;
  }
  if (from._internal_has_playerinforeplymessage()) {
    playerinforeplymessage_ = new ::PlayerInfoReplyMessage(*from.playerinforeplymessage_);
  } else {
    playerinforeplymessage_ = nullptr;
  }
  if (from._internal_has_subscriptionrequestmessage()) {
    subscriptionrequestmessage_ = new ::SubscriptionRequestMessage(*from.subscriptionrequestmessage_);
  } else {
    subscriptionrequestmessage_ = nullptr;
  }
  if (from._internal_has_subscriptionreplymessage()) {
    subscriptionreplymessage_ = new ::SubscriptionReplyMessage(*from.subscriptionreplymessage_);
  } else {
    subscriptionreplymessage_ = nullptr;
  }
  if (from._internal_has_creategamemessage()) {
    creategamemessage_ = new ::CreateGameMessage(*from.creategamemessage_);
  } else {
    creategamemessage_ = nullptr;
  }
  if (from._internal_has_creategamefailedmessage()) {
    creategamefailedmessage_ = new ::CreateGameFailedMessage(*from.creategamefailedmessage_);
  } else {
    creategamefailedmessage_ = nullptr;
  }
  if (from._internal_has_joingamemessage()) {
    joingamemessage_ = new ::JoinGameMessage(*from.joingamemessage_);
  } else {
    joingamemessage_ = nullptr;
  }
  if (from._internal_has_rejoingamemessage()) {
    rejoingamemessage_ = new ::RejoinGameMessage(*from.rejoingamemessage_);
  } else {
    rejoingamemessage_ = nullptr;
  }
  if (from._internal_has_joingameackmessage()) {
    joingameackmessage_ = new ::JoinGameAckMessage(*from.joingameackmessage_);
  } else {
    joingameackmessage_ = nullptr;
  }
  if (from._internal_has_joingamefailedmessage()) {
    joingamefailedmessage_ = new ::JoinGameFailedMessage(*from.joingamefailedmessage_);
  } else {
    joingamefailedmessage_ = nullptr;
  }
  if (from._internal_has_invitenotifymessage()) {
    invitenotifymessage_ = new ::InviteNotifyMessage(*from.invitenotifymessage_);
  } else {
    invitenotifymessage_ = nullptr;
  }
  if (from._internal_has_rejectgameinvitationmessage()) {
    rejectgameinvitationmessage_ = new ::RejectGameInvitationMessage(*from.rejectgameinvitationmessage_);
  } else {
    rejectgameinvitationmessage_ = nullptr;
  }
  if (from._internal_has_rejectinvnotifymessage()) {
    rejectinvnotifymessage_ = new ::RejectInvNotifyMessage(*from.rejectinvnotifymessage_);
  } else {
    rejectinvnotifymessage_ = nullptr;
  }
  if (from._internal_has_statisticsmessage()) {
    statisticsmessage_ = new ::StatisticsMessage(*from.statisticsmessage_);
  } else {
    statisticsmessage_ = nullptr;
  }
  if (from._internal_has_chatrequestmessage()) {
    chatrequestmessage_ = new ::ChatRequestMessage(*from.chatrequestmessage_);
  } else {
    chatrequestmessage_ = nullptr;
  }
  if (from._internal_has_chatmessage()) {
    chatmessage_ = new ::ChatMessage(*from.chatmessage_);
  } else {
    chatmessage_ = nullptr;
  }
  if (from._internal_has_chatrejectmessage()) {
    chatrejectmessage_ = new ::ChatRejectMessage(*from.chatrejectmessage_);
  } else {
    chatrejectmessage_ = nullptr;
  }
  if (from._internal_has_dialogmessage()) {
    dialogmessage_ = new ::DialogMessage(*from.dialogmessage_);
  } else {
    dialogmessage_ = nullptr;
  }
  if (from._internal_has_timeoutwarningmessage()) {
    timeoutwarningmessage_ = new ::TimeoutWarningMessage(*from.timeoutwarningmessage_);
  } else {
    timeoutwarningmessage_ = nullptr;
  }
  if (from._internal_has_resettimeoutmessage()) {
    resettimeoutmessage_ = new ::ResetTimeoutMessage(*from.resettimeoutmessage_);
  } else {
    resettimeoutmessage_ = nullptr;
  }
  if (from._internal_has_reportavatarmessage()) {
    reportavatarmessage_ = new ::ReportAvatarMessage(*from.reportavatarmessage_);
  } else {
    reportavatarmessage_ = nullptr;
  }
  if (from._internal_has_reportavatarackmessage()) {
    reportavatarackmessage_ = new ::ReportAvatarAckMessage(*from.reportavatarackmessage_);
  } else {
    reportavatarackmessage_ = nullptr;
  }
  if (from._internal_has_reportgamemessage()) {
    reportgamemessage_ = new ::ReportGameMessage(*from.reportgamemessage_);
  } else {
    reportgamemessage_ = nullptr;
  }
  if (from._internal_has_reportgameackmessage()) {
    reportgameackmessage_ = new ::ReportGameAckMessage(*from.reportgameackmessage_);
  } else {
    reportgameackmessage_ = nullptr;
  }
  if (from._internal_has_adminremovegamemessage()) {
    adminremovegamemessage_ = new ::AdminRemoveGameMessage(*from.adminremovegamemessage_);
  } else {
    adminremovegamemessage_ = nullptr;
  }
  if (from._internal_has_adminremovegameackmessage()) {
    adminremovegameackmessage_ = new ::AdminRemoveGameAckMessage(*from.adminremovegameackmessage_);
  } else {
    adminremovegameackmessage_ = nullptr;
  }
  if (from._internal_has_adminbanplayermessage()) {
    adminbanplayermessage_ = new ::AdminBanPlayerMessage(*from.adminbanplayermessage_);
  } else {
    adminbanplayermessage_ = nullptr;
  }
  if (from._internal_has_adminbanplayerackmessage()) {
    adminbanplayerackmessage_ = new ::AdminBanPlayerAckMessage(*from.adminbanplayerackmessage_);
  } else {
    adminbanplayerackmessage_ = nullptr;
  }
  if (from._internal_has_errormessage()) {
    errormessage_ = new ::ErrorMessage(*from.errormessage_);
  } else {
    errormessage_ = nullptr;
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:LobbyMessage)
}

void LobbyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LobbyMessage_pokerth_2eproto.base);
  ::memset(&initdonemessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errormessage_) -
      reinterpret_cast<char*>(&initdonemessage_)) + sizeof(errormessage_));
  messagetype_ = 1;
}

LobbyMessage::~LobbyMessage() {
  // @@protoc_insertion_point(destructor:LobbyMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LobbyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete initdonemessage_;
  if (this != internal_default_instance()) delete avatarrequestmessage_;
  if (this != internal_default_instance()) delete avatarheadermessage_;
  if (this != internal_default_instance()) delete avatardatamessage_;
  if (this != internal_default_instance()) delete avatarendmessage_;
  if (this != internal_default_instance()) delete unknownavatarmessage_;
  if (this != internal_default_instance()) delete playerlistmessage_;
  if (this != internal_default_instance()) delete gamelistnewmessage_;
  if (this != internal_default_instance()) delete gamelistupdatemessage_;
  if (this != internal_default_instance()) delete gamelistplayerjoinedmessage_;
  if (this != internal_default_instance()) delete gamelistplayerleftmessage_;
  if (this != internal_default_instance()) delete gamelistspectatorjoinedmessage_;
  if (this != internal_default_instance()) delete gamelistspectatorleftmessage_;
  if (this != internal_default_instance()) delete gamelistadminchangedmessage_;
  if (this != internal_default_instance()) delete playerinforequestmessage_;
  if (this != internal_default_instance()) delete playerinforeplymessage_;
  if (this != internal_default_instance()) delete subscriptionrequestmessage_;
  if (this != internal_default_instance()) delete subscriptionreplymessage_;
  if (this != internal_default_instance()) delete creategamemessage_;
  if (this != internal_default_instance()) delete creategamefailedmessage_;
  if (this != internal_default_instance()) delete joingamemessage_;
  if (this != internal_default_instance()) delete rejoingamemessage_;
  if (this != internal_default_instance()) delete joingameackmessage_;
  if (this != internal_default_instance()) delete joingamefailedmessage_;
  if (this != internal_default_instance()) delete invitenotifymessage_;
  if (this != internal_default_instance()) delete rejectgameinvitationmessage_;
  if (this != internal_default_instance()) delete rejectinvnotifymessage_;
  if (this != internal_default_instance()) delete statisticsmessage_;
  if (this != internal_default_instance()) delete chatrequestmessage_;
  if (this != internal_default_instance()) delete chatmessage_;
  if (this != internal_default_instance()) delete chatrejectmessage_;
  if (this != internal_default_instance()) delete dialogmessage_;
  if (this != internal_default_instance()) delete timeoutwarningmessage_;
  if (this != internal_default_instance()) delete resettimeoutmessage_;
  if (this != internal_default_instance()) delete reportavatarmessage_;
  if (this != internal_default_instance()) delete reportavatarackmessage_;
  if (this != internal_default_instance()) delete reportgamemessage_;
  if (this != internal_default_instance()) delete reportgameackmessage_;
  if (this != internal_default_instance()) delete adminremovegamemessage_;
  if (this != internal_default_instance()) delete adminremovegameackmessage_;
  if (this != internal_default_instance()) delete adminbanplayermessage_;
  if (this != internal_default_instance()) delete adminbanplayerackmessage_;
  if (this != internal_default_instance()) delete errormessage_;
}

void LobbyMessage::ArenaDtor(void* object) {
  LobbyMessage* _this = reinterpret_cast< LobbyMessage* >(object);
  (void)_this;
}
void LobbyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobbyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LobbyMessage& LobbyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LobbyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void LobbyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(initdonemessage_ != nullptr);
      initdonemessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(avatarrequestmessage_ != nullptr);
      avatarrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(avatarheadermessage_ != nullptr);
      avatarheadermessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(avatardatamessage_ != nullptr);
      avatardatamessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(avatarendmessage_ != nullptr);
      avatarendmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(unknownavatarmessage_ != nullptr);
      unknownavatarmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(playerlistmessage_ != nullptr);
      playerlistmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(gamelistnewmessage_ != nullptr);
      gamelistnewmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(gamelistupdatemessage_ != nullptr);
      gamelistupdatemessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(gamelistplayerjoinedmessage_ != nullptr);
      gamelistplayerjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(gamelistplayerleftmessage_ != nullptr);
      gamelistplayerleftmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(gamelistspectatorjoinedmessage_ != nullptr);
      gamelistspectatorjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(gamelistspectatorleftmessage_ != nullptr);
      gamelistspectatorleftmessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(gamelistadminchangedmessage_ != nullptr);
      gamelistadminchangedmessage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(playerinforequestmessage_ != nullptr);
      playerinforequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(playerinforeplymessage_ != nullptr);
      playerinforeplymessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(subscriptionrequestmessage_ != nullptr);
      subscriptionrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(subscriptionreplymessage_ != nullptr);
      subscriptionreplymessage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(creategamemessage_ != nullptr);
      creategamemessage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(creategamefailedmessage_ != nullptr);
      creategamefailedmessage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(joingamemessage_ != nullptr);
      joingamemessage_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(rejoingamemessage_ != nullptr);
      rejoingamemessage_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(joingameackmessage_ != nullptr);
      joingameackmessage_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(joingamefailedmessage_ != nullptr);
      joingamefailedmessage_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(invitenotifymessage_ != nullptr);
      invitenotifymessage_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(rejectgameinvitationmessage_ != nullptr);
      rejectgameinvitationmessage_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(rejectinvnotifymessage_ != nullptr);
      rejectinvnotifymessage_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(statisticsmessage_ != nullptr);
      statisticsmessage_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(chatrequestmessage_ != nullptr);
      chatrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(chatmessage_ != nullptr);
      chatmessage_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(chatrejectmessage_ != nullptr);
      chatrejectmessage_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(dialogmessage_ != nullptr);
      dialogmessage_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timeoutwarningmessage_ != nullptr);
      timeoutwarningmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resettimeoutmessage_ != nullptr);
      resettimeoutmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reportavatarmessage_ != nullptr);
      reportavatarmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reportavatarackmessage_ != nullptr);
      reportavatarackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reportgamemessage_ != nullptr);
      reportgamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(reportgameackmessage_ != nullptr);
      reportgameackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(adminremovegamemessage_ != nullptr);
      adminremovegamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(adminremovegameackmessage_ != nullptr);
      adminremovegameackmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(adminbanplayermessage_ != nullptr);
      adminbanplayermessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(adminbanplayerackmessage_ != nullptr);
      adminbanplayerackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(errormessage_ != nullptr);
      errormessage_->Clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LobbyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .LobbyMessage.LobbyMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyMessage_LobbyMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::LobbyMessage_LobbyMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .InitDoneMessage initDoneMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_initdonemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AvatarRequestMessage avatarRequestMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatarrequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AvatarHeaderMessage avatarHeaderMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatarheadermessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AvatarDataMessage avatarDataMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatardatamessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AvatarEndMessage avatarEndMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatarendmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .UnknownAvatarMessage unknownAvatarMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknownavatarmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerListMessage playerListMessage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerlistmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameListNewMessage gameListNewMessage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistnewmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameListUpdateMessage gameListUpdateMessage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistupdatemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistplayerjoinedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistplayerleftmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistspectatorjoinedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistspectatorleftmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamelistadminchangedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinforequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinforeplymessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubscriptionRequestMessage subscriptionRequestMessage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriptionrequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubscriptionReplyMessage subscriptionReplyMessage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriptionreplymessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CreateGameMessage createGameMessage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_creategamemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CreateGameFailedMessage createGameFailedMessage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_creategamefailedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .JoinGameMessage joinGameMessage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_joingamemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RejoinGameMessage rejoinGameMessage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejoingamemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .JoinGameAckMessage joinGameAckMessage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_joingameackmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .JoinGameFailedMessage joinGameFailedMessage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_joingamefailedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .InviteNotifyMessage inviteNotifyMessage = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitenotifymessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectgameinvitationmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectinvnotifymessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .StatisticsMessage statisticsMessage = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_statisticsmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ChatRequestMessage chatRequestMessage = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatrequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ChatMessage chatMessage = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ChatRejectMessage chatRejectMessage = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatrejectmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DialogMessage dialogMessage = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dialogmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TimeoutWarningMessage timeoutWarningMessage = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeoutwarningmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ResetTimeoutMessage resetTimeoutMessage = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resettimeoutmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReportAvatarMessage reportAvatarMessage = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportavatarmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReportAvatarAckMessage reportAvatarAckMessage = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportavatarackmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReportGameMessage reportGameMessage = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportgamemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReportGameAckMessage reportGameAckMessage = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportgameackmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AdminRemoveGameMessage adminRemoveGameMessage = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminremovegamemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminremovegameackmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AdminBanPlayerMessage adminBanPlayerMessage = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminbanplayermessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminbanplayerackmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorMessage errorMessage = 1025;
      case 1025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errormessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LobbyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // required .LobbyMessage.LobbyMessageType messageType = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .InitDoneMessage initDoneMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::initdonemessage(this), target, stream);
  }

  // optional .AvatarRequestMessage avatarRequestMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::avatarrequestmessage(this), target, stream);
  }

  // optional .AvatarHeaderMessage avatarHeaderMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::avatarheadermessage(this), target, stream);
  }

  // optional .AvatarDataMessage avatarDataMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::avatardatamessage(this), target, stream);
  }

  // optional .AvatarEndMessage avatarEndMessage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::avatarendmessage(this), target, stream);
  }

  // optional .UnknownAvatarMessage unknownAvatarMessage = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::unknownavatarmessage(this), target, stream);
  }

  // optional .PlayerListMessage playerListMessage = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::playerlistmessage(this), target, stream);
  }

  // optional .GameListNewMessage gameListNewMessage = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::gamelistnewmessage(this), target, stream);
  }

  // optional .GameListUpdateMessage gameListUpdateMessage = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::gamelistupdatemessage(this), target, stream);
  }

  // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::gamelistplayerjoinedmessage(this), target, stream);
  }

  // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::gamelistplayerleftmessage(this), target, stream);
  }

  // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::gamelistspectatorjoinedmessage(this), target, stream);
  }

  // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::gamelistspectatorleftmessage(this), target, stream);
  }

  // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::gamelistadminchangedmessage(this), target, stream);
  }

  // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::playerinforequestmessage(this), target, stream);
  }

  // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::playerinforeplymessage(this), target, stream);
  }

  // optional .SubscriptionRequestMessage subscriptionRequestMessage = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::subscriptionrequestmessage(this), target, stream);
  }

  // optional .SubscriptionReplyMessage subscriptionReplyMessage = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::subscriptionreplymessage(this), target, stream);
  }

  // optional .CreateGameMessage createGameMessage = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::creategamemessage(this), target, stream);
  }

  // optional .CreateGameFailedMessage createGameFailedMessage = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::creategamefailedmessage(this), target, stream);
  }

  // optional .JoinGameMessage joinGameMessage = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::joingamemessage(this), target, stream);
  }

  // optional .RejoinGameMessage rejoinGameMessage = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::rejoingamemessage(this), target, stream);
  }

  // optional .JoinGameAckMessage joinGameAckMessage = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::joingameackmessage(this), target, stream);
  }

  // optional .JoinGameFailedMessage joinGameFailedMessage = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::joingamefailedmessage(this), target, stream);
  }

  // optional .InviteNotifyMessage inviteNotifyMessage = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::invitenotifymessage(this), target, stream);
  }

  // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::rejectgameinvitationmessage(this), target, stream);
  }

  // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::rejectinvnotifymessage(this), target, stream);
  }

  // optional .StatisticsMessage statisticsMessage = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::statisticsmessage(this), target, stream);
  }

  // optional .ChatRequestMessage chatRequestMessage = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::chatrequestmessage(this), target, stream);
  }

  // optional .ChatMessage chatMessage = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::chatmessage(this), target, stream);
  }

  // optional .ChatRejectMessage chatRejectMessage = 32;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::chatrejectmessage(this), target, stream);
  }

  // optional .DialogMessage dialogMessage = 33;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::dialogmessage(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TimeoutWarningMessage timeoutWarningMessage = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::timeoutwarningmessage(this), target, stream);
  }

  // optional .ResetTimeoutMessage resetTimeoutMessage = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::resettimeoutmessage(this), target, stream);
  }

  // optional .ReportAvatarMessage reportAvatarMessage = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::reportavatarmessage(this), target, stream);
  }

  // optional .ReportAvatarAckMessage reportAvatarAckMessage = 37;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::reportavatarackmessage(this), target, stream);
  }

  // optional .ReportGameMessage reportGameMessage = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::reportgamemessage(this), target, stream);
  }

  // optional .ReportGameAckMessage reportGameAckMessage = 39;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::reportgameackmessage(this), target, stream);
  }

  // optional .AdminRemoveGameMessage adminRemoveGameMessage = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::adminremovegamemessage(this), target, stream);
  }

  // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 41;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::adminremovegameackmessage(this), target, stream);
  }

  // optional .AdminBanPlayerMessage adminBanPlayerMessage = 42;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::adminbanplayermessage(this), target, stream);
  }

  // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 43;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::adminbanplayerackmessage(this), target, stream);
  }

  // optional .ErrorMessage errorMessage = 1025;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1025, _Internal::errormessage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMessage)
  return target;
}

size_t LobbyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMessage)
  size_t total_size = 0;

  // required .LobbyMessage.LobbyMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .InitDoneMessage initDoneMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initdonemessage_);
    }

    // optional .AvatarRequestMessage avatarRequestMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatarrequestmessage_);
    }

    // optional .AvatarHeaderMessage avatarHeaderMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatarheadermessage_);
    }

    // optional .AvatarDataMessage avatarDataMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatardatamessage_);
    }

    // optional .AvatarEndMessage avatarEndMessage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatarendmessage_);
    }

    // optional .UnknownAvatarMessage unknownAvatarMessage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unknownavatarmessage_);
    }

    // optional .PlayerListMessage playerListMessage = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playerlistmessage_);
    }

    // optional .GameListNewMessage gameListNewMessage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamelistnewmessage_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .GameListUpdateMessage gameListUpdateMessage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamelistupdatemessage_);
    }

    // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamelistplayerjoinedmessage_);
    }

    // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamelistplayerleftmessage_);
    }

    // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamelistspectatorjoinedmessage_);
    }

    // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamelistspectatorleftmessage_);
    }

    // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamelistadminchangedmessage_);
    }

    // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playerinforequestmessage_);
    }

    // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playerinforeplymessage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .SubscriptionRequestMessage subscriptionRequestMessage = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subscriptionrequestmessage_);
    }

    // optional .SubscriptionReplyMessage subscriptionReplyMessage = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subscriptionreplymessage_);
    }

    // optional .CreateGameMessage createGameMessage = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creategamemessage_);
    }

    // optional .CreateGameFailedMessage createGameFailedMessage = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creategamefailedmessage_);
    }

    // optional .JoinGameMessage joinGameMessage = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *joingamemessage_);
    }

    // optional .RejoinGameMessage rejoinGameMessage = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rejoingamemessage_);
    }

    // optional .JoinGameAckMessage joinGameAckMessage = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *joingameackmessage_);
    }

    // optional .JoinGameFailedMessage joinGameFailedMessage = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *joingamefailedmessage_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .InviteNotifyMessage inviteNotifyMessage = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *invitenotifymessage_);
    }

    // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rejectgameinvitationmessage_);
    }

    // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rejectinvnotifymessage_);
    }

    // optional .StatisticsMessage statisticsMessage = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statisticsmessage_);
    }

    // optional .ChatRequestMessage chatRequestMessage = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chatrequestmessage_);
    }

    // optional .ChatMessage chatMessage = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chatmessage_);
    }

    // optional .ChatRejectMessage chatRejectMessage = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chatrejectmessage_);
    }

    // optional .DialogMessage dialogMessage = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dialogmessage_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TimeoutWarningMessage timeoutWarningMessage = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timeoutwarningmessage_);
    }

    // optional .ResetTimeoutMessage resetTimeoutMessage = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resettimeoutmessage_);
    }

    // optional .ReportAvatarMessage reportAvatarMessage = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reportavatarmessage_);
    }

    // optional .ReportAvatarAckMessage reportAvatarAckMessage = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reportavatarackmessage_);
    }

    // optional .ReportGameMessage reportGameMessage = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reportgamemessage_);
    }

    // optional .ReportGameAckMessage reportGameAckMessage = 39;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reportgameackmessage_);
    }

    // optional .AdminRemoveGameMessage adminRemoveGameMessage = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adminremovegamemessage_);
    }

    // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adminremovegameackmessage_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .AdminBanPlayerMessage adminBanPlayerMessage = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adminbanplayermessage_);
    }

    // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 43;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adminbanplayerackmessage_);
    }

    // optional .ErrorMessage errorMessage = 1025;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *errormessage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LobbyMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LobbyMessage*>(
      &from));
}

void LobbyMessage::MergeFrom(const LobbyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_initdonemessage()->::InitDoneMessage::MergeFrom(from._internal_initdonemessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_avatarrequestmessage()->::AvatarRequestMessage::MergeFrom(from._internal_avatarrequestmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_avatarheadermessage()->::AvatarHeaderMessage::MergeFrom(from._internal_avatarheadermessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_avatardatamessage()->::AvatarDataMessage::MergeFrom(from._internal_avatardatamessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_avatarendmessage()->::AvatarEndMessage::MergeFrom(from._internal_avatarendmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_unknownavatarmessage()->::UnknownAvatarMessage::MergeFrom(from._internal_unknownavatarmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_playerlistmessage()->::PlayerListMessage::MergeFrom(from._internal_playerlistmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_gamelistnewmessage()->::GameListNewMessage::MergeFrom(from._internal_gamelistnewmessage());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_gamelistupdatemessage()->::GameListUpdateMessage::MergeFrom(from._internal_gamelistupdatemessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_gamelistplayerjoinedmessage()->::GameListPlayerJoinedMessage::MergeFrom(from._internal_gamelistplayerjoinedmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_gamelistplayerleftmessage()->::GameListPlayerLeftMessage::MergeFrom(from._internal_gamelistplayerleftmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_gamelistspectatorjoinedmessage()->::GameListSpectatorJoinedMessage::MergeFrom(from._internal_gamelistspectatorjoinedmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_gamelistspectatorleftmessage()->::GameListSpectatorLeftMessage::MergeFrom(from._internal_gamelistspectatorleftmessage());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_gamelistadminchangedmessage()->::GameListAdminChangedMessage::MergeFrom(from._internal_gamelistadminchangedmessage());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_playerinforequestmessage()->::PlayerInfoRequestMessage::MergeFrom(from._internal_playerinforequestmessage());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_playerinforeplymessage()->::PlayerInfoReplyMessage::MergeFrom(from._internal_playerinforeplymessage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_subscriptionrequestmessage()->::SubscriptionRequestMessage::MergeFrom(from._internal_subscriptionrequestmessage());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_subscriptionreplymessage()->::SubscriptionReplyMessage::MergeFrom(from._internal_subscriptionreplymessage());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_creategamemessage()->::CreateGameMessage::MergeFrom(from._internal_creategamemessage());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_creategamefailedmessage()->::CreateGameFailedMessage::MergeFrom(from._internal_creategamefailedmessage());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_joingamemessage()->::JoinGameMessage::MergeFrom(from._internal_joingamemessage());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_rejoingamemessage()->::RejoinGameMessage::MergeFrom(from._internal_rejoingamemessage());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_joingameackmessage()->::JoinGameAckMessage::MergeFrom(from._internal_joingameackmessage());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_joingamefailedmessage()->::JoinGameFailedMessage::MergeFrom(from._internal_joingamefailedmessage());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_invitenotifymessage()->::InviteNotifyMessage::MergeFrom(from._internal_invitenotifymessage());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_rejectgameinvitationmessage()->::RejectGameInvitationMessage::MergeFrom(from._internal_rejectgameinvitationmessage());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_rejectinvnotifymessage()->::RejectInvNotifyMessage::MergeFrom(from._internal_rejectinvnotifymessage());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_statisticsmessage()->::StatisticsMessage::MergeFrom(from._internal_statisticsmessage());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_chatrequestmessage()->::ChatRequestMessage::MergeFrom(from._internal_chatrequestmessage());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_chatmessage()->::ChatMessage::MergeFrom(from._internal_chatmessage());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_chatrejectmessage()->::ChatRejectMessage::MergeFrom(from._internal_chatrejectmessage());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_dialogmessage()->::DialogMessage::MergeFrom(from._internal_dialogmessage());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_timeoutwarningmessage()->::TimeoutWarningMessage::MergeFrom(from._internal_timeoutwarningmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_resettimeoutmessage()->::ResetTimeoutMessage::MergeFrom(from._internal_resettimeoutmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reportavatarmessage()->::ReportAvatarMessage::MergeFrom(from._internal_reportavatarmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reportavatarackmessage()->::ReportAvatarAckMessage::MergeFrom(from._internal_reportavatarackmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_reportgamemessage()->::ReportGameMessage::MergeFrom(from._internal_reportgamemessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_reportgameackmessage()->::ReportGameAckMessage::MergeFrom(from._internal_reportgameackmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_adminremovegamemessage()->::AdminRemoveGameMessage::MergeFrom(from._internal_adminremovegamemessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_adminremovegameackmessage()->::AdminRemoveGameAckMessage::MergeFrom(from._internal_adminremovegameackmessage());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_adminbanplayermessage()->::AdminBanPlayerMessage::MergeFrom(from._internal_adminbanplayermessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_adminbanplayerackmessage()->::AdminBanPlayerAckMessage::MergeFrom(from._internal_adminbanplayerackmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_errormessage()->::ErrorMessage::MergeFrom(from._internal_errormessage());
    }
    if (cached_has_bits & 0x00000800u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void LobbyMessage::CopyFrom(const LobbyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_initdonemessage()) {
    if (!initdonemessage_->IsInitialized()) return false;
  }
  if (_internal_has_avatarrequestmessage()) {
    if (!avatarrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_avatarheadermessage()) {
    if (!avatarheadermessage_->IsInitialized()) return false;
  }
  if (_internal_has_avatardatamessage()) {
    if (!avatardatamessage_->IsInitialized()) return false;
  }
  if (_internal_has_avatarendmessage()) {
    if (!avatarendmessage_->IsInitialized()) return false;
  }
  if (_internal_has_unknownavatarmessage()) {
    if (!unknownavatarmessage_->IsInitialized()) return false;
  }
  if (_internal_has_playerlistmessage()) {
    if (!playerlistmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistnewmessage()) {
    if (!gamelistnewmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistupdatemessage()) {
    if (!gamelistupdatemessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistplayerjoinedmessage()) {
    if (!gamelistplayerjoinedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistplayerleftmessage()) {
    if (!gamelistplayerleftmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistspectatorjoinedmessage()) {
    if (!gamelistspectatorjoinedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistspectatorleftmessage()) {
    if (!gamelistspectatorleftmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamelistadminchangedmessage()) {
    if (!gamelistadminchangedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_playerinforeplymessage()) {
    if (!playerinforeplymessage_->IsInitialized()) return false;
  }
  if (_internal_has_subscriptionrequestmessage()) {
    if (!subscriptionrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_subscriptionreplymessage()) {
    if (!subscriptionreplymessage_->IsInitialized()) return false;
  }
  if (_internal_has_creategamemessage()) {
    if (!creategamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_creategamefailedmessage()) {
    if (!creategamefailedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_joingamemessage()) {
    if (!joingamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_rejoingamemessage()) {
    if (!rejoingamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_joingameackmessage()) {
    if (!joingameackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_joingamefailedmessage()) {
    if (!joingamefailedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_invitenotifymessage()) {
    if (!invitenotifymessage_->IsInitialized()) return false;
  }
  if (_internal_has_rejectgameinvitationmessage()) {
    if (!rejectgameinvitationmessage_->IsInitialized()) return false;
  }
  if (_internal_has_rejectinvnotifymessage()) {
    if (!rejectinvnotifymessage_->IsInitialized()) return false;
  }
  if (_internal_has_statisticsmessage()) {
    if (!statisticsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatrequestmessage()) {
    if (!chatrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatmessage()) {
    if (!chatmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatrejectmessage()) {
    if (!chatrejectmessage_->IsInitialized()) return false;
  }
  if (_internal_has_dialogmessage()) {
    if (!dialogmessage_->IsInitialized()) return false;
  }
  if (_internal_has_timeoutwarningmessage()) {
    if (!timeoutwarningmessage_->IsInitialized()) return false;
  }
  if (_internal_has_reportavatarmessage()) {
    if (!reportavatarmessage_->IsInitialized()) return false;
  }
  if (_internal_has_reportavatarackmessage()) {
    if (!reportavatarackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_reportgamemessage()) {
    if (!reportgamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_reportgameackmessage()) {
    if (!reportgameackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_adminremovegamemessage()) {
    if (!adminremovegamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_adminremovegameackmessage()) {
    if (!adminremovegameackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_adminbanplayermessage()) {
    if (!adminbanplayermessage_->IsInitialized()) return false;
  }
  if (_internal_has_adminbanplayerackmessage()) {
    if (!adminbanplayerackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_errormessage()) {
    if (!errormessage_->IsInitialized()) return false;
  }
  return true;
}

void LobbyMessage::InternalSwap(LobbyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobbyMessage, errormessage_)
      + sizeof(LobbyMessage::errormessage_)
      - PROTOBUF_FIELD_OFFSET(LobbyMessage, initdonemessage_)>(
          reinterpret_cast<char*>(&initdonemessage_),
          reinterpret_cast<char*>(&other->initdonemessage_));
  swap(messagetype_, other->messagetype_);
}

std::string LobbyMessage::GetTypeName() const {
  return "LobbyMessage";
}


// ===================================================================

void GameManagementMessage::InitAsDefaultInstance() {
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->gameplayerjoinedmessage_ = const_cast< ::GamePlayerJoinedMessage*>(
      ::GamePlayerJoinedMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->gameplayerleftmessage_ = const_cast< ::GamePlayerLeftMessage*>(
      ::GamePlayerLeftMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->gamespectatorjoinedmessage_ = const_cast< ::GameSpectatorJoinedMessage*>(
      ::GameSpectatorJoinedMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->gamespectatorleftmessage_ = const_cast< ::GameSpectatorLeftMessage*>(
      ::GameSpectatorLeftMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->gameadminchangedmessage_ = const_cast< ::GameAdminChangedMessage*>(
      ::GameAdminChangedMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->removedfromgamemessage_ = const_cast< ::RemovedFromGameMessage*>(
      ::RemovedFromGameMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->kickplayerrequestmessage_ = const_cast< ::KickPlayerRequestMessage*>(
      ::KickPlayerRequestMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->leavegamerequestmessage_ = const_cast< ::LeaveGameRequestMessage*>(
      ::LeaveGameRequestMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->inviteplayertogamemessage_ = const_cast< ::InvitePlayerToGameMessage*>(
      ::InvitePlayerToGameMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->starteventmessage_ = const_cast< ::StartEventMessage*>(
      ::StartEventMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->starteventackmessage_ = const_cast< ::StartEventAckMessage*>(
      ::StartEventAckMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->gamestartinitialmessage_ = const_cast< ::GameStartInitialMessage*>(
      ::GameStartInitialMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->gamestartrejoinmessage_ = const_cast< ::GameStartRejoinMessage*>(
      ::GameStartRejoinMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->endofgamemessage_ = const_cast< ::EndOfGameMessage*>(
      ::EndOfGameMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->playeridchangedmessage_ = const_cast< ::PlayerIdChangedMessage*>(
      ::PlayerIdChangedMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->askkickplayermessage_ = const_cast< ::AskKickPlayerMessage*>(
      ::AskKickPlayerMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->askkickdeniedmessage_ = const_cast< ::AskKickDeniedMessage*>(
      ::AskKickDeniedMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->startkickpetitionmessage_ = const_cast< ::StartKickPetitionMessage*>(
      ::StartKickPetitionMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->votekickrequestmessage_ = const_cast< ::VoteKickRequestMessage*>(
      ::VoteKickRequestMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->votekickreplymessage_ = const_cast< ::VoteKickReplyMessage*>(
      ::VoteKickReplyMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->kickpetitionupdatemessage_ = const_cast< ::KickPetitionUpdateMessage*>(
      ::KickPetitionUpdateMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->endkickpetitionmessage_ = const_cast< ::EndKickPetitionMessage*>(
      ::EndKickPetitionMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->chatrequestmessage_ = const_cast< ::ChatRequestMessage*>(
      ::ChatRequestMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->chatmessage_ = const_cast< ::ChatMessage*>(
      ::ChatMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->chatrejectmessage_ = const_cast< ::ChatRejectMessage*>(
      ::ChatRejectMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->timeoutwarningmessage_ = const_cast< ::TimeoutWarningMessage*>(
      ::TimeoutWarningMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->resettimeoutmessage_ = const_cast< ::ResetTimeoutMessage*>(
      ::ResetTimeoutMessage::internal_default_instance());
  ::_GameManagementMessage_default_instance_._instance.get_mutable()->errormessage_ = const_cast< ::ErrorMessage*>(
      ::ErrorMessage::internal_default_instance());
}
class GameManagementMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameManagementMessage>()._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::GamePlayerJoinedMessage& gameplayerjoinedmessage(const GameManagementMessage* msg);
  static void set_has_gameplayerjoinedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GamePlayerLeftMessage& gameplayerleftmessage(const GameManagementMessage* msg);
  static void set_has_gameplayerleftmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GameSpectatorJoinedMessage& gamespectatorjoinedmessage(const GameManagementMessage* msg);
  static void set_has_gamespectatorjoinedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GameSpectatorLeftMessage& gamespectatorleftmessage(const GameManagementMessage* msg);
  static void set_has_gamespectatorleftmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::GameAdminChangedMessage& gameadminchangedmessage(const GameManagementMessage* msg);
  static void set_has_gameadminchangedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RemovedFromGameMessage& removedfromgamemessage(const GameManagementMessage* msg);
  static void set_has_removedfromgamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KickPlayerRequestMessage& kickplayerrequestmessage(const GameManagementMessage* msg);
  static void set_has_kickplayerrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::LeaveGameRequestMessage& leavegamerequestmessage(const GameManagementMessage* msg);
  static void set_has_leavegamerequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::InvitePlayerToGameMessage& inviteplayertogamemessage(const GameManagementMessage* msg);
  static void set_has_inviteplayertogamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::StartEventMessage& starteventmessage(const GameManagementMessage* msg);
  static void set_has_starteventmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::StartEventAckMessage& starteventackmessage(const GameManagementMessage* msg);
  static void set_has_starteventackmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::GameStartInitialMessage& gamestartinitialmessage(const GameManagementMessage* msg);
  static void set_has_gamestartinitialmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::GameStartRejoinMessage& gamestartrejoinmessage(const GameManagementMessage* msg);
  static void set_has_gamestartrejoinmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::EndOfGameMessage& endofgamemessage(const GameManagementMessage* msg);
  static void set_has_endofgamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::PlayerIdChangedMessage& playeridchangedmessage(const GameManagementMessage* msg);
  static void set_has_playeridchangedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::AskKickPlayerMessage& askkickplayermessage(const GameManagementMessage* msg);
  static void set_has_askkickplayermessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::AskKickDeniedMessage& askkickdeniedmessage(const GameManagementMessage* msg);
  static void set_has_askkickdeniedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::StartKickPetitionMessage& startkickpetitionmessage(const GameManagementMessage* msg);
  static void set_has_startkickpetitionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::VoteKickRequestMessage& votekickrequestmessage(const GameManagementMessage* msg);
  static void set_has_votekickrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::VoteKickReplyMessage& votekickreplymessage(const GameManagementMessage* msg);
  static void set_has_votekickreplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::KickPetitionUpdateMessage& kickpetitionupdatemessage(const GameManagementMessage* msg);
  static void set_has_kickpetitionupdatemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::EndKickPetitionMessage& endkickpetitionmessage(const GameManagementMessage* msg);
  static void set_has_endkickpetitionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::ChatRequestMessage& chatrequestmessage(const GameManagementMessage* msg);
  static void set_has_chatrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::ChatMessage& chatmessage(const GameManagementMessage* msg);
  static void set_has_chatmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::ChatRejectMessage& chatrejectmessage(const GameManagementMessage* msg);
  static void set_has_chatrejectmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TimeoutWarningMessage& timeoutwarningmessage(const GameManagementMessage* msg);
  static void set_has_timeoutwarningmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::ResetTimeoutMessage& resettimeoutmessage(const GameManagementMessage* msg);
  static void set_has_resettimeoutmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::ErrorMessage& errormessage(const GameManagementMessage* msg);
  static void set_has_errormessage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x10000000) ^ 0x10000000) != 0;
  }
};

const ::GamePlayerJoinedMessage&
GameManagementMessage::_Internal::gameplayerjoinedmessage(const GameManagementMessage* msg) {
  return *msg->gameplayerjoinedmessage_;
}
const ::GamePlayerLeftMessage&
GameManagementMessage::_Internal::gameplayerleftmessage(const GameManagementMessage* msg) {
  return *msg->gameplayerleftmessage_;
}
const ::GameSpectatorJoinedMessage&
GameManagementMessage::_Internal::gamespectatorjoinedmessage(const GameManagementMessage* msg) {
  return *msg->gamespectatorjoinedmessage_;
}
const ::GameSpectatorLeftMessage&
GameManagementMessage::_Internal::gamespectatorleftmessage(const GameManagementMessage* msg) {
  return *msg->gamespectatorleftmessage_;
}
const ::GameAdminChangedMessage&
GameManagementMessage::_Internal::gameadminchangedmessage(const GameManagementMessage* msg) {
  return *msg->gameadminchangedmessage_;
}
const ::RemovedFromGameMessage&
GameManagementMessage::_Internal::removedfromgamemessage(const GameManagementMessage* msg) {
  return *msg->removedfromgamemessage_;
}
const ::KickPlayerRequestMessage&
GameManagementMessage::_Internal::kickplayerrequestmessage(const GameManagementMessage* msg) {
  return *msg->kickplayerrequestmessage_;
}
const ::LeaveGameRequestMessage&
GameManagementMessage::_Internal::leavegamerequestmessage(const GameManagementMessage* msg) {
  return *msg->leavegamerequestmessage_;
}
const ::InvitePlayerToGameMessage&
GameManagementMessage::_Internal::inviteplayertogamemessage(const GameManagementMessage* msg) {
  return *msg->inviteplayertogamemessage_;
}
const ::StartEventMessage&
GameManagementMessage::_Internal::starteventmessage(const GameManagementMessage* msg) {
  return *msg->starteventmessage_;
}
const ::StartEventAckMessage&
GameManagementMessage::_Internal::starteventackmessage(const GameManagementMessage* msg) {
  return *msg->starteventackmessage_;
}
const ::GameStartInitialMessage&
GameManagementMessage::_Internal::gamestartinitialmessage(const GameManagementMessage* msg) {
  return *msg->gamestartinitialmessage_;
}
const ::GameStartRejoinMessage&
GameManagementMessage::_Internal::gamestartrejoinmessage(const GameManagementMessage* msg) {
  return *msg->gamestartrejoinmessage_;
}
const ::EndOfGameMessage&
GameManagementMessage::_Internal::endofgamemessage(const GameManagementMessage* msg) {
  return *msg->endofgamemessage_;
}
const ::PlayerIdChangedMessage&
GameManagementMessage::_Internal::playeridchangedmessage(const GameManagementMessage* msg) {
  return *msg->playeridchangedmessage_;
}
const ::AskKickPlayerMessage&
GameManagementMessage::_Internal::askkickplayermessage(const GameManagementMessage* msg) {
  return *msg->askkickplayermessage_;
}
const ::AskKickDeniedMessage&
GameManagementMessage::_Internal::askkickdeniedmessage(const GameManagementMessage* msg) {
  return *msg->askkickdeniedmessage_;
}
const ::StartKickPetitionMessage&
GameManagementMessage::_Internal::startkickpetitionmessage(const GameManagementMessage* msg) {
  return *msg->startkickpetitionmessage_;
}
const ::VoteKickRequestMessage&
GameManagementMessage::_Internal::votekickrequestmessage(const GameManagementMessage* msg) {
  return *msg->votekickrequestmessage_;
}
const ::VoteKickReplyMessage&
GameManagementMessage::_Internal::votekickreplymessage(const GameManagementMessage* msg) {
  return *msg->votekickreplymessage_;
}
const ::KickPetitionUpdateMessage&
GameManagementMessage::_Internal::kickpetitionupdatemessage(const GameManagementMessage* msg) {
  return *msg->kickpetitionupdatemessage_;
}
const ::EndKickPetitionMessage&
GameManagementMessage::_Internal::endkickpetitionmessage(const GameManagementMessage* msg) {
  return *msg->endkickpetitionmessage_;
}
const ::ChatRequestMessage&
GameManagementMessage::_Internal::chatrequestmessage(const GameManagementMessage* msg) {
  return *msg->chatrequestmessage_;
}
const ::ChatMessage&
GameManagementMessage::_Internal::chatmessage(const GameManagementMessage* msg) {
  return *msg->chatmessage_;
}
const ::ChatRejectMessage&
GameManagementMessage::_Internal::chatrejectmessage(const GameManagementMessage* msg) {
  return *msg->chatrejectmessage_;
}
const ::TimeoutWarningMessage&
GameManagementMessage::_Internal::timeoutwarningmessage(const GameManagementMessage* msg) {
  return *msg->timeoutwarningmessage_;
}
const ::ResetTimeoutMessage&
GameManagementMessage::_Internal::resettimeoutmessage(const GameManagementMessage* msg) {
  return *msg->resettimeoutmessage_;
}
const ::ErrorMessage&
GameManagementMessage::_Internal::errormessage(const GameManagementMessage* msg) {
  return *msg->errormessage_;
}
GameManagementMessage::GameManagementMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameManagementMessage)
}
GameManagementMessage::GameManagementMessage(const GameManagementMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_gameplayerjoinedmessage()) {
    gameplayerjoinedmessage_ = new ::GamePlayerJoinedMessage(*from.gameplayerjoinedmessage_);
  } else {
    gameplayerjoinedmessage_ = nullptr;
  }
  if (from._internal_has_gameplayerleftmessage()) {
    gameplayerleftmessage_ = new ::GamePlayerLeftMessage(*from.gameplayerleftmessage_);
  } else {
    gameplayerleftmessage_ = nullptr;
  }
  if (from._internal_has_gamespectatorjoinedmessage()) {
    gamespectatorjoinedmessage_ = new ::GameSpectatorJoinedMessage(*from.gamespectatorjoinedmessage_);
  } else {
    gamespectatorjoinedmessage_ = nullptr;
  }
  if (from._internal_has_gamespectatorleftmessage()) {
    gamespectatorleftmessage_ = new ::GameSpectatorLeftMessage(*from.gamespectatorleftmessage_);
  } else {
    gamespectatorleftmessage_ = nullptr;
  }
  if (from._internal_has_gameadminchangedmessage()) {
    gameadminchangedmessage_ = new ::GameAdminChangedMessage(*from.gameadminchangedmessage_);
  } else {
    gameadminchangedmessage_ = nullptr;
  }
  if (from._internal_has_removedfromgamemessage()) {
    removedfromgamemessage_ = new ::RemovedFromGameMessage(*from.removedfromgamemessage_);
  } else {
    removedfromgamemessage_ = nullptr;
  }
  if (from._internal_has_kickplayerrequestmessage()) {
    kickplayerrequestmessage_ = new ::KickPlayerRequestMessage(*from.kickplayerrequestmessage_);
  } else {
    kickplayerrequestmessage_ = nullptr;
  }
  if (from._internal_has_leavegamerequestmessage()) {
    leavegamerequestmessage_ = new ::LeaveGameRequestMessage(*from.leavegamerequestmessage_);
  } else {
    leavegamerequestmessage_ = nullptr;
  }
  if (from._internal_has_inviteplayertogamemessage()) {
    inviteplayertogamemessage_ = new ::InvitePlayerToGameMessage(*from.inviteplayertogamemessage_);
  } else {
    inviteplayertogamemessage_ = nullptr;
  }
  if (from._internal_has_starteventmessage()) {
    starteventmessage_ = new ::StartEventMessage(*from.starteventmessage_);
  } else {
    starteventmessage_ = nullptr;
  }
  if (from._internal_has_starteventackmessage()) {
    starteventackmessage_ = new ::StartEventAckMessage(*from.starteventackmessage_);
  } else {
    starteventackmessage_ = nullptr;
  }
  if (from._internal_has_gamestartinitialmessage()) {
    gamestartinitialmessage_ = new ::GameStartInitialMessage(*from.gamestartinitialmessage_);
  } else {
    gamestartinitialmessage_ = nullptr;
  }
  if (from._internal_has_gamestartrejoinmessage()) {
    gamestartrejoinmessage_ = new ::GameStartRejoinMessage(*from.gamestartrejoinmessage_);
  } else {
    gamestartrejoinmessage_ = nullptr;
  }
  if (from._internal_has_endofgamemessage()) {
    endofgamemessage_ = new ::EndOfGameMessage(*from.endofgamemessage_);
  } else {
    endofgamemessage_ = nullptr;
  }
  if (from._internal_has_playeridchangedmessage()) {
    playeridchangedmessage_ = new ::PlayerIdChangedMessage(*from.playeridchangedmessage_);
  } else {
    playeridchangedmessage_ = nullptr;
  }
  if (from._internal_has_askkickplayermessage()) {
    askkickplayermessage_ = new ::AskKickPlayerMessage(*from.askkickplayermessage_);
  } else {
    askkickplayermessage_ = nullptr;
  }
  if (from._internal_has_askkickdeniedmessage()) {
    askkickdeniedmessage_ = new ::AskKickDeniedMessage(*from.askkickdeniedmessage_);
  } else {
    askkickdeniedmessage_ = nullptr;
  }
  if (from._internal_has_startkickpetitionmessage()) {
    startkickpetitionmessage_ = new ::StartKickPetitionMessage(*from.startkickpetitionmessage_);
  } else {
    startkickpetitionmessage_ = nullptr;
  }
  if (from._internal_has_votekickrequestmessage()) {
    votekickrequestmessage_ = new ::VoteKickRequestMessage(*from.votekickrequestmessage_);
  } else {
    votekickrequestmessage_ = nullptr;
  }
  if (from._internal_has_votekickreplymessage()) {
    votekickreplymessage_ = new ::VoteKickReplyMessage(*from.votekickreplymessage_);
  } else {
    votekickreplymessage_ = nullptr;
  }
  if (from._internal_has_kickpetitionupdatemessage()) {
    kickpetitionupdatemessage_ = new ::KickPetitionUpdateMessage(*from.kickpetitionupdatemessage_);
  } else {
    kickpetitionupdatemessage_ = nullptr;
  }
  if (from._internal_has_endkickpetitionmessage()) {
    endkickpetitionmessage_ = new ::EndKickPetitionMessage(*from.endkickpetitionmessage_);
  } else {
    endkickpetitionmessage_ = nullptr;
  }
  if (from._internal_has_chatrequestmessage()) {
    chatrequestmessage_ = new ::ChatRequestMessage(*from.chatrequestmessage_);
  } else {
    chatrequestmessage_ = nullptr;
  }
  if (from._internal_has_chatmessage()) {
    chatmessage_ = new ::ChatMessage(*from.chatmessage_);
  } else {
    chatmessage_ = nullptr;
  }
  if (from._internal_has_chatrejectmessage()) {
    chatrejectmessage_ = new ::ChatRejectMessage(*from.chatrejectmessage_);
  } else {
    chatrejectmessage_ = nullptr;
  }
  if (from._internal_has_timeoutwarningmessage()) {
    timeoutwarningmessage_ = new ::TimeoutWarningMessage(*from.timeoutwarningmessage_);
  } else {
    timeoutwarningmessage_ = nullptr;
  }
  if (from._internal_has_resettimeoutmessage()) {
    resettimeoutmessage_ = new ::ResetTimeoutMessage(*from.resettimeoutmessage_);
  } else {
    resettimeoutmessage_ = nullptr;
  }
  if (from._internal_has_errormessage()) {
    errormessage_ = new ::ErrorMessage(*from.errormessage_);
  } else {
    errormessage_ = nullptr;
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:GameManagementMessage)
}

void GameManagementMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameManagementMessage_pokerth_2eproto.base);
  ::memset(&gameplayerjoinedmessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errormessage_) -
      reinterpret_cast<char*>(&gameplayerjoinedmessage_)) + sizeof(errormessage_));
  messagetype_ = 1;
}

GameManagementMessage::~GameManagementMessage() {
  // @@protoc_insertion_point(destructor:GameManagementMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameManagementMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gameplayerjoinedmessage_;
  if (this != internal_default_instance()) delete gameplayerleftmessage_;
  if (this != internal_default_instance()) delete gamespectatorjoinedmessage_;
  if (this != internal_default_instance()) delete gamespectatorleftmessage_;
  if (this != internal_default_instance()) delete gameadminchangedmessage_;
  if (this != internal_default_instance()) delete removedfromgamemessage_;
  if (this != internal_default_instance()) delete kickplayerrequestmessage_;
  if (this != internal_default_instance()) delete leavegamerequestmessage_;
  if (this != internal_default_instance()) delete inviteplayertogamemessage_;
  if (this != internal_default_instance()) delete starteventmessage_;
  if (this != internal_default_instance()) delete starteventackmessage_;
  if (this != internal_default_instance()) delete gamestartinitialmessage_;
  if (this != internal_default_instance()) delete gamestartrejoinmessage_;
  if (this != internal_default_instance()) delete endofgamemessage_;
  if (this != internal_default_instance()) delete playeridchangedmessage_;
  if (this != internal_default_instance()) delete askkickplayermessage_;
  if (this != internal_default_instance()) delete askkickdeniedmessage_;
  if (this != internal_default_instance()) delete startkickpetitionmessage_;
  if (this != internal_default_instance()) delete votekickrequestmessage_;
  if (this != internal_default_instance()) delete votekickreplymessage_;
  if (this != internal_default_instance()) delete kickpetitionupdatemessage_;
  if (this != internal_default_instance()) delete endkickpetitionmessage_;
  if (this != internal_default_instance()) delete chatrequestmessage_;
  if (this != internal_default_instance()) delete chatmessage_;
  if (this != internal_default_instance()) delete chatrejectmessage_;
  if (this != internal_default_instance()) delete timeoutwarningmessage_;
  if (this != internal_default_instance()) delete resettimeoutmessage_;
  if (this != internal_default_instance()) delete errormessage_;
}

void GameManagementMessage::ArenaDtor(void* object) {
  GameManagementMessage* _this = reinterpret_cast< GameManagementMessage* >(object);
  (void)_this;
}
void GameManagementMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameManagementMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameManagementMessage& GameManagementMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameManagementMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameManagementMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameManagementMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gameplayerjoinedmessage_ != nullptr);
      gameplayerjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gameplayerleftmessage_ != nullptr);
      gameplayerleftmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gamespectatorjoinedmessage_ != nullptr);
      gamespectatorjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gamespectatorleftmessage_ != nullptr);
      gamespectatorleftmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(gameadminchangedmessage_ != nullptr);
      gameadminchangedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(removedfromgamemessage_ != nullptr);
      removedfromgamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(kickplayerrequestmessage_ != nullptr);
      kickplayerrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(leavegamerequestmessage_ != nullptr);
      leavegamerequestmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(inviteplayertogamemessage_ != nullptr);
      inviteplayertogamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(starteventmessage_ != nullptr);
      starteventmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(starteventackmessage_ != nullptr);
      starteventackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(gamestartinitialmessage_ != nullptr);
      gamestartinitialmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(gamestartrejoinmessage_ != nullptr);
      gamestartrejoinmessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(endofgamemessage_ != nullptr);
      endofgamemessage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(playeridchangedmessage_ != nullptr);
      playeridchangedmessage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(askkickplayermessage_ != nullptr);
      askkickplayermessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(askkickdeniedmessage_ != nullptr);
      askkickdeniedmessage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(startkickpetitionmessage_ != nullptr);
      startkickpetitionmessage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(votekickrequestmessage_ != nullptr);
      votekickrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(votekickreplymessage_ != nullptr);
      votekickreplymessage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(kickpetitionupdatemessage_ != nullptr);
      kickpetitionupdatemessage_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(endkickpetitionmessage_ != nullptr);
      endkickpetitionmessage_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(chatrequestmessage_ != nullptr);
      chatrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(chatmessage_ != nullptr);
      chatmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(chatrejectmessage_ != nullptr);
      chatrejectmessage_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(timeoutwarningmessage_ != nullptr);
      timeoutwarningmessage_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(resettimeoutmessage_ != nullptr);
      resettimeoutmessage_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(errormessage_ != nullptr);
      errormessage_->Clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameManagementMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .GameManagementMessage.GameManagementMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GameManagementMessage_GameManagementMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::GameManagementMessage_GameManagementMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplayerjoinedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplayerleftmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamespectatorjoinedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamespectatorleftmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameAdminChangedMessage gameAdminChangedMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameadminchangedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RemovedFromGameMessage removedFromGameMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_removedfromgamemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kickplayerrequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .LeaveGameRequestMessage leaveGameRequestMessage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_leavegamerequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviteplayertogamemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .StartEventMessage startEventMessage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_starteventmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .StartEventAckMessage startEventAckMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_starteventackmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameStartInitialMessage gameStartInitialMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestartinitialmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameStartRejoinMessage gameStartRejoinMessage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestartrejoinmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EndOfGameMessage endOfGameMessage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_endofgamemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayerIdChangedMessage playerIdChangedMessage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_playeridchangedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AskKickPlayerMessage askKickPlayerMessage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_askkickplayermessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AskKickDeniedMessage askKickDeniedMessage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_askkickdeniedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .StartKickPetitionMessage startKickPetitionMessage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_startkickpetitionmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .VoteKickRequestMessage voteKickRequestMessage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_votekickrequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .VoteKickReplyMessage voteKickReplyMessage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_votekickreplymessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_kickpetitionupdatemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EndKickPetitionMessage endKickPetitionMessage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_endkickpetitionmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ChatRequestMessage chatRequestMessage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatrequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ChatMessage chatMessage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ChatRejectMessage chatRejectMessage = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatrejectmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TimeoutWarningMessage timeoutWarningMessage = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeoutwarningmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ResetTimeoutMessage resetTimeoutMessage = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_resettimeoutmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorMessage errorMessage = 1025;
      case 1025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errormessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameManagementMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameManagementMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GameManagementMessage.GameManagementMessageType messageType = 1;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gameplayerjoinedmessage(this), target, stream);
  }

  // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gameplayerleftmessage(this), target, stream);
  }

  // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gamespectatorjoinedmessage(this), target, stream);
  }

  // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gamespectatorleftmessage(this), target, stream);
  }

  // optional .GameAdminChangedMessage gameAdminChangedMessage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::gameadminchangedmessage(this), target, stream);
  }

  // optional .RemovedFromGameMessage removedFromGameMessage = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::removedfromgamemessage(this), target, stream);
  }

  // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::kickplayerrequestmessage(this), target, stream);
  }

  // optional .LeaveGameRequestMessage leaveGameRequestMessage = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::leavegamerequestmessage(this), target, stream);
  }

  // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::inviteplayertogamemessage(this), target, stream);
  }

  // optional .StartEventMessage startEventMessage = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::starteventmessage(this), target, stream);
  }

  // optional .StartEventAckMessage startEventAckMessage = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::starteventackmessage(this), target, stream);
  }

  // optional .GameStartInitialMessage gameStartInitialMessage = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::gamestartinitialmessage(this), target, stream);
  }

  // optional .GameStartRejoinMessage gameStartRejoinMessage = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::gamestartrejoinmessage(this), target, stream);
  }

  // optional .EndOfGameMessage endOfGameMessage = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::endofgamemessage(this), target, stream);
  }

  // optional .PlayerIdChangedMessage playerIdChangedMessage = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::playeridchangedmessage(this), target, stream);
  }

  // optional .AskKickPlayerMessage askKickPlayerMessage = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::askkickplayermessage(this), target, stream);
  }

  // optional .AskKickDeniedMessage askKickDeniedMessage = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::askkickdeniedmessage(this), target, stream);
  }

  // optional .StartKickPetitionMessage startKickPetitionMessage = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::startkickpetitionmessage(this), target, stream);
  }

  // optional .VoteKickRequestMessage voteKickRequestMessage = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::votekickrequestmessage(this), target, stream);
  }

  // optional .VoteKickReplyMessage voteKickReplyMessage = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::votekickreplymessage(this), target, stream);
  }

  // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::kickpetitionupdatemessage(this), target, stream);
  }

  // optional .EndKickPetitionMessage endKickPetitionMessage = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::endkickpetitionmessage(this), target, stream);
  }

  // optional .ChatRequestMessage chatRequestMessage = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::chatrequestmessage(this), target, stream);
  }

  // optional .ChatMessage chatMessage = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::chatmessage(this), target, stream);
  }

  // optional .ChatRejectMessage chatRejectMessage = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::chatrejectmessage(this), target, stream);
  }

  // optional .TimeoutWarningMessage timeoutWarningMessage = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::timeoutwarningmessage(this), target, stream);
  }

  // optional .ResetTimeoutMessage resetTimeoutMessage = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::resettimeoutmessage(this), target, stream);
  }

  // optional .ErrorMessage errorMessage = 1025;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1025, _Internal::errormessage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameManagementMessage)
  return target;
}

size_t GameManagementMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameManagementMessage)
  size_t total_size = 0;

  // required .GameManagementMessage.GameManagementMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gameplayerjoinedmessage_);
    }

    // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gameplayerleftmessage_);
    }

    // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamespectatorjoinedmessage_);
    }

    // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamespectatorleftmessage_);
    }

    // optional .GameAdminChangedMessage gameAdminChangedMessage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gameadminchangedmessage_);
    }

    // optional .RemovedFromGameMessage removedFromGameMessage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *removedfromgamemessage_);
    }

    // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kickplayerrequestmessage_);
    }

    // optional .LeaveGameRequestMessage leaveGameRequestMessage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leavegamerequestmessage_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inviteplayertogamemessage_);
    }

    // optional .StartEventMessage startEventMessage = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *starteventmessage_);
    }

    // optional .StartEventAckMessage startEventAckMessage = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *starteventackmessage_);
    }

    // optional .GameStartInitialMessage gameStartInitialMessage = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamestartinitialmessage_);
    }

    // optional .GameStartRejoinMessage gameStartRejoinMessage = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamestartrejoinmessage_);
    }

    // optional .EndOfGameMessage endOfGameMessage = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *endofgamemessage_);
    }

    // optional .PlayerIdChangedMessage playerIdChangedMessage = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playeridchangedmessage_);
    }

    // optional .AskKickPlayerMessage askKickPlayerMessage = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *askkickplayermessage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .AskKickDeniedMessage askKickDeniedMessage = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *askkickdeniedmessage_);
    }

    // optional .StartKickPetitionMessage startKickPetitionMessage = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *startkickpetitionmessage_);
    }

    // optional .VoteKickRequestMessage voteKickRequestMessage = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *votekickrequestmessage_);
    }

    // optional .VoteKickReplyMessage voteKickReplyMessage = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *votekickreplymessage_);
    }

    // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kickpetitionupdatemessage_);
    }

    // optional .EndKickPetitionMessage endKickPetitionMessage = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *endkickpetitionmessage_);
    }

    // optional .ChatRequestMessage chatRequestMessage = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chatrequestmessage_);
    }

    // optional .ChatMessage chatMessage = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chatmessage_);
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional .ChatRejectMessage chatRejectMessage = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chatrejectmessage_);
    }

    // optional .TimeoutWarningMessage timeoutWarningMessage = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timeoutwarningmessage_);
    }

    // optional .ResetTimeoutMessage resetTimeoutMessage = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resettimeoutmessage_);
    }

    // optional .ErrorMessage errorMessage = 1025;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *errormessage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameManagementMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameManagementMessage*>(
      &from));
}

void GameManagementMessage::MergeFrom(const GameManagementMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameManagementMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gameplayerjoinedmessage()->::GamePlayerJoinedMessage::MergeFrom(from._internal_gameplayerjoinedmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gameplayerleftmessage()->::GamePlayerLeftMessage::MergeFrom(from._internal_gameplayerleftmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gamespectatorjoinedmessage()->::GameSpectatorJoinedMessage::MergeFrom(from._internal_gamespectatorjoinedmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_gamespectatorleftmessage()->::GameSpectatorLeftMessage::MergeFrom(from._internal_gamespectatorleftmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_gameadminchangedmessage()->::GameAdminChangedMessage::MergeFrom(from._internal_gameadminchangedmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_removedfromgamemessage()->::RemovedFromGameMessage::MergeFrom(from._internal_removedfromgamemessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_kickplayerrequestmessage()->::KickPlayerRequestMessage::MergeFrom(from._internal_kickplayerrequestmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_leavegamerequestmessage()->::LeaveGameRequestMessage::MergeFrom(from._internal_leavegamerequestmessage());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_inviteplayertogamemessage()->::InvitePlayerToGameMessage::MergeFrom(from._internal_inviteplayertogamemessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_starteventmessage()->::StartEventMessage::MergeFrom(from._internal_starteventmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_starteventackmessage()->::StartEventAckMessage::MergeFrom(from._internal_starteventackmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_gamestartinitialmessage()->::GameStartInitialMessage::MergeFrom(from._internal_gamestartinitialmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_gamestartrejoinmessage()->::GameStartRejoinMessage::MergeFrom(from._internal_gamestartrejoinmessage());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_endofgamemessage()->::EndOfGameMessage::MergeFrom(from._internal_endofgamemessage());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_playeridchangedmessage()->::PlayerIdChangedMessage::MergeFrom(from._internal_playeridchangedmessage());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_askkickplayermessage()->::AskKickPlayerMessage::MergeFrom(from._internal_askkickplayermessage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_askkickdeniedmessage()->::AskKickDeniedMessage::MergeFrom(from._internal_askkickdeniedmessage());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_startkickpetitionmessage()->::StartKickPetitionMessage::MergeFrom(from._internal_startkickpetitionmessage());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_votekickrequestmessage()->::VoteKickRequestMessage::MergeFrom(from._internal_votekickrequestmessage());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_votekickreplymessage()->::VoteKickReplyMessage::MergeFrom(from._internal_votekickreplymessage());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_kickpetitionupdatemessage()->::KickPetitionUpdateMessage::MergeFrom(from._internal_kickpetitionupdatemessage());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_endkickpetitionmessage()->::EndKickPetitionMessage::MergeFrom(from._internal_endkickpetitionmessage());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_chatrequestmessage()->::ChatRequestMessage::MergeFrom(from._internal_chatrequestmessage());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_chatmessage()->::ChatMessage::MergeFrom(from._internal_chatmessage());
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_chatrejectmessage()->::ChatRejectMessage::MergeFrom(from._internal_chatrejectmessage());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_timeoutwarningmessage()->::TimeoutWarningMessage::MergeFrom(from._internal_timeoutwarningmessage());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_resettimeoutmessage()->::ResetTimeoutMessage::MergeFrom(from._internal_resettimeoutmessage());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_errormessage()->::ErrorMessage::MergeFrom(from._internal_errormessage());
    }
    if (cached_has_bits & 0x10000000u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameManagementMessage::CopyFrom(const GameManagementMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameManagementMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameManagementMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gameplayerjoinedmessage()) {
    if (!gameplayerjoinedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gameplayerleftmessage()) {
    if (!gameplayerleftmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamespectatorjoinedmessage()) {
    if (!gamespectatorjoinedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamespectatorleftmessage()) {
    if (!gamespectatorleftmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gameadminchangedmessage()) {
    if (!gameadminchangedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_removedfromgamemessage()) {
    if (!removedfromgamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_kickplayerrequestmessage()) {
    if (!kickplayerrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_inviteplayertogamemessage()) {
    if (!inviteplayertogamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_starteventmessage()) {
    if (!starteventmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamestartinitialmessage()) {
    if (!gamestartinitialmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamestartrejoinmessage()) {
    if (!gamestartrejoinmessage_->IsInitialized()) return false;
  }
  if (_internal_has_endofgamemessage()) {
    if (!endofgamemessage_->IsInitialized()) return false;
  }
  if (_internal_has_playeridchangedmessage()) {
    if (!playeridchangedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_askkickplayermessage()) {
    if (!askkickplayermessage_->IsInitialized()) return false;
  }
  if (_internal_has_askkickdeniedmessage()) {
    if (!askkickdeniedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_startkickpetitionmessage()) {
    if (!startkickpetitionmessage_->IsInitialized()) return false;
  }
  if (_internal_has_votekickrequestmessage()) {
    if (!votekickrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_votekickreplymessage()) {
    if (!votekickreplymessage_->IsInitialized()) return false;
  }
  if (_internal_has_kickpetitionupdatemessage()) {
    if (!kickpetitionupdatemessage_->IsInitialized()) return false;
  }
  if (_internal_has_endkickpetitionmessage()) {
    if (!endkickpetitionmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatrequestmessage()) {
    if (!chatrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatmessage()) {
    if (!chatmessage_->IsInitialized()) return false;
  }
  if (_internal_has_chatrejectmessage()) {
    if (!chatrejectmessage_->IsInitialized()) return false;
  }
  if (_internal_has_timeoutwarningmessage()) {
    if (!timeoutwarningmessage_->IsInitialized()) return false;
  }
  if (_internal_has_errormessage()) {
    if (!errormessage_->IsInitialized()) return false;
  }
  return true;
}

void GameManagementMessage::InternalSwap(GameManagementMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameManagementMessage, errormessage_)
      + sizeof(GameManagementMessage::errormessage_)
      - PROTOBUF_FIELD_OFFSET(GameManagementMessage, gameplayerjoinedmessage_)>(
          reinterpret_cast<char*>(&gameplayerjoinedmessage_),
          reinterpret_cast<char*>(&other->gameplayerjoinedmessage_));
  swap(messagetype_, other->messagetype_);
}

std::string GameManagementMessage::GetTypeName() const {
  return "GameManagementMessage";
}


// ===================================================================

void GameEngineMessage::InitAsDefaultInstance() {
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->handstartmessage_ = const_cast< ::HandStartMessage*>(
      ::HandStartMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->playersturnmessage_ = const_cast< ::PlayersTurnMessage*>(
      ::PlayersTurnMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->myactionrequestmessage_ = const_cast< ::MyActionRequestMessage*>(
      ::MyActionRequestMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->youractionrejectedmessage_ = const_cast< ::YourActionRejectedMessage*>(
      ::YourActionRejectedMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->playersactiondonemessage_ = const_cast< ::PlayersActionDoneMessage*>(
      ::PlayersActionDoneMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->dealflopcardsmessage_ = const_cast< ::DealFlopCardsMessage*>(
      ::DealFlopCardsMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->dealturncardmessage_ = const_cast< ::DealTurnCardMessage*>(
      ::DealTurnCardMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->dealrivercardmessage_ = const_cast< ::DealRiverCardMessage*>(
      ::DealRiverCardMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->allinshowcardsmessage_ = const_cast< ::AllInShowCardsMessage*>(
      ::AllInShowCardsMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->endofhandshowcardsmessage_ = const_cast< ::EndOfHandShowCardsMessage*>(
      ::EndOfHandShowCardsMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->endofhandhidecardsmessage_ = const_cast< ::EndOfHandHideCardsMessage*>(
      ::EndOfHandHideCardsMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->showmycardsrequestmessage_ = const_cast< ::ShowMyCardsRequestMessage*>(
      ::ShowMyCardsRequestMessage::internal_default_instance());
  ::_GameEngineMessage_default_instance_._instance.get_mutable()->afterhandshowcardsmessage_ = const_cast< ::AfterHandShowCardsMessage*>(
      ::AfterHandShowCardsMessage::internal_default_instance());
}
class GameEngineMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEngineMessage>()._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::HandStartMessage& handstartmessage(const GameEngineMessage* msg);
  static void set_has_handstartmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PlayersTurnMessage& playersturnmessage(const GameEngineMessage* msg);
  static void set_has_playersturnmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::MyActionRequestMessage& myactionrequestmessage(const GameEngineMessage* msg);
  static void set_has_myactionrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::YourActionRejectedMessage& youractionrejectedmessage(const GameEngineMessage* msg);
  static void set_has_youractionrejectedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PlayersActionDoneMessage& playersactiondonemessage(const GameEngineMessage* msg);
  static void set_has_playersactiondonemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::DealFlopCardsMessage& dealflopcardsmessage(const GameEngineMessage* msg);
  static void set_has_dealflopcardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::DealTurnCardMessage& dealturncardmessage(const GameEngineMessage* msg);
  static void set_has_dealturncardmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::DealRiverCardMessage& dealrivercardmessage(const GameEngineMessage* msg);
  static void set_has_dealrivercardmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::AllInShowCardsMessage& allinshowcardsmessage(const GameEngineMessage* msg);
  static void set_has_allinshowcardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::EndOfHandShowCardsMessage& endofhandshowcardsmessage(const GameEngineMessage* msg);
  static void set_has_endofhandshowcardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::EndOfHandHideCardsMessage& endofhandhidecardsmessage(const GameEngineMessage* msg);
  static void set_has_endofhandhidecardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ShowMyCardsRequestMessage& showmycardsrequestmessage(const GameEngineMessage* msg);
  static void set_has_showmycardsrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::AfterHandShowCardsMessage& afterhandshowcardsmessage(const GameEngineMessage* msg);
  static void set_has_afterhandshowcardsmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00002000) ^ 0x00002000) != 0;
  }
};

const ::HandStartMessage&
GameEngineMessage::_Internal::handstartmessage(const GameEngineMessage* msg) {
  return *msg->handstartmessage_;
}
const ::PlayersTurnMessage&
GameEngineMessage::_Internal::playersturnmessage(const GameEngineMessage* msg) {
  return *msg->playersturnmessage_;
}
const ::MyActionRequestMessage&
GameEngineMessage::_Internal::myactionrequestmessage(const GameEngineMessage* msg) {
  return *msg->myactionrequestmessage_;
}
const ::YourActionRejectedMessage&
GameEngineMessage::_Internal::youractionrejectedmessage(const GameEngineMessage* msg) {
  return *msg->youractionrejectedmessage_;
}
const ::PlayersActionDoneMessage&
GameEngineMessage::_Internal::playersactiondonemessage(const GameEngineMessage* msg) {
  return *msg->playersactiondonemessage_;
}
const ::DealFlopCardsMessage&
GameEngineMessage::_Internal::dealflopcardsmessage(const GameEngineMessage* msg) {
  return *msg->dealflopcardsmessage_;
}
const ::DealTurnCardMessage&
GameEngineMessage::_Internal::dealturncardmessage(const GameEngineMessage* msg) {
  return *msg->dealturncardmessage_;
}
const ::DealRiverCardMessage&
GameEngineMessage::_Internal::dealrivercardmessage(const GameEngineMessage* msg) {
  return *msg->dealrivercardmessage_;
}
const ::AllInShowCardsMessage&
GameEngineMessage::_Internal::allinshowcardsmessage(const GameEngineMessage* msg) {
  return *msg->allinshowcardsmessage_;
}
const ::EndOfHandShowCardsMessage&
GameEngineMessage::_Internal::endofhandshowcardsmessage(const GameEngineMessage* msg) {
  return *msg->endofhandshowcardsmessage_;
}
const ::EndOfHandHideCardsMessage&
GameEngineMessage::_Internal::endofhandhidecardsmessage(const GameEngineMessage* msg) {
  return *msg->endofhandhidecardsmessage_;
}
const ::ShowMyCardsRequestMessage&
GameEngineMessage::_Internal::showmycardsrequestmessage(const GameEngineMessage* msg) {
  return *msg->showmycardsrequestmessage_;
}
const ::AfterHandShowCardsMessage&
GameEngineMessage::_Internal::afterhandshowcardsmessage(const GameEngineMessage* msg) {
  return *msg->afterhandshowcardsmessage_;
}
GameEngineMessage::GameEngineMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEngineMessage)
}
GameEngineMessage::GameEngineMessage(const GameEngineMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_handstartmessage()) {
    handstartmessage_ = new ::HandStartMessage(*from.handstartmessage_);
  } else {
    handstartmessage_ = nullptr;
  }
  if (from._internal_has_playersturnmessage()) {
    playersturnmessage_ = new ::PlayersTurnMessage(*from.playersturnmessage_);
  } else {
    playersturnmessage_ = nullptr;
  }
  if (from._internal_has_myactionrequestmessage()) {
    myactionrequestmessage_ = new ::MyActionRequestMessage(*from.myactionrequestmessage_);
  } else {
    myactionrequestmessage_ = nullptr;
  }
  if (from._internal_has_youractionrejectedmessage()) {
    youractionrejectedmessage_ = new ::YourActionRejectedMessage(*from.youractionrejectedmessage_);
  } else {
    youractionrejectedmessage_ = nullptr;
  }
  if (from._internal_has_playersactiondonemessage()) {
    playersactiondonemessage_ = new ::PlayersActionDoneMessage(*from.playersactiondonemessage_);
  } else {
    playersactiondonemessage_ = nullptr;
  }
  if (from._internal_has_dealflopcardsmessage()) {
    dealflopcardsmessage_ = new ::DealFlopCardsMessage(*from.dealflopcardsmessage_);
  } else {
    dealflopcardsmessage_ = nullptr;
  }
  if (from._internal_has_dealturncardmessage()) {
    dealturncardmessage_ = new ::DealTurnCardMessage(*from.dealturncardmessage_);
  } else {
    dealturncardmessage_ = nullptr;
  }
  if (from._internal_has_dealrivercardmessage()) {
    dealrivercardmessage_ = new ::DealRiverCardMessage(*from.dealrivercardmessage_);
  } else {
    dealrivercardmessage_ = nullptr;
  }
  if (from._internal_has_allinshowcardsmessage()) {
    allinshowcardsmessage_ = new ::AllInShowCardsMessage(*from.allinshowcardsmessage_);
  } else {
    allinshowcardsmessage_ = nullptr;
  }
  if (from._internal_has_endofhandshowcardsmessage()) {
    endofhandshowcardsmessage_ = new ::EndOfHandShowCardsMessage(*from.endofhandshowcardsmessage_);
  } else {
    endofhandshowcardsmessage_ = nullptr;
  }
  if (from._internal_has_endofhandhidecardsmessage()) {
    endofhandhidecardsmessage_ = new ::EndOfHandHideCardsMessage(*from.endofhandhidecardsmessage_);
  } else {
    endofhandhidecardsmessage_ = nullptr;
  }
  if (from._internal_has_showmycardsrequestmessage()) {
    showmycardsrequestmessage_ = new ::ShowMyCardsRequestMessage(*from.showmycardsrequestmessage_);
  } else {
    showmycardsrequestmessage_ = nullptr;
  }
  if (from._internal_has_afterhandshowcardsmessage()) {
    afterhandshowcardsmessage_ = new ::AfterHandShowCardsMessage(*from.afterhandshowcardsmessage_);
  } else {
    afterhandshowcardsmessage_ = nullptr;
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:GameEngineMessage)
}

void GameEngineMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameEngineMessage_pokerth_2eproto.base);
  ::memset(&handstartmessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&afterhandshowcardsmessage_) -
      reinterpret_cast<char*>(&handstartmessage_)) + sizeof(afterhandshowcardsmessage_));
  messagetype_ = 1;
}

GameEngineMessage::~GameEngineMessage() {
  // @@protoc_insertion_point(destructor:GameEngineMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameEngineMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete handstartmessage_;
  if (this != internal_default_instance()) delete playersturnmessage_;
  if (this != internal_default_instance()) delete myactionrequestmessage_;
  if (this != internal_default_instance()) delete youractionrejectedmessage_;
  if (this != internal_default_instance()) delete playersactiondonemessage_;
  if (this != internal_default_instance()) delete dealflopcardsmessage_;
  if (this != internal_default_instance()) delete dealturncardmessage_;
  if (this != internal_default_instance()) delete dealrivercardmessage_;
  if (this != internal_default_instance()) delete allinshowcardsmessage_;
  if (this != internal_default_instance()) delete endofhandshowcardsmessage_;
  if (this != internal_default_instance()) delete endofhandhidecardsmessage_;
  if (this != internal_default_instance()) delete showmycardsrequestmessage_;
  if (this != internal_default_instance()) delete afterhandshowcardsmessage_;
}

void GameEngineMessage::ArenaDtor(void* object) {
  GameEngineMessage* _this = reinterpret_cast< GameEngineMessage* >(object);
  (void)_this;
}
void GameEngineMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEngineMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEngineMessage& GameEngineMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEngineMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameEngineMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEngineMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(handstartmessage_ != nullptr);
      handstartmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(playersturnmessage_ != nullptr);
      playersturnmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(myactionrequestmessage_ != nullptr);
      myactionrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(youractionrejectedmessage_ != nullptr);
      youractionrejectedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(playersactiondonemessage_ != nullptr);
      playersactiondonemessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dealflopcardsmessage_ != nullptr);
      dealflopcardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dealturncardmessage_ != nullptr);
      dealturncardmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(dealrivercardmessage_ != nullptr);
      dealrivercardmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(allinshowcardsmessage_ != nullptr);
      allinshowcardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(endofhandshowcardsmessage_ != nullptr);
      endofhandshowcardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(endofhandhidecardsmessage_ != nullptr);
      endofhandhidecardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(showmycardsrequestmessage_ != nullptr);
      showmycardsrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(afterhandshowcardsmessage_ != nullptr);
      afterhandshowcardsmessage_->Clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameEngineMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .GameEngineMessage.GameEngineMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GameEngineMessage_GameEngineMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::GameEngineMessage_GameEngineMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .HandStartMessage handStartMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_handstartmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayersTurnMessage playersTurnMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_playersturnmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MyActionRequestMessage myActionRequestMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_myactionrequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .YourActionRejectedMessage yourActionRejectedMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_youractionrejectedmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PlayersActionDoneMessage playersActionDoneMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_playersactiondonemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DealFlopCardsMessage dealFlopCardsMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dealflopcardsmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DealTurnCardMessage dealTurnCardMessage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dealturncardmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DealRiverCardMessage dealRiverCardMessage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dealrivercardmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AllInShowCardsMessage allInShowCardsMessage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_allinshowcardsmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_endofhandshowcardsmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_endofhandhidecardsmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_showmycardsrequestmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_afterhandshowcardsmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEngineMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEngineMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GameEngineMessage.GameEngineMessageType messageType = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .HandStartMessage handStartMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::handstartmessage(this), target, stream);
  }

  // optional .PlayersTurnMessage playersTurnMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::playersturnmessage(this), target, stream);
  }

  // optional .MyActionRequestMessage myActionRequestMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::myactionrequestmessage(this), target, stream);
  }

  // optional .YourActionRejectedMessage yourActionRejectedMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::youractionrejectedmessage(this), target, stream);
  }

  // optional .PlayersActionDoneMessage playersActionDoneMessage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::playersactiondonemessage(this), target, stream);
  }

  // optional .DealFlopCardsMessage dealFlopCardsMessage = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dealflopcardsmessage(this), target, stream);
  }

  // optional .DealTurnCardMessage dealTurnCardMessage = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dealturncardmessage(this), target, stream);
  }

  // optional .DealRiverCardMessage dealRiverCardMessage = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::dealrivercardmessage(this), target, stream);
  }

  // optional .AllInShowCardsMessage allInShowCardsMessage = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::allinshowcardsmessage(this), target, stream);
  }

  // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::endofhandshowcardsmessage(this), target, stream);
  }

  // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::endofhandhidecardsmessage(this), target, stream);
  }

  // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::showmycardsrequestmessage(this), target, stream);
  }

  // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::afterhandshowcardsmessage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEngineMessage)
  return target;
}

size_t GameEngineMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEngineMessage)
  size_t total_size = 0;

  // required .GameEngineMessage.GameEngineMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .HandStartMessage handStartMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *handstartmessage_);
    }

    // optional .PlayersTurnMessage playersTurnMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playersturnmessage_);
    }

    // optional .MyActionRequestMessage myActionRequestMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *myactionrequestmessage_);
    }

    // optional .YourActionRejectedMessage yourActionRejectedMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *youractionrejectedmessage_);
    }

    // optional .PlayersActionDoneMessage playersActionDoneMessage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playersactiondonemessage_);
    }

    // optional .DealFlopCardsMessage dealFlopCardsMessage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dealflopcardsmessage_);
    }

    // optional .DealTurnCardMessage dealTurnCardMessage = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dealturncardmessage_);
    }

    // optional .DealRiverCardMessage dealRiverCardMessage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dealrivercardmessage_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .AllInShowCardsMessage allInShowCardsMessage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allinshowcardsmessage_);
    }

    // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *endofhandshowcardsmessage_);
    }

    // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *endofhandhidecardsmessage_);
    }

    // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *showmycardsrequestmessage_);
    }

    // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *afterhandshowcardsmessage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEngineMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameEngineMessage*>(
      &from));
}

void GameEngineMessage::MergeFrom(const GameEngineMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEngineMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_handstartmessage()->::HandStartMessage::MergeFrom(from._internal_handstartmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_playersturnmessage()->::PlayersTurnMessage::MergeFrom(from._internal_playersturnmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_myactionrequestmessage()->::MyActionRequestMessage::MergeFrom(from._internal_myactionrequestmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_youractionrejectedmessage()->::YourActionRejectedMessage::MergeFrom(from._internal_youractionrejectedmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_playersactiondonemessage()->::PlayersActionDoneMessage::MergeFrom(from._internal_playersactiondonemessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dealflopcardsmessage()->::DealFlopCardsMessage::MergeFrom(from._internal_dealflopcardsmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_dealturncardmessage()->::DealTurnCardMessage::MergeFrom(from._internal_dealturncardmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_dealrivercardmessage()->::DealRiverCardMessage::MergeFrom(from._internal_dealrivercardmessage());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_allinshowcardsmessage()->::AllInShowCardsMessage::MergeFrom(from._internal_allinshowcardsmessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_endofhandshowcardsmessage()->::EndOfHandShowCardsMessage::MergeFrom(from._internal_endofhandshowcardsmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_endofhandhidecardsmessage()->::EndOfHandHideCardsMessage::MergeFrom(from._internal_endofhandhidecardsmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_showmycardsrequestmessage()->::ShowMyCardsRequestMessage::MergeFrom(from._internal_showmycardsrequestmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_afterhandshowcardsmessage()->::AfterHandShowCardsMessage::MergeFrom(from._internal_afterhandshowcardsmessage());
    }
    if (cached_has_bits & 0x00002000u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameEngineMessage::CopyFrom(const GameEngineMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEngineMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEngineMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_handstartmessage()) {
    if (!handstartmessage_->IsInitialized()) return false;
  }
  if (_internal_has_playersturnmessage()) {
    if (!playersturnmessage_->IsInitialized()) return false;
  }
  if (_internal_has_myactionrequestmessage()) {
    if (!myactionrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_youractionrejectedmessage()) {
    if (!youractionrejectedmessage_->IsInitialized()) return false;
  }
  if (_internal_has_playersactiondonemessage()) {
    if (!playersactiondonemessage_->IsInitialized()) return false;
  }
  if (_internal_has_dealflopcardsmessage()) {
    if (!dealflopcardsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_dealturncardmessage()) {
    if (!dealturncardmessage_->IsInitialized()) return false;
  }
  if (_internal_has_dealrivercardmessage()) {
    if (!dealrivercardmessage_->IsInitialized()) return false;
  }
  if (_internal_has_allinshowcardsmessage()) {
    if (!allinshowcardsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_endofhandshowcardsmessage()) {
    if (!endofhandshowcardsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_endofhandhidecardsmessage()) {
    if (!endofhandhidecardsmessage_->IsInitialized()) return false;
  }
  if (_internal_has_afterhandshowcardsmessage()) {
    if (!afterhandshowcardsmessage_->IsInitialized()) return false;
  }
  return true;
}

void GameEngineMessage::InternalSwap(GameEngineMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEngineMessage, afterhandshowcardsmessage_)
      + sizeof(GameEngineMessage::afterhandshowcardsmessage_)
      - PROTOBUF_FIELD_OFFSET(GameEngineMessage, handstartmessage_)>(
          reinterpret_cast<char*>(&handstartmessage_),
          reinterpret_cast<char*>(&other->handstartmessage_));
  swap(messagetype_, other->messagetype_);
}

std::string GameEngineMessage::GetTypeName() const {
  return "GameEngineMessage";
}


// ===================================================================

void GameMessage::InitAsDefaultInstance() {
  ::_GameMessage_default_instance_._instance.get_mutable()->gamemanagementmessage_ = const_cast< ::GameManagementMessage*>(
      ::GameManagementMessage::internal_default_instance());
  ::_GameMessage_default_instance_._instance.get_mutable()->gameenginemessage_ = const_cast< ::GameEngineMessage*>(
      ::GameEngineMessage::internal_default_instance());
}
class GameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMessage>()._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GameManagementMessage& gamemanagementmessage(const GameMessage* msg);
  static void set_has_gamemanagementmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GameEngineMessage& gameenginemessage(const GameMessage* msg);
  static void set_has_gameenginemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::GameManagementMessage&
GameMessage::_Internal::gamemanagementmessage(const GameMessage* msg) {
  return *msg->gamemanagementmessage_;
}
const ::GameEngineMessage&
GameMessage::_Internal::gameenginemessage(const GameMessage* msg) {
  return *msg->gameenginemessage_;
}
GameMessage::GameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameMessage)
}
GameMessage::GameMessage(const GameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_gamemanagementmessage()) {
    gamemanagementmessage_ = new ::GameManagementMessage(*from.gamemanagementmessage_);
  } else {
    gamemanagementmessage_ = nullptr;
  }
  if (from._internal_has_gameenginemessage()) {
    gameenginemessage_ = new ::GameEngineMessage(*from.gameenginemessage_);
  } else {
    gameenginemessage_ = nullptr;
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&messagetype_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(messagetype_));
  // @@protoc_insertion_point(copy_constructor:GameMessage)
}

void GameMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameMessage_pokerth_2eproto.base);
  ::memset(&gamemanagementmessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) -
      reinterpret_cast<char*>(&gamemanagementmessage_)) + sizeof(gameid_));
  messagetype_ = 1;
}

GameMessage::~GameMessage() {
  // @@protoc_insertion_point(destructor:GameMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gamemanagementmessage_;
  if (this != internal_default_instance()) delete gameenginemessage_;
}

void GameMessage::ArenaDtor(void* object) {
  GameMessage* _this = reinterpret_cast< GameMessage* >(object);
  (void)_this;
}
void GameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage& GameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gamemanagementmessage_ != nullptr);
      gamemanagementmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gameenginemessage_ != nullptr);
      gameenginemessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    gameid_ = 0u;
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .GameMessage.GameMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GameMessage_GameMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::GameMessage_GameMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 gameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameManagementMessage gameManagementMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamemanagementmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameEngineMessage gameEngineMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameenginemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GameMessage.GameMessageType messageType = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // required uint32 gameId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameid(), target);
  }

  // optional .GameManagementMessage gameManagementMessage = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gamemanagementmessage(this), target, stream);
  }

  // optional .GameEngineMessage gameEngineMessage = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gameenginemessage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage)
  return target;
}

size_t GameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameMessage)
  size_t total_size = 0;

  if (_internal_has_gameid()) {
    // required uint32 gameId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());
  }

  if (_internal_has_messagetype()) {
    // required .GameMessage.GameMessageType messageType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return total_size;
}
size_t GameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 gameId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gameid());

    // required .GameMessage.GameMessageType messageType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .GameManagementMessage gameManagementMessage = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamemanagementmessage_);
    }

    // optional .GameEngineMessage gameEngineMessage = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gameenginemessage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GameMessage*>(
      &from));
}

void GameMessage::MergeFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gamemanagementmessage()->::GameManagementMessage::MergeFrom(from._internal_gamemanagementmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gameenginemessage()->::GameEngineMessage::MergeFrom(from._internal_gameenginemessage());
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameMessage::CopyFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gamemanagementmessage()) {
    if (!gamemanagementmessage_->IsInitialized()) return false;
  }
  if (_internal_has_gameenginemessage()) {
    if (!gameenginemessage_->IsInitialized()) return false;
  }
  return true;
}

void GameMessage::InternalSwap(GameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMessage, gameid_)
      + sizeof(GameMessage::gameid_)
      - PROTOBUF_FIELD_OFFSET(GameMessage, gamemanagementmessage_)>(
          reinterpret_cast<char*>(&gamemanagementmessage_),
          reinterpret_cast<char*>(&other->gamemanagementmessage_));
  swap(messagetype_, other->messagetype_);
}

std::string GameMessage::GetTypeName() const {
  return "GameMessage";
}


// ===================================================================

void PokerTHMessage::InitAsDefaultInstance() {
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->announcemessage_ = const_cast< ::AnnounceMessage*>(
      ::AnnounceMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->authmessage_ = const_cast< ::AuthMessage*>(
      ::AuthMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->lobbymessage_ = const_cast< ::LobbyMessage*>(
      ::LobbyMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamemessage_ = const_cast< ::GameMessage*>(
      ::GameMessage::internal_default_instance());
}
class PokerTHMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PokerTHMessage>()._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::AnnounceMessage& announcemessage(const PokerTHMessage* msg);
  static void set_has_announcemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AuthMessage& authmessage(const PokerTHMessage* msg);
  static void set_has_authmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::LobbyMessage& lobbymessage(const PokerTHMessage* msg);
  static void set_has_lobbymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GameMessage& gamemessage(const PokerTHMessage* msg);
  static void set_has_gamemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::AnnounceMessage&
PokerTHMessage::_Internal::announcemessage(const PokerTHMessage* msg) {
  return *msg->announcemessage_;
}
const ::AuthMessage&
PokerTHMessage::_Internal::authmessage(const PokerTHMessage* msg) {
  return *msg->authmessage_;
}
const ::LobbyMessage&
PokerTHMessage::_Internal::lobbymessage(const PokerTHMessage* msg) {
  return *msg->lobbymessage_;
}
const ::GameMessage&
PokerTHMessage::_Internal::gamemessage(const PokerTHMessage* msg) {
  return *msg->gamemessage_;
}
PokerTHMessage::PokerTHMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PokerTHMessage)
}
PokerTHMessage::PokerTHMessage(const PokerTHMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_announcemessage()) {
    announcemessage_ = new ::AnnounceMessage(*from.announcemessage_);
  } else {
    announcemessage_ = nullptr;
  }
  if (from._internal_has_authmessage()) {
    authmessage_ = new ::AuthMessage(*from.authmessage_);
  } else {
    authmessage_ = nullptr;
  }
  if (from._internal_has_lobbymessage()) {
    lobbymessage_ = new ::LobbyMessage(*from.lobbymessage_);
  } else {
    lobbymessage_ = nullptr;
  }
  if (from._internal_has_gamemessage()) {
    gamemessage_ = new ::GameMessage(*from.gamemessage_);
  } else {
    gamemessage_ = nullptr;
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:PokerTHMessage)
}

void PokerTHMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PokerTHMessage_pokerth_2eproto.base);
  ::memset(&announcemessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamemessage_) -
      reinterpret_cast<char*>(&announcemessage_)) + sizeof(gamemessage_));
  messagetype_ = 1;
}

PokerTHMessage::~PokerTHMessage() {
  // @@protoc_insertion_point(destructor:PokerTHMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PokerTHMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete announcemessage_;
  if (this != internal_default_instance()) delete authmessage_;
  if (this != internal_default_instance()) delete lobbymessage_;
  if (this != internal_default_instance()) delete gamemessage_;
}

void PokerTHMessage::ArenaDtor(void* object) {
  PokerTHMessage* _this = reinterpret_cast< PokerTHMessage* >(object);
  (void)_this;
}
void PokerTHMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PokerTHMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PokerTHMessage& PokerTHMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PokerTHMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PokerTHMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PokerTHMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(announcemessage_ != nullptr);
      announcemessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(authmessage_ != nullptr);
      authmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lobbymessage_ != nullptr);
      lobbymessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gamemessage_ != nullptr);
      gamemessage_->Clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PokerTHMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .PokerTHMessage.PokerTHMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PokerTHMessage_PokerTHMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::PokerTHMessage_PokerTHMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .AnnounceMessage announceMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_announcemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AuthMessage authMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_authmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .LobbyMessage lobbyMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobbymessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameMessage gameMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PokerTHMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PokerTHMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .AnnounceMessage announceMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::announcemessage(this), target, stream);
  }

  // optional .AuthMessage authMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::authmessage(this), target, stream);
  }

  // optional .LobbyMessage lobbyMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lobbymessage(this), target, stream);
  }

  // optional .GameMessage gameMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gamemessage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PokerTHMessage)
  return target;
}

size_t PokerTHMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PokerTHMessage)
  size_t total_size = 0;

  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .AnnounceMessage announceMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *announcemessage_);
    }

    // optional .AuthMessage authMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authmessage_);
    }

    // optional .LobbyMessage lobbyMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lobbymessage_);
    }

    // optional .GameMessage gameMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamemessage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PokerTHMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PokerTHMessage*>(
      &from));
}

void PokerTHMessage::MergeFrom(const PokerTHMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PokerTHMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_announcemessage()->::AnnounceMessage::MergeFrom(from._internal_announcemessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_authmessage()->::AuthMessage::MergeFrom(from._internal_authmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lobbymessage()->::LobbyMessage::MergeFrom(from._internal_lobbymessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_gamemessage()->::GameMessage::MergeFrom(from._internal_gamemessage());
    }
    if (cached_has_bits & 0x00000010u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PokerTHMessage::CopyFrom(const PokerTHMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PokerTHMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerTHMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_announcemessage()) {
    if (!announcemessage_->IsInitialized()) return false;
  }
  if (_internal_has_authmessage()) {
    if (!authmessage_->IsInitialized()) return false;
  }
  if (_internal_has_lobbymessage()) {
    if (!lobbymessage_->IsInitialized()) return false;
  }
  if (_internal_has_gamemessage()) {
    if (!gamemessage_->IsInitialized()) return false;
  }
  return true;
}

void PokerTHMessage::InternalSwap(PokerTHMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PokerTHMessage, gamemessage_)
      + sizeof(PokerTHMessage::gamemessage_)
      - PROTOBUF_FIELD_OFFSET(PokerTHMessage, announcemessage_)>(
          reinterpret_cast<char*>(&announcemessage_),
          reinterpret_cast<char*>(&other->announcemessage_));
  swap(messagetype_, other->messagetype_);
}

std::string PokerTHMessage::GetTypeName() const {
  return "PokerTHMessage";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetGameInfo* Arena::CreateMaybeMessage< ::NetGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerResult* Arena::CreateMaybeMessage< ::PlayerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::AnnounceMessage_Version* Arena::CreateMaybeMessage< ::AnnounceMessage_Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnnounceMessage_Version >(arena);
}
template<> PROTOBUF_NOINLINE ::AnnounceMessage* Arena::CreateMaybeMessage< ::AnnounceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnnounceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthClientRequestMessage* Arena::CreateMaybeMessage< ::AuthClientRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthClientRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthServerChallengeMessage* Arena::CreateMaybeMessage< ::AuthServerChallengeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthServerChallengeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthClientResponseMessage* Arena::CreateMaybeMessage< ::AuthClientResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthClientResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthServerVerificationMessage* Arena::CreateMaybeMessage< ::AuthServerVerificationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthServerVerificationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InitDoneMessage* Arena::CreateMaybeMessage< ::InitDoneMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InitDoneMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarRequestMessage* Arena::CreateMaybeMessage< ::AvatarRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AvatarRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarHeaderMessage* Arena::CreateMaybeMessage< ::AvatarHeaderMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AvatarHeaderMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarDataMessage* Arena::CreateMaybeMessage< ::AvatarDataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AvatarDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarEndMessage* Arena::CreateMaybeMessage< ::AvatarEndMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AvatarEndMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::UnknownAvatarMessage* Arena::CreateMaybeMessage< ::UnknownAvatarMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnknownAvatarMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerListMessage* Arena::CreateMaybeMessage< ::PlayerListMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerListMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListNewMessage* Arena::CreateMaybeMessage< ::GameListNewMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListNewMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListUpdateMessage* Arena::CreateMaybeMessage< ::GameListUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListPlayerJoinedMessage* Arena::CreateMaybeMessage< ::GameListPlayerJoinedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListPlayerJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListPlayerLeftMessage* Arena::CreateMaybeMessage< ::GameListPlayerLeftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListPlayerLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListSpectatorJoinedMessage* Arena::CreateMaybeMessage< ::GameListSpectatorJoinedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListSpectatorJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListSpectatorLeftMessage* Arena::CreateMaybeMessage< ::GameListSpectatorLeftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListSpectatorLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListAdminChangedMessage* Arena::CreateMaybeMessage< ::GameListAdminChangedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameListAdminChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoRequestMessage* Arena::CreateMaybeMessage< ::PlayerInfoRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfoRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData* Arena::CreateMaybeMessage< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoReplyMessage_PlayerInfoData* Arena::CreateMaybeMessage< ::PlayerInfoReplyMessage_PlayerInfoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfoReplyMessage_PlayerInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoReplyMessage* Arena::CreateMaybeMessage< ::PlayerInfoReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfoReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SubscriptionRequestMessage* Arena::CreateMaybeMessage< ::SubscriptionRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubscriptionRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SubscriptionReplyMessage* Arena::CreateMaybeMessage< ::SubscriptionReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubscriptionReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateGameMessage* Arena::CreateMaybeMessage< ::CreateGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateGameFailedMessage* Arena::CreateMaybeMessage< ::CreateGameFailedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateGameFailedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinGameMessage* Arena::CreateMaybeMessage< ::JoinGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JoinGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RejoinGameMessage* Arena::CreateMaybeMessage< ::RejoinGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RejoinGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinGameAckMessage* Arena::CreateMaybeMessage< ::JoinGameAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JoinGameAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinGameFailedMessage* Arena::CreateMaybeMessage< ::JoinGameFailedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JoinGameFailedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerJoinedMessage* Arena::CreateMaybeMessage< ::GamePlayerJoinedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerLeftMessage* Arena::CreateMaybeMessage< ::GamePlayerLeftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameSpectatorJoinedMessage* Arena::CreateMaybeMessage< ::GameSpectatorJoinedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameSpectatorJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameSpectatorLeftMessage* Arena::CreateMaybeMessage< ::GameSpectatorLeftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameSpectatorLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameAdminChangedMessage* Arena::CreateMaybeMessage< ::GameAdminChangedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameAdminChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RemovedFromGameMessage* Arena::CreateMaybeMessage< ::RemovedFromGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemovedFromGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::KickPlayerRequestMessage* Arena::CreateMaybeMessage< ::KickPlayerRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KickPlayerRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::LeaveGameRequestMessage* Arena::CreateMaybeMessage< ::LeaveGameRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LeaveGameRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InvitePlayerToGameMessage* Arena::CreateMaybeMessage< ::InvitePlayerToGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InvitePlayerToGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InviteNotifyMessage* Arena::CreateMaybeMessage< ::InviteNotifyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InviteNotifyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RejectGameInvitationMessage* Arena::CreateMaybeMessage< ::RejectGameInvitationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RejectGameInvitationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RejectInvNotifyMessage* Arena::CreateMaybeMessage< ::RejectInvNotifyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RejectInvNotifyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StartEventMessage* Arena::CreateMaybeMessage< ::StartEventMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartEventMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StartEventAckMessage* Arena::CreateMaybeMessage< ::StartEventAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartEventAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartInitialMessage* Arena::CreateMaybeMessage< ::GameStartInitialMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameStartInitialMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartRejoinMessage_RejoinPlayerData* Arena::CreateMaybeMessage< ::GameStartRejoinMessage_RejoinPlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameStartRejoinMessage_RejoinPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartRejoinMessage* Arena::CreateMaybeMessage< ::GameStartRejoinMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameStartRejoinMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::HandStartMessage_PlainCards* Arena::CreateMaybeMessage< ::HandStartMessage_PlainCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HandStartMessage_PlainCards >(arena);
}
template<> PROTOBUF_NOINLINE ::HandStartMessage* Arena::CreateMaybeMessage< ::HandStartMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HandStartMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayersTurnMessage* Arena::CreateMaybeMessage< ::PlayersTurnMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayersTurnMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MyActionRequestMessage* Arena::CreateMaybeMessage< ::MyActionRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyActionRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::YourActionRejectedMessage* Arena::CreateMaybeMessage< ::YourActionRejectedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YourActionRejectedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayersActionDoneMessage* Arena::CreateMaybeMessage< ::PlayersActionDoneMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayersActionDoneMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DealFlopCardsMessage* Arena::CreateMaybeMessage< ::DealFlopCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DealFlopCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DealTurnCardMessage* Arena::CreateMaybeMessage< ::DealTurnCardMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DealTurnCardMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DealRiverCardMessage* Arena::CreateMaybeMessage< ::DealRiverCardMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DealRiverCardMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AllInShowCardsMessage_PlayerAllIn* Arena::CreateMaybeMessage< ::AllInShowCardsMessage_PlayerAllIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AllInShowCardsMessage_PlayerAllIn >(arena);
}
template<> PROTOBUF_NOINLINE ::AllInShowCardsMessage* Arena::CreateMaybeMessage< ::AllInShowCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AllInShowCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndOfHandShowCardsMessage* Arena::CreateMaybeMessage< ::EndOfHandShowCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EndOfHandShowCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndOfHandHideCardsMessage* Arena::CreateMaybeMessage< ::EndOfHandHideCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EndOfHandHideCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ShowMyCardsRequestMessage* Arena::CreateMaybeMessage< ::ShowMyCardsRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShowMyCardsRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AfterHandShowCardsMessage* Arena::CreateMaybeMessage< ::AfterHandShowCardsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AfterHandShowCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndOfGameMessage* Arena::CreateMaybeMessage< ::EndOfGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EndOfGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerIdChangedMessage* Arena::CreateMaybeMessage< ::PlayerIdChangedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerIdChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AskKickPlayerMessage* Arena::CreateMaybeMessage< ::AskKickPlayerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AskKickPlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AskKickDeniedMessage* Arena::CreateMaybeMessage< ::AskKickDeniedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AskKickDeniedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StartKickPetitionMessage* Arena::CreateMaybeMessage< ::StartKickPetitionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartKickPetitionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::VoteKickRequestMessage* Arena::CreateMaybeMessage< ::VoteKickRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VoteKickRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::VoteKickReplyMessage* Arena::CreateMaybeMessage< ::VoteKickReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VoteKickReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::KickPetitionUpdateMessage* Arena::CreateMaybeMessage< ::KickPetitionUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KickPetitionUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndKickPetitionMessage* Arena::CreateMaybeMessage< ::EndKickPetitionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EndKickPetitionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StatisticsMessage_StatisticsData* Arena::CreateMaybeMessage< ::StatisticsMessage_StatisticsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatisticsMessage_StatisticsData >(arena);
}
template<> PROTOBUF_NOINLINE ::StatisticsMessage* Arena::CreateMaybeMessage< ::StatisticsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatisticsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRequestMessage* Arena::CreateMaybeMessage< ::ChatRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessage* Arena::CreateMaybeMessage< ::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRejectMessage* Arena::CreateMaybeMessage< ::ChatRejectMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRejectMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DialogMessage* Arena::CreateMaybeMessage< ::DialogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DialogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TimeoutWarningMessage* Arena::CreateMaybeMessage< ::TimeoutWarningMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TimeoutWarningMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ResetTimeoutMessage* Arena::CreateMaybeMessage< ::ResetTimeoutMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResetTimeoutMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportAvatarMessage* Arena::CreateMaybeMessage< ::ReportAvatarMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportAvatarMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportAvatarAckMessage* Arena::CreateMaybeMessage< ::ReportAvatarAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportAvatarAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportGameMessage* Arena::CreateMaybeMessage< ::ReportGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportGameAckMessage* Arena::CreateMaybeMessage< ::ReportGameAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportGameAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ErrorMessage* Arena::CreateMaybeMessage< ::ErrorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ErrorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminRemoveGameMessage* Arena::CreateMaybeMessage< ::AdminRemoveGameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminRemoveGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminRemoveGameAckMessage* Arena::CreateMaybeMessage< ::AdminRemoveGameAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminRemoveGameAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminBanPlayerMessage* Arena::CreateMaybeMessage< ::AdminBanPlayerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminBanPlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminBanPlayerAckMessage* Arena::CreateMaybeMessage< ::AdminBanPlayerAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminBanPlayerAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthMessage* Arena::CreateMaybeMessage< ::AuthMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMessage* Arena::CreateMaybeMessage< ::LobbyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LobbyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameManagementMessage* Arena::CreateMaybeMessage< ::GameManagementMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameManagementMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEngineMessage* Arena::CreateMaybeMessage< ::GameEngineMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEngineMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMessage* Arena::CreateMaybeMessage< ::GameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PokerTHMessage* Arena::CreateMaybeMessage< ::PokerTHMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PokerTHMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
